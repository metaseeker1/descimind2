{"version":3,"sources":["../src/actions/bridge.ts","../src/providers/wallet.ts","../src/templates/index.ts","../src/actions/swap.ts","../src/actions/transfer.ts","../src/index.ts"],"sourcesContent":["import type { IAgentRuntime, Memory, State } from \"@ai16z/eliza\";\nimport {\n    ChainId,\n    createConfig,\n    executeRoute,\n    ExtendedChain,\n    getRoutes,\n} from \"@lifi/sdk\";\nimport { getChainConfigs, WalletProvider } from \"../providers/wallet\";\nimport { bridgeTemplate } from \"../templates\";\nimport type { BridgeParams, Transaction } from \"../types\";\n\nexport { bridgeTemplate };\n\nexport class BridgeAction {\n    private config;\n\n    constructor(private walletProvider: WalletProvider) {\n        this.config = createConfig({\n            integrator: \"eliza\",\n            chains: Object.values(\n                getChainConfigs(this.walletProvider.runtime)\n            ).map((config) => ({\n                id: config.chainId,\n                name: config.name,\n                key: config.name.toLowerCase(),\n                chainType: \"EVM\",\n                nativeToken: {\n                    ...config.nativeCurrency,\n                    chainId: config.chainId,\n                    address: \"0x0000000000000000000000000000000000000000\",\n                    coinKey: config.nativeCurrency.symbol,\n                },\n                metamask: {\n                    chainId: `0x${config.chainId.toString(16)}`,\n                    chainName: config.name,\n                    nativeCurrency: config.nativeCurrency,\n                    rpcUrls: [config.rpcUrl],\n                    blockExplorerUrls: [config.blockExplorerUrl],\n                },\n                diamondAddress: \"0x0000000000000000000000000000000000000000\",\n                coin: config.nativeCurrency.symbol,\n                mainnet: true,\n            })) as ExtendedChain[],\n        });\n    }\n\n    async bridge(params: BridgeParams): Promise<Transaction> {\n        const walletClient = this.walletProvider.getWalletClient();\n        const [fromAddress] = await walletClient.getAddresses();\n\n        const routes = await getRoutes({\n            fromChainId: getChainConfigs(this.walletProvider.runtime)[\n                params.fromChain\n            ].chainId as ChainId,\n            toChainId: getChainConfigs(this.walletProvider.runtime)[\n                params.toChain\n            ].chainId as ChainId,\n            fromTokenAddress: params.fromToken,\n            toTokenAddress: params.toToken,\n            fromAmount: params.amount,\n            fromAddress: fromAddress,\n            toAddress: params.toAddress || fromAddress,\n        });\n\n        if (!routes.routes.length) throw new Error(\"No routes found\");\n\n        const execution = await executeRoute(routes.routes[0], this.config);\n        const process = execution.steps[0]?.execution?.process[0];\n\n        if (!process?.status || process.status === \"FAILED\") {\n            throw new Error(\"Transaction failed\");\n        }\n\n        return {\n            hash: process.txHash as `0x${string}`,\n            from: fromAddress,\n            to: routes.routes[0].steps[0].estimate\n                .approvalAddress as `0x${string}`,\n            value: BigInt(params.amount),\n            chainId: getChainConfigs(this.walletProvider.runtime)[\n                params.fromChain\n            ].chainId,\n        };\n    }\n}\n\nexport const bridgeAction = {\n    name: \"bridge\",\n    description: \"Bridge tokens between different chains\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: any\n    ) => {\n        const walletProvider = new WalletProvider(runtime);\n        const action = new BridgeAction(walletProvider);\n        return action.bridge(options);\n    },\n    template: bridgeTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"user\",\n                content: {\n                    text: \"Bridge 1 ETH from Ethereum to Base\",\n                    action: \"CROSS_CHAIN_TRANSFER\",\n                },\n            },\n        ],\n    ],\n    similes: [\"CROSS_CHAIN_TRANSFER\", \"CHAIN_BRIDGE\", \"MOVE_CROSS_CHAIN\"],\n}; // TODO: add more examples / similies\n","import type { IAgentRuntime, Provider, Memory, State } from \"@ai16z/eliza\";\nimport {\n    createPublicClient,\n    createWalletClient,\n    http,\n    formatUnits,\n    type PublicClient,\n    type WalletClient,\n    type Chain,\n    type HttpTransport,\n    type Address,\n    Account,\n} from \"viem\";\nimport { mainnet, base } from \"viem/chains\";\nimport type { SupportedChain, ChainConfig, ChainMetadata } from \"../types\";\nimport { privateKeyToAccount } from \"viem/accounts\";\n\nexport const DEFAULT_CHAIN_CONFIGS: Record<SupportedChain, ChainMetadata> = {\n    ethereum: {\n        chainId: 1,\n        name: \"Ethereum\",\n        chain: mainnet,\n        rpcUrl: \"https://eth.llamarpc.com\",\n        nativeCurrency: {\n            name: \"Ether\",\n            symbol: \"ETH\",\n            decimals: 18,\n        },\n        blockExplorerUrl: \"https://etherscan.io\",\n    },\n    base: {\n        chainId: 8453,\n        name: \"Base\",\n        chain: base,\n        rpcUrl: \"https://base.llamarpc.com\",\n        nativeCurrency: {\n            name: \"Ether\",\n            symbol: \"ETH\",\n            decimals: 18,\n        },\n        blockExplorerUrl: \"https://basescan.org\",\n    },\n} as const;\n\nexport const getChainConfigs = (runtime: IAgentRuntime) => {\n    return (\n        (runtime.character.settings.chains?.evm as ChainConfig[]) ||\n        DEFAULT_CHAIN_CONFIGS\n    );\n};\n\nexport class WalletProvider {\n    private chainConfigs: Record<SupportedChain, ChainConfig>;\n    private currentChain: SupportedChain = \"ethereum\";\n    private address: Address;\n    runtime: IAgentRuntime;\n\n    constructor(runtime: IAgentRuntime) {\n        const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\n        if (!privateKey) throw new Error(\"EVM_PRIVATE_KEY not configured\");\n\n        this.runtime = runtime;\n\n        const account = privateKeyToAccount(privateKey as `0x${string}`);\n        this.address = account.address;\n\n        const createClients = (chain: SupportedChain): ChainConfig => {\n            const transport = http(getChainConfigs(runtime)[chain].rpcUrl);\n            return {\n                chain: getChainConfigs(runtime)[chain].chain,\n                publicClient: createPublicClient<HttpTransport>({\n                    chain: getChainConfigs(runtime)[chain].chain,\n                    transport,\n                }) as PublicClient<HttpTransport, Chain, Account | undefined>,\n                walletClient: createWalletClient<HttpTransport>({\n                    chain: getChainConfigs(runtime)[chain].chain,\n                    transport,\n                    account,\n                }),\n            };\n        };\n\n        this.chainConfigs = {\n            ethereum: createClients(\"ethereum\"),\n            base: createClients(\"base\"),\n        };\n    }\n\n    getAddress(): Address {\n        return this.address;\n    }\n\n    async getWalletBalance(): Promise<string | null> {\n        try {\n            const client = this.getPublicClient(this.currentChain);\n            const walletClient = this.getWalletClient();\n            const balance = await client.getBalance({\n                address: walletClient.account.address,\n            });\n            return formatUnits(balance, 18);\n        } catch (error) {\n            console.error(\"Error getting wallet balance:\", error);\n            return null;\n        }\n    }\n\n    async connect(): Promise<`0x${string}`> {\n        return this.runtime.getSetting(\"EVM_PRIVATE_KEY\") as `0x${string}`;\n    }\n\n    async switchChain(\n        runtime: IAgentRuntime,\n        chain: SupportedChain\n    ): Promise<void> {\n        const walletClient = this.chainConfigs[this.currentChain].walletClient;\n        if (!walletClient) throw new Error(\"Wallet not connected\");\n\n        try {\n            await walletClient.switchChain({\n                id: getChainConfigs(runtime)[chain].chainId,\n            });\n        } catch (error: any) {\n            if (error.code === 4902) {\n                console.log(\n                    \"[WalletProvider] Chain not added to wallet (error 4902) - attempting to add chain first\"\n                );\n                await walletClient.addChain({\n                    chain: {\n                        ...getChainConfigs(runtime)[chain].chain,\n                        rpcUrls: {\n                            default: {\n                                http: [getChainConfigs(runtime)[chain].rpcUrl],\n                            },\n                            public: {\n                                http: [getChainConfigs(runtime)[chain].rpcUrl],\n                            },\n                        },\n                    },\n                });\n                await walletClient.switchChain({\n                    id: getChainConfigs(runtime)[chain].chainId,\n                });\n            } else {\n                throw error;\n            }\n        }\n\n        this.currentChain = chain;\n    }\n\n    getPublicClient(\n        chain: SupportedChain\n    ): PublicClient<HttpTransport, Chain, Account | undefined> {\n        return this.chainConfigs[chain].publicClient;\n    }\n\n    getWalletClient(): WalletClient {\n        const walletClient = this.chainConfigs[this.currentChain].walletClient;\n        if (!walletClient) throw new Error(\"Wallet not connected\");\n        return walletClient;\n    }\n\n    getCurrentChain(): SupportedChain {\n        return this.currentChain;\n    }\n\n    getChainConfig(chain: SupportedChain) {\n        return getChainConfigs(this.runtime)[chain];\n    }\n}\n\nexport const evmWalletProvider: Provider = {\n    async get(\n        runtime: IAgentRuntime,\n        message: Memory,\n        state?: State\n    ): Promise<string | null> {\n        // Check if the user has an EVM wallet\n        if (!runtime.getSetting(\"EVM_PRIVATE_KEY\")) {\n            return null;\n        }\n\n        try {\n            const walletProvider = new WalletProvider(runtime);\n            const address = walletProvider.getAddress();\n            const balance = await walletProvider.getWalletBalance();\n            return `EVM Wallet Address: ${address}\\nBalance: ${balance} ETH`;\n        } catch (error) {\n            console.error(\"Error in EVM wallet provider:\", error);\n            return null;\n        }\n    },\n};\n","export const transferTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested transfer:\n- Chain to execute on (ethereum or base)\n- Amount to transfer\n- Recipient address\n- Token symbol or address (if not native token)\n\nRespond with a JSON markdown block containing only the extracted values:\n\n\\`\\`\\`json\n{\n    \"chain\": \"ethereum\" | \"base\" | null,\n    \"amount\": string | null,\n    \"toAddress\": string | null,\n    \"token\": string | null\n}\n\\`\\`\\`\n`;\n\nexport const bridgeTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested token bridge:\n- Token symbol or address to bridge\n- Source chain (ethereum or base)\n- Destination chain (ethereum or base)\n- Amount to bridge\n- Destination address (if specified)\n\nRespond with a JSON markdown block containing only the extracted values:\n\n\\`\\`\\`json\n{\n    \"token\": string | null,\n    \"fromChain\": \"ethereum\" | \"base\" | null,\n    \"toChain\": \"ethereum\" | \"base\" | null,\n    \"amount\": string | null,\n    \"toAddress\": string | null\n}\n\\`\\`\\`\n`;\n\nexport const swapTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested token swap:\n- Input token symbol or address (the token being sold)\n- Output token symbol or address (the token being bought)\n- Amount to swap\n- Chain to execute on (ethereum or base)\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"inputToken\": string | null,\n    \"outputToken\": string | null,\n    \"amount\": string | null,\n    \"chain\": \"ethereum\" | \"base\" | null,\n    \"slippage\": number | null\n}\n\\`\\`\\`\n`;\n","import type { IAgentRuntime, Memory, State } from \"@ai16z/eliza\";\nimport {\n    ChainId,\n    createConfig,\n    executeRoute,\n    ExtendedChain,\n    getRoutes,\n} from \"@lifi/sdk\";\nimport { getChainConfigs, WalletProvider } from \"../providers/wallet\";\nimport { swapTemplate } from \"../templates\";\nimport type { SwapParams, Transaction } from \"../types\";\n\nexport { swapTemplate };\n\nexport class SwapAction {\n    private config;\n\n    constructor(private walletProvider: WalletProvider) {\n        this.config = createConfig({\n            integrator: \"eliza\",\n            chains: Object.values(\n                getChainConfigs(this.walletProvider.runtime)\n            ).map((config) => ({\n                id: config.chainId,\n                name: config.name,\n                key: config.name.toLowerCase(),\n                chainType: \"EVM\" as const,\n                nativeToken: {\n                    ...config.nativeCurrency,\n                    chainId: config.chainId,\n                    address: \"0x0000000000000000000000000000000000000000\",\n                    coinKey: config.nativeCurrency.symbol,\n                    priceUSD: \"0\",\n                    logoURI: \"\",\n                    symbol: config.nativeCurrency.symbol,\n                    decimals: config.nativeCurrency.decimals,\n                    name: config.nativeCurrency.name,\n                },\n                rpcUrls: {\n                    public: { http: [config.rpcUrl] },\n                },\n                blockExplorerUrls: [config.blockExplorerUrl],\n                metamask: {\n                    chainId: `0x${config.chainId.toString(16)}`,\n                    chainName: config.name,\n                    nativeCurrency: config.nativeCurrency,\n                    rpcUrls: [config.rpcUrl],\n                    blockExplorerUrls: [config.blockExplorerUrl],\n                },\n                coin: config.nativeCurrency.symbol,\n                mainnet: true,\n                diamondAddress: \"0x0000000000000000000000000000000000000000\",\n            })) as ExtendedChain[],\n        });\n    }\n\n    async swap(params: SwapParams): Promise<Transaction> {\n        const walletClient = this.walletProvider.getWalletClient();\n        const [fromAddress] = await walletClient.getAddresses();\n\n        const routes = await getRoutes({\n            fromChainId: getChainConfigs(this.walletProvider.runtime)[\n                params.chain\n            ].chainId as ChainId,\n            toChainId: getChainConfigs(this.walletProvider.runtime)[\n                params.chain\n            ].chainId as ChainId,\n            fromTokenAddress: params.fromToken,\n            toTokenAddress: params.toToken,\n            fromAmount: params.amount,\n            fromAddress: fromAddress,\n            options: {\n                slippage: params.slippage || 0.5,\n                order: \"RECOMMENDED\",\n            },\n        });\n\n        if (!routes.routes.length) throw new Error(\"No routes found\");\n\n        const execution = await executeRoute(routes.routes[0], this.config);\n        const process = execution.steps[0]?.execution?.process[0];\n\n        if (!process?.status || process.status === \"FAILED\") {\n            throw new Error(\"Transaction failed\");\n        }\n\n        return {\n            hash: process.txHash as `0x${string}`,\n            from: fromAddress,\n            to: routes.routes[0].steps[0].estimate\n                .approvalAddress as `0x${string}`,\n            value: BigInt(params.amount),\n            data: process.data as `0x${string}`,\n            chainId: getChainConfigs(this.walletProvider.runtime)[params.chain]\n                .chainId,\n        };\n    }\n}\n\nexport const swapAction = {\n    name: \"swap\",\n    description: \"Swap tokens on the same chain\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: any,\n        callback?: any\n    ) => {\n        try {\n            const walletProvider = new WalletProvider(runtime);\n            const action = new SwapAction(walletProvider);\n            return await action.swap(options);\n        } catch (error) {\n            console.error(\"Error in swap handler:\", error.message);\n            if (callback) {\n                callback({ text: `Error: ${error.message}` });\n            }\n            return false;\n        }\n    },\n    template: swapTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"user\",\n                content: {\n                    text: \"Swap 1 ETH for USDC on Base\",\n                    action: \"TOKEN_SWAP\",\n                },\n            },\n        ],\n    ],\n    similes: [\"TOKEN_SWAP\", \"EXCHANGE_TOKENS\", \"TRADE_TOKENS\"],\n}; // TODO: add more examples\n","import { ByteArray, parseEther, type Hex } from \"viem\";\nimport { WalletProvider } from \"../providers/wallet\";\nimport type { Transaction, TransferParams } from \"../types\";\nimport { transferTemplate } from \"../templates\";\nimport type { IAgentRuntime, Memory, State } from \"@ai16z/eliza\";\n\nexport { transferTemplate };\nexport class TransferAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async transfer(\n        runtime: IAgentRuntime,\n        params: TransferParams\n    ): Promise<Transaction> {\n        const walletClient = this.walletProvider.getWalletClient();\n        const [fromAddress] = await walletClient.getAddresses();\n\n        await this.walletProvider.switchChain(runtime, params.fromChain);\n\n        try {\n            const hash = await walletClient.sendTransaction({\n                account: fromAddress,\n                to: params.toAddress,\n                value: parseEther(params.amount),\n                data: params.data as Hex,\n                kzg: {\n                    blobToKzgCommitment: function (blob: ByteArray): ByteArray {\n                        throw new Error(\"Function not implemented.\");\n                    },\n                    computeBlobKzgProof: function (\n                        blob: ByteArray,\n                        commitment: ByteArray\n                    ): ByteArray {\n                        throw new Error(\"Function not implemented.\");\n                    },\n                },\n                chain: undefined,\n            });\n\n            return {\n                hash,\n                from: fromAddress,\n                to: params.toAddress,\n                value: parseEther(params.amount),\n                data: params.data as Hex,\n            };\n        } catch (error) {\n            throw new Error(`Transfer failed: ${error.message}`);\n        }\n    }\n}\n\nexport const transferAction = {\n    name: \"transfer\",\n    description: \"Transfer tokens between addresses on the same chain\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: any\n    ) => {\n        const walletProvider = new WalletProvider(runtime);\n        const action = new TransferAction(walletProvider);\n        return action.transfer(runtime, options);\n    },\n    template: transferTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"assistant\",\n                content: {\n                    text: \"I'll help you transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    action: \"SEND_TOKENS\",\n                },\n            },\n            {\n                user: \"user\",\n                content: {\n                    text: \"Transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    action: \"SEND_TOKENS\",\n                },\n            },\n        ],\n    ],\n    similes: [\"SEND_TOKENS\", \"TOKEN_TRANSFER\", \"MOVE_TOKENS\"],\n};\n","export * from \"./actions/bridge\";\nexport * from \"./actions/swap\";\nexport * from \"./actions/transfer\";\nexport * from \"./providers/wallet\";\nexport * from \"./types\";\n\nimport type { Plugin } from \"@ai16z/eliza\";\nimport { bridgeAction } from \"./actions/bridge\";\nimport { swapAction } from \"./actions/swap\";\nimport { transferAction } from \"./actions/transfer\";\nimport { evmWalletProvider } from \"./providers/wallet\";\n\nexport const evmPlugin: Plugin = {\n    name: \"evm\",\n    description: \"EVM blockchain integration plugin\",\n    providers: [evmWalletProvider],\n    evaluators: [],\n    services: [],\n    actions: [transferAction, bridgeAction, swapAction],\n};\n\nexport default evmPlugin;\n"],"mappings":"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","names":["createConfig","executeRoute","getRoutes","createConfig","getRoutes","executeRoute"]}