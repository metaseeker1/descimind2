{"version":3,"sources":["../src/actions.ts","../src/index.ts","../src/provider.ts"],"sourcesContent":["import {\n    type WalletClient,\n    type Plugin,\n    getDeferredTools,\n    addParametersToDescription,\n    type ChainForWalletClient,\n    type DeferredTool,\n} from \"@goat-sdk/core\";\nimport {\n    type Action,\n    generateText,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    composeContext,\n    generateObjectV2,\n} from \"@ai16z/eliza\";\n\ntype GetOnChainActionsParams<TWalletClient extends WalletClient> = {\n    chain: ChainForWalletClient<TWalletClient>;\n    getWalletClient: (runtime: IAgentRuntime) => Promise<TWalletClient>;\n    plugins: Plugin<TWalletClient>[];\n    supportsSmartWallets?: boolean;\n};\n\n/**\n * Get all the on chain actions for the given wallet client and plugins\n *\n * @param params\n * @returns\n */\nexport async function getOnChainActions<TWalletClient extends WalletClient>({\n    getWalletClient,\n    plugins,\n    chain,\n    supportsSmartWallets,\n}: GetOnChainActionsParams<TWalletClient>): Promise<Action[]> {\n    const tools = await getDeferredTools<TWalletClient>({\n        plugins,\n        wordForTool: \"action\",\n        chain,\n        supportsSmartWallets,\n    });\n\n    return tools\n        .map((action) => ({\n            ...action,\n            name: action.name.toUpperCase(),\n        }))\n        .map((tool) => createAction(tool, getWalletClient));\n}\n\nfunction createAction<TWalletClient extends WalletClient>(\n    tool: DeferredTool<TWalletClient>,\n    getWalletClient: (runtime: IAgentRuntime) => Promise<TWalletClient>\n): Action {\n    return {\n        name: tool.name,\n        similes: [],\n        description: tool.description,\n        validate: async () => true,\n        handler: async (\n            runtime: IAgentRuntime,\n            message: Memory,\n            state: State | undefined,\n            options?: Record<string, unknown>,\n            callback?: HandlerCallback\n        ): Promise<boolean> => {\n            try {\n                const walletClient = await getWalletClient(runtime);\n                let currentState =\n                    state ?? (await runtime.composeState(message));\n                currentState =\n                    await runtime.updateRecentMessageState(currentState);\n\n                const parameterContext = composeParameterContext(\n                    tool,\n                    currentState\n                );\n                const parameters = await generateParameters(\n                    runtime,\n                    parameterContext,\n                    tool\n                );\n\n                const parsedParameters = tool.parameters.safeParse(parameters);\n                if (!parsedParameters.success) {\n                    callback?.({\n                        text: `Invalid parameters for action ${tool.name}: ${parsedParameters.error.message}`,\n                        content: { error: parsedParameters.error.message },\n                    });\n                    return false;\n                }\n\n                const result = await tool.method(\n                    walletClient,\n                    parsedParameters.data\n                );\n                const responseContext = composeResponseContext(\n                    tool,\n                    result,\n                    currentState\n                );\n                const response = await generateResponse(\n                    runtime,\n                    responseContext\n                );\n\n                callback?.({ text: response, content: result });\n                return true;\n            } catch (error) {\n                const errorMessage =\n                    error instanceof Error ? error.message : String(error);\n                callback?.({\n                    text: `Error executing action ${tool.name}: ${errorMessage}`,\n                    content: { error: errorMessage },\n                });\n                return false;\n            }\n        },\n        examples: [],\n    };\n}\n\nfunction composeParameterContext<TWalletClient extends WalletClient>(\n    tool: DeferredTool<TWalletClient>,\n    state: State\n): string {\n    const contextTemplate = `{{recentMessages}}\n\nGiven the recent messages, extract the following information for the action \"${tool.name}\":\n${addParametersToDescription(\"\", tool.parameters)}\n`;\n    return composeContext({ state, template: contextTemplate });\n}\n\nasync function generateParameters<TWalletClient extends WalletClient>(\n    runtime: IAgentRuntime,\n    context: string,\n    tool: DeferredTool<TWalletClient>\n): Promise<unknown> {\n    const { object } = await generateObjectV2({\n        runtime,\n        context,\n        modelClass: ModelClass.LARGE,\n        schema: tool.parameters,\n    });\n\n    return object;\n}\n\nfunction composeResponseContext<TWalletClient extends WalletClient>(\n    tool: DeferredTool<TWalletClient>,\n    result: unknown,\n    state: State\n): string {\n    const responseTemplate = `\n    # Action Examples\n{{actionExamples}}\n(Action examples are for reference only. Do not use the information from them in your response.)\n\n# Knowledge\n{{knowledge}}\n\n# Task: Generate dialog and actions for the character {{agentName}}.\nAbout {{agentName}}:\n{{bio}}\n{{lore}}\n\n{{providers}}\n\n{{attachments}}\n\n# Capabilities\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the \"Attachments\" section.\n\nThe action \"${tool.name}\" was executed successfully.\nHere is the result:\n${JSON.stringify(result)}\n\n{{actions}}\n\nRespond to the message knowing that the action was successful and these were the previous messages:\n{{recentMessages}}\n  `;\n    return composeContext({ state, template: responseTemplate });\n}\n\nasync function generateResponse(\n    runtime: IAgentRuntime,\n    context: string\n): Promise<string> {\n    return generateText({\n        runtime,\n        context,\n        modelClass: ModelClass.LARGE,\n    });\n}\n","import type { Plugin } from '@ai16z/eliza'\nimport { getOnChainActions } from './actions';\nimport { erc20, USDC } from '@goat-sdk/plugin-erc20';\nimport { chain, getWalletClient, walletProvider } from './provider';\nimport { sendETH } from '@goat-sdk/core';\n\nexport const goatPlugin: Plugin = {\n    name: \"[GOAT] Onchain Actions\",\n    description: \"Base integration plugin\",\n    providers: [walletProvider],\n    evaluators: [],\n    services: [],\n    actions: [\n        ...(await getOnChainActions({\n            getWalletClient,\n            // Add plugins here based on what actions you want to use\n            // See all available plugins at https://ohmygoat.dev/chains-wallets-plugins#plugins\n            plugins: [sendETH(), erc20({ tokens: [USDC] })],\n            chain: {\n                type: \"evm\",\n                id: chain.id,\n            },\n        })),\n    ],\n};\n\nexport default goatPlugin\n","import { createWalletClient, http } from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { base } from \"viem/chains\";\n\nimport { Memory, Provider, State, type IAgentRuntime } from \"@ai16z/eliza\";\nimport { viem } from \"@goat-sdk/wallet-viem\";\n\n\n// Add the chain you want to use, remember to update also\n// the EVM_PROVIDER_URL to the correct one for the chain\nexport const chain = base;\n\n/**\n * Create a wallet client for the given runtime.\n *\n * You can change it to use a different wallet client such as Crossmint smart wallets or others.\n *\n * See all available wallet clients at https://ohmygoat.dev/wallets\n *\n * @param runtime\n * @returns Wallet client\n */\nexport async function getWalletClient(runtime: IAgentRuntime) {\n    const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\n    if (!privateKey) throw new Error(\"EVM_PRIVATE_KEY not configured\");\n\n    const provider = runtime.getSetting(\"EVM_PROVIDER_URL\");\n    if (!provider) throw new Error(\"EVM_PROVIDER_URL not configured\");\n\n    const walletClient = createWalletClient({\n        account: privateKeyToAccount(privateKey as `0x${string}`),\n        chain: chain,\n        transport: http(provider),\n    });\n    return viem(walletClient);\n}\n\nexport const walletProvider: Provider = {\n    async get(\n        runtime: IAgentRuntime,\n        message: Memory,\n        state?: State\n    ): Promise<string | null> {\n        try {\n            const walletClient = await getWalletClient(runtime);\n            const address = walletClient.getAddress();\n            const balance = await walletClient.balanceOf(address);\n            return `EVM Wallet Address: ${address}\\nBalance: ${balance} ETH`;\n        } catch (error) {\n            console.error(\"Error in EVM wallet provider:\", error);\n            return null;\n        }\n    },\n};\n"],"mappings":"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","names":["getWalletClient","chain"]}