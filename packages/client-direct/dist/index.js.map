{"version":3,"sources":["../src/index.ts","../src/api.ts"],"sourcesContent":["import bodyParser from \"body-parser\";\nimport cors from \"cors\";\nimport express, { Request as ExpressRequest } from \"express\";\nimport multer, { File } from \"multer\";\nimport { elizaLogger, generateCaption, generateImage } from \"@ai16z/eliza\";\nimport { composeContext } from \"@ai16z/eliza\";\nimport { generateMessageResponse } from \"@ai16z/eliza\";\nimport { messageCompletionFooter } from \"@ai16z/eliza\";\nimport { AgentRuntime } from \"@ai16z/eliza\";\nimport {\n    Content,\n    Memory,\n    ModelClass,\n    Client,\n    IAgentRuntime,\n} from \"@ai16z/eliza\";\nimport { stringToUuid } from \"@ai16z/eliza\";\nimport { settings } from \"@ai16z/eliza\";\nimport { createApiRouter } from \"./api.ts\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nconst upload = multer({ storage: multer.memoryStorage() });\n\nexport const messageHandlerTemplate =\n    // {{goals}}\n    `# Action Examples\n{{actionExamples}}\n(Action examples are for reference only. Do not use the information from them in your response.)\n\n# Knowledge\n{{knowledge}}\n\n# Task: Generate dialog and actions for the character {{agentName}}.\nAbout {{agentName}}:\n{{bio}}\n{{lore}}\n\n{{providers}}\n\n{{attachments}}\n\n# Capabilities\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the \"Attachments\" section.\n\n{{messageDirections}}\n\n{{recentMessages}}\n\n{{actions}}\n\n# Instructions: Write the next message for {{agentName}}.\n` + messageCompletionFooter;\n\nexport interface SimliClientConfig {\n    apiKey: string;\n    faceID: string;\n    handleSilence: boolean;\n    videoRef: any;\n    audioRef: any;\n}\nexport class DirectClient {\n    public app: express.Application;\n    private agents: Map<string, AgentRuntime>;\n    private server: any; // Store server instance\n\n    constructor() {\n        elizaLogger.log(\"DirectClient constructor\");\n        this.app = express();\n        this.app.use(cors());\n        this.agents = new Map();\n\n        this.app.use(bodyParser.json());\n        this.app.use(bodyParser.urlencoded({ extended: true }));\n\n        const apiRouter = createApiRouter(this.agents);\n        this.app.use(apiRouter);\n\n        // Define an interface that extends the Express Request interface\n        interface CustomRequest extends ExpressRequest {\n            file: File;\n        }\n\n        // Update the route handler to use CustomRequest instead of express.Request\n        this.app.post(\n            \"/:agentId/whisper\",\n            upload.single(\"file\"),\n            async (req: CustomRequest, res: express.Response) => {\n                const audioFile = req.file; // Access the uploaded file using req.file\n                const agentId = req.params.agentId;\n\n                if (!audioFile) {\n                    res.status(400).send(\"No audio file provided\");\n                    return;\n                }\n\n                let runtime = this.agents.get(agentId);\n\n                // if runtime is null, look for runtime with the same name\n                if (!runtime) {\n                    runtime = Array.from(this.agents.values()).find(\n                        (a) =>\n                            a.character.name.toLowerCase() ===\n                            agentId.toLowerCase()\n                    );\n                }\n\n                if (!runtime) {\n                    res.status(404).send(\"Agent not found\");\n                    return;\n                }\n\n                const formData = new FormData();\n                const audioBlob = new Blob([audioFile.buffer], {\n                    type: audioFile.mimetype,\n                });\n                formData.append(\"file\", audioBlob, audioFile.originalname);\n                formData.append(\"model\", \"whisper-1\");\n\n                const response = await fetch(\n                    \"https://api.openai.com/v1/audio/transcriptions\",\n                    {\n                        method: \"POST\",\n                        headers: {\n                            Authorization: `Bearer ${runtime.token}`,\n                        },\n                        body: formData,\n                    }\n                );\n\n                const data = await response.json();\n                res.json(data);\n            }\n        );\n\n        this.app.post(\n            \"/:agentId/message\",\n            async (req: express.Request, res: express.Response) => {\n                const agentId = req.params.agentId;\n                const roomId = stringToUuid(\n                    req.body.roomId ?? \"default-room-\" + agentId\n                );\n                const userId = stringToUuid(req.body.userId ?? \"user\");\n\n                let runtime = this.agents.get(agentId);\n\n                // if runtime is null, look for runtime with the same name\n                if (!runtime) {\n                    runtime = Array.from(this.agents.values()).find(\n                        (a) =>\n                            a.character.name.toLowerCase() ===\n                            agentId.toLowerCase()\n                    );\n                }\n\n                if (!runtime) {\n                    res.status(404).send(\"Agent not found\");\n                    return;\n                }\n\n                await runtime.ensureConnection(\n                    userId,\n                    roomId,\n                    req.body.userName,\n                    req.body.name,\n                    \"direct\"\n                );\n\n                const text = req.body.text;\n                const messageId = stringToUuid(Date.now().toString());\n\n                const content: Content = {\n                    text,\n                    attachments: [],\n                    source: \"direct\",\n                    inReplyTo: undefined,\n                };\n\n                const userMessage = {\n                    content,\n                    userId,\n                    roomId,\n                    agentId: runtime.agentId,\n                };\n\n                const memory: Memory = {\n                    id: messageId,\n                    agentId: runtime.agentId,\n                    userId,\n                    roomId,\n                    content,\n                    createdAt: Date.now(),\n                };\n\n                await runtime.messageManager.createMemory(memory);\n\n                const state = await runtime.composeState(userMessage, {\n                    agentName: runtime.character.name,\n                });\n\n                const context = composeContext({\n                    state,\n                    template: messageHandlerTemplate,\n                });\n\n                const response = await generateMessageResponse({\n                    runtime: runtime,\n                    context,\n                    modelClass: ModelClass.SMALL,\n                });\n\n                // save response to memory\n                const responseMessage = {\n                    ...userMessage,\n                    userId: runtime.agentId,\n                    content: response,\n                };\n\n                await runtime.messageManager.createMemory(responseMessage);\n\n                if (!response) {\n                    res.status(500).send(\n                        \"No response from generateMessageResponse\"\n                    );\n                    return;\n                }\n\n                let message = null as Content | null;\n\n                await runtime.evaluate(memory, state);\n\n                const _result = await runtime.processActions(\n                    memory,\n                    [responseMessage],\n                    state,\n                    async (newMessages) => {\n                        message = newMessages;\n                        return [memory];\n                    }\n                );\n\n                if (message) {\n                    res.json([response, message]);\n                } else {\n                    res.json([response]);\n                }\n            }\n        );\n\n        this.app.post(\n            \"/:agentId/image\",\n            async (req: express.Request, res: express.Response) => {\n                const agentId = req.params.agentId;\n                const agent = this.agents.get(agentId);\n                if (!agent) {\n                    res.status(404).send(\"Agent not found\");\n                    return;\n                }\n\n                const images = await generateImage({ ...req.body }, agent);\n                const imagesRes: { image: string; caption: string }[] = [];\n                if (images.data && images.data.length > 0) {\n                    for (let i = 0; i < images.data.length; i++) {\n                        const caption = await generateCaption(\n                            { imageUrl: images.data[i] },\n                            agent\n                        );\n                        imagesRes.push({\n                            image: images.data[i],\n                            caption: caption.title,\n                        });\n                    }\n                }\n                res.json({ images: imagesRes });\n            }\n        );\n\n        this.app.post(\n            \"/fine-tune\",\n            async (req: express.Request, res: express.Response) => {\n                try {\n                    const response = await fetch(\n                        \"https://api.bageldb.ai/api/v1/asset\",\n                        {\n                            method: \"POST\",\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                                \"X-API-KEY\": `${process.env.BAGEL_API_KEY}`,\n                            },\n                            body: JSON.stringify(req.body),\n                        }\n                    );\n\n                    const data = await response.json();\n                    res.json(data);\n                } catch (error) {\n                    res.status(500).json({\n                        error: \"Please create an account at bakery.bagel.net and get an API key. Then set the BAGEL_API_KEY environment variable.\",\n                        details: error.message,\n                    });\n                }\n            }\n        );\n        this.app.get(\n            \"/fine-tune/:assetId\",\n            async (req: express.Request, res: express.Response) => {\n                const assetId = req.params.assetId;\n                const downloadDir = path.join(\n                    process.cwd(),\n                    \"downloads\",\n                    assetId\n                );\n\n                console.log(\"Download directory:\", downloadDir);\n\n                try {\n                    console.log(\"Creating directory...\");\n                    await fs.promises.mkdir(downloadDir, { recursive: true });\n\n                    console.log(\"Fetching file...\");\n                    const fileResponse = await fetch(\n                        `https://api.bageldb.ai/api/v1/asset/${assetId}/download`,\n                        {\n                            headers: {\n                                \"X-API-KEY\": `${process.env.BAGEL_API_KEY}`,\n                            },\n                        }\n                    );\n\n                    if (!fileResponse.ok) {\n                        throw new Error(\n                            `API responded with status ${fileResponse.status}: ${await fileResponse.text()}`\n                        );\n                    }\n\n                    console.log(\"Response headers:\", fileResponse.headers);\n\n                    const fileName =\n                        fileResponse.headers\n                            .get(\"content-disposition\")\n                            ?.split(\"filename=\")[1]\n                            ?.replace(/\"/g, \"\") || \"default_name.txt\";\n\n                    console.log(\"Saving as:\", fileName);\n\n                    const arrayBuffer = await fileResponse.arrayBuffer();\n                    const buffer = Buffer.from(arrayBuffer);\n\n                    const filePath = path.join(downloadDir, fileName);\n                    console.log(\"Full file path:\", filePath);\n\n                    await fs.promises.writeFile(filePath, buffer);\n\n                    // Verify file was written\n                    const stats = await fs.promises.stat(filePath);\n                    console.log(\n                        \"File written successfully. Size:\",\n                        stats.size,\n                        \"bytes\"\n                    );\n\n                    res.json({\n                        success: true,\n                        message: \"Single file downloaded successfully\",\n                        downloadPath: downloadDir,\n                        fileCount: 1,\n                        fileName: fileName,\n                        fileSize: stats.size,\n                    });\n                } catch (error) {\n                    console.error(\"Detailed error:\", error);\n                    res.status(500).json({\n                        error: \"Failed to download files from BagelDB\",\n                        details: error.message,\n                        stack: error.stack,\n                    });\n                }\n            }\n        );\n    }\n\n    public registerAgent(runtime: AgentRuntime) {\n        this.agents.set(runtime.agentId, runtime);\n    }\n\n    public unregisterAgent(runtime: AgentRuntime) {\n        this.agents.delete(runtime.agentId);\n    }\n\n    public start(port: number) {\n        this.server = this.app.listen(port, () => {\n            elizaLogger.success(`Server running at http://localhost:${port}/`);\n        });\n\n        // Handle graceful shutdown\n        const gracefulShutdown = () => {\n            elizaLogger.log(\"Received shutdown signal, closing server...\");\n            this.server.close(() => {\n                elizaLogger.success(\"Server closed successfully\");\n                process.exit(0);\n            });\n\n            // Force close after 5 seconds if server hasn't closed\n            setTimeout(() => {\n                elizaLogger.error(\n                    \"Could not close connections in time, forcefully shutting down\"\n                );\n                process.exit(1);\n            }, 5000);\n        };\n\n        // Handle different shutdown signals\n        process.on(\"SIGTERM\", gracefulShutdown);\n        process.on(\"SIGINT\", gracefulShutdown);\n    }\n\n    public stop() {\n        if (this.server) {\n            this.server.close(() => {\n                elizaLogger.success(\"Server stopped\");\n            });\n        }\n    }\n}\n\nexport const DirectClientInterface: Client = {\n    start: async (_runtime: IAgentRuntime) => {\n        elizaLogger.log(\"DirectClientInterface start\");\n        const client = new DirectClient();\n        const serverPort = parseInt(settings.SERVER_PORT || \"3000\");\n        client.start(serverPort);\n        return client;\n    },\n    stop: async (_runtime: IAgentRuntime, client?: any) => {\n        if (client instanceof DirectClient) {\n            client.stop();\n        }\n    },\n};\n\nexport default DirectClientInterface;\n","import express from \"express\";\nimport bodyParser from \"body-parser\";\nimport cors from \"cors\";\n\nimport { AgentRuntime } from \"@ai16z/eliza\";\n\nimport { REST, Routes } from \"discord.js\";\n\nexport function createApiRouter(agents: Map<string, AgentRuntime>) {\n    const router = express.Router();\n\n    router.use(cors());\n    router.use(bodyParser.json());\n    router.use(bodyParser.urlencoded({ extended: true }));\n\n    router.get(\"/hello\", (req, res) => {\n        res.json({ message: \"Hello World!\" });\n    });\n\n    router.get(\"/agents\", (req, res) => {\n        const agentsList = Array.from(agents.values()).map((agent) => ({\n            id: agent.agentId,\n            name: agent.character.name,\n        }));\n        res.json({ agents: agentsList });\n    });\n\n    router.get(\"/agents/:agentId\", (req, res) => {\n        const agentId = req.params.agentId;\n        const agent = agents.get(agentId);\n\n        if (!agent) {\n            res.status(404).json({ error: \"Agent not found\" });\n            return;\n        }\n\n        res.json({\n            id: agent.agentId,\n            character: agent.character,\n        });\n    });\n\n    router.get(\"/agents/:agentId/channels\", async (req, res) => {\n        const agentId = req.params.agentId;\n        const runtime = agents.get(agentId);\n\n        if (!runtime) {\n            res.status(404).json({ error: \"Runtime not found\" });\n            return;\n        }\n\n        const API_TOKEN = runtime.getSetting(\"DISCORD_API_TOKEN\") as string;\n        const rest = new REST({ version: \"10\" }).setToken(API_TOKEN);\n\n        try {\n            const guilds = (await rest.get(Routes.userGuilds())) as Array<any>;\n\n            res.json({\n                id: runtime.agentId,\n                guilds: guilds,\n                serverCount: guilds.length,\n            });\n        } catch (error) {\n            console.error(\"Error fetching guilds:\", error);\n            res.status(500).json({ error: \"Failed to fetch guilds\" });\n        }\n    });\n\n    return router;\n}\n"],"mappings":"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","names":["bodyParser","cors","express","express","cors","bodyParser"]}