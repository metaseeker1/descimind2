{"version":3,"sources":["../src/providers/remoteAttestationProvider.ts","../src/providers/deriveKeyProvider.ts","../src/index.ts"],"sourcesContent":["import { IAgentRuntime, Memory, Provider, State } from \"@ai16z/eliza\";\nimport { TappdClient } from \"@phala/dstack-sdk\";\n\nclass RemoteAttestationProvider {\n    private client: TappdClient;\n\n    constructor(endpoint?: string) {\n        this.client = endpoint ? new TappdClient(endpoint) : new TappdClient();\n    }\n\n    async generateAttestation(reportData: string): Promise<string> {\n        try {\n            console.log(\"Generating remote attestation...\");\n            const tdxQuote = await this.client.tdxQuote(reportData);\n            console.log(\"Remote attestation generated successfully!\");\n            return JSON.stringify(tdxQuote);\n        } catch (error) {\n            console.error(\"Error generating remote attestation:\", error);\n            return `Failed to generate TDX Quote: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n        }\n    }\n}\n\n// Keep the original provider for backwards compatibility\nconst remoteAttestationProvider: Provider = {\n    get: async (runtime: IAgentRuntime, _message: Memory, _state?: State) => {\n        const endpoint = runtime.getSetting(\"DSTACK_SIMULATOR_ENDPOINT\");\n        const provider = new RemoteAttestationProvider(endpoint);\n        const agentId = runtime.agentId;\n\n        try {\n            const attestation = await provider.generateAttestation(agentId);\n            return `Your Agent's remote attestation is: ${attestation}`;\n        } catch (error) {\n            console.error(\"Error in remote attestation provider:\", error);\n            return \"\";\n        }\n    },\n};\n\nexport { remoteAttestationProvider, RemoteAttestationProvider };\n","import { IAgentRuntime, Memory, Provider, State } from \"@ai16z/eliza\";\nimport { Keypair } from \"@solana/web3.js\";\nimport crypto from \"crypto\";\nimport { DeriveKeyResponse, TappdClient } from \"@phala/dstack-sdk\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { PrivateKeyAccount, keccak256 } from \"viem\";\n\nclass DeriveKeyProvider {\n    private client: TappdClient;\n\n    constructor(endpoint?: string) {\n        this.client = endpoint ? new TappdClient(endpoint) : new TappdClient();\n    }\n\n    async rawDeriveKey(\n        path: string,\n        subject: string\n    ): Promise<DeriveKeyResponse> {\n        try {\n            if (!path || !subject) {\n                console.error(\n                    \"Path and Subject are required for key derivation\"\n                );\n            }\n\n            console.log(\"Deriving Raw Key in TEE...\");\n            const derivedKey = await this.client.deriveKey(path, subject);\n\n            console.log(\"Raw Key Derived Successfully!\");\n            return derivedKey;\n        } catch (error) {\n            console.error(\"Error deriving raw key:\", error);\n            throw error;\n        }\n    }\n\n    async deriveEd25519Keypair(\n        path: string,\n        subject: string\n    ): Promise<Keypair> {\n        try {\n            if (!path || !subject) {\n                console.error(\n                    \"Path and Subject are required for key derivation\"\n                );\n            }\n\n            console.log(\"Deriving Key in TEE...\");\n            const derivedKey = await this.client.deriveKey(path, subject);\n            const uint8ArrayDerivedKey = derivedKey.asUint8Array();\n\n            const hash = crypto.createHash(\"sha256\");\n            hash.update(uint8ArrayDerivedKey);\n            const seed = hash.digest();\n            const seedArray = new Uint8Array(seed);\n            const keypair = Keypair.fromSeed(seedArray.slice(0, 32));\n\n            console.log(\"Key Derived Successfully!\");\n            return keypair;\n        } catch (error) {\n            console.error(\"Error deriving key:\", error);\n            throw error;\n        }\n    }\n\n    async deriveEcdsaKeypair(\n        path: string,\n        subject: string\n    ): Promise<PrivateKeyAccount> {\n        try {\n            if (!path || !subject) {\n                console.error(\n                    \"Path and Subject are required for key derivation\"\n                );\n            }\n\n            console.log(\"Deriving ECDSA Key in TEE...\");\n            const deriveKeyResponse: DeriveKeyResponse =\n                await this.client.deriveKey(path, subject);\n            const hex = keccak256(deriveKeyResponse.asUint8Array());\n            const keypair: PrivateKeyAccount = privateKeyToAccount(hex);\n            console.log(\"ECDSA Key Derived Successfully!\");\n            return keypair;\n        } catch (error) {\n            console.error(\"Error deriving ecdsa key:\", error);\n            throw error;\n        }\n    }\n}\n\nconst deriveKeyProvider: Provider = {\n    get: async (runtime: IAgentRuntime, _message?: Memory, _state?: State) => {\n        const endpoint = runtime.getSetting(\"DSTACK_SIMULATOR_ENDPOINT\");\n        const provider = new DeriveKeyProvider(endpoint);\n        try {\n            // Validate wallet configuration\n            if (!runtime.getSetting(\"WALLET_SECRET_SALT\")) {\n                console.error(\n                    \"Wallet secret salt is not configured in settings\"\n                );\n                return \"\";\n            }\n\n            let keypair: Keypair;\n            try {\n                const secretSalt =\n                    runtime.getSetting(\"WALLET_SECRET_SALT\") || \"secret_salt\";\n                const solanaKeypair = await provider.deriveEd25519Keypair(\n                    \"/\",\n                    secretSalt\n                );\n                const evmKeypair = await provider.deriveEcdsaKeypair(\n                    \"/\",\n                    secretSalt\n                );\n                return JSON.stringify({\n                    solana: solanaKeypair.publicKey,\n                    evm: evmKeypair.address,\n                });\n            } catch (error) {\n                console.error(\"Error creating PublicKey:\", error);\n                return \"\";\n            }\n\n            return keypair;\n        } catch (error) {\n            console.error(\"Error in derive key provider:\", error.message);\n            return `Failed to fetch derive key information: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n        }\n    },\n};\n\nexport { deriveKeyProvider, DeriveKeyProvider };\n","import { Plugin } from \"@ai16z/eliza\";\nimport { remoteAttestationProvider } from \"./providers/remoteAttestationProvider\";\nimport { deriveKeyProvider } from \"./providers/deriveKeyProvider\";\n\nexport const teePlugin: Plugin = {\n    name: \"tee\",\n    description:\n        \"TEE plugin with actions to generate remote attestations and derive keys\",\n    actions: [\n        /* custom actions */\n    ],\n    evaluators: [\n        /* custom evaluators */\n    ],\n    providers: [\n        /* custom providers */\n        remoteAttestationProvider,\n        deriveKeyProvider,\n    ],\n    services: [\n        /* custom services */\n    ],\n};\n"],"mappings":"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","names":["TappdClient"]}