import { Percent, Fraction } from '@uniswap/sdk-core';
import moment from 'moment';
import * as starknet from 'starknet';
import { constants, ProviderInterface, CallDetails, BlockNumber } from 'starknet';

declare const MAX_TEAM_ALLOCATION_HOLDERS_COUNT = 10;
declare const MAX_TEAM_ALLOCATION_TOTAL_SUPPLY_PERCENTAGE: Percent;
declare const DECIMALS = 18;
declare enum Entrypoint {
    CREATE_MEMECOIN = "create_memecoin",
    IS_MEMECOIN = "is_memecoin",
    AGGREGATE = "aggregate",
    NAME = "name",
    SYMBOL = "symbol",
    IS_LAUNCHED = "is_launched",
    GET_TEAM_ALLOCATION = "get_team_allocation",
    TOTAL_SUPPLY = "total_supply",
    OWNER = "owner",
    LOCKED_LIQUIDITY = "locked_liquidity",
    LAUNCH_ON_JEDISWAP = "launch_on_jediswap",
    LAUNCH_ON_EKUBO = "launch_on_ekubo",
    LAUNCH_ON_STARKDEFI = "launch_on_starkdefi",
    APPROVE = "approve",
    GET_REMAINING_TIME = "get_remaining_time",
    LAUNCHED_WITH_LIQUIDITY_PARAMETERS = "launched_with_liquidity_parameters",
    GET_LOCK_DETAILS = "get_lock_details",
    LAUNCHED_AT_BLOCK_NUMBER = "launched_at_block_number",
    GET_RESERVES = "get_reserves",
    LIQUIDITY_POSITION_DETAILS = "liquidity_position_details",
    WITHDRAW_FEES = "withdraw_fees",
    EXTEND_LOCK = "extend_lock",
    BALANCE_OF_CAMEL = "balanceOf",
    BALANCE_OF = "balance_of",
    TRANSFER = "transfer",
    GET_TOKEN_INFOS = "get_token_info"
}
declare enum LiquidityType {
    JEDISWAP_ERC20 = "JEDISWAP_ERC20",
    STARKDEFI_ERC20 = "STARKDEFI_ERC20",
    EKUBO_NFT = "EKUBO_NFT"
}
declare const MIN_STARTING_MCAP = 5000;
declare const RECOMMENDED_STARTING_MCAP = 10000;
declare const MIN_HODL_LIMIT: Percent;
declare const MAX_HODL_LIMIT: Percent;
declare const RECOMMENDED_HODL_LIMIT: Percent;
declare const TRANSFER_RESTRICTION_DELAY_STEP = 15;
declare const MIN_TRANSFER_RESTRICTION_DELAY = 30;
declare const MAX_TRANSFER_RESTRICTION_DELAY = 1440;
declare const LIQUIDITY_LOCK_PERIOD_STEP = 1;
declare const MIN_LIQUIDITY_LOCK_PERIOD = 6;
declare const MAX_LIQUIDITY_LOCK_PERIOD = 25;
declare const LIQUIDITY_LOCK_INCREASE_STEP = 1;
declare const MIN_LIQUIDITY_LOCK_INCREASE = 1;
declare const MAX_LIQUIDITY_LOCK_INCREASE = 25;
declare const LIQUIDITY_LOCK_FOREVER_TIMESTAMP = 9999999999;
declare const MIN_EKUBO_FEES: Percent;
declare const MAX_EKUBO_FEES: Percent;
declare const RECOMMENDED_EKUBO_FEES: Percent;
declare const EKUBO_TICK_SIZE = 1.000001;
declare const EKUBO_TICK_SPACING = 5982;
declare const EKUBO_TICK_SIZE_LOG: number;
declare const EKUBO_FEES_MULTIPLICATOR = "0x100000000000000000000000000000000";
declare const EKUBO_BOUND: number;

declare enum AMM {
    EKUBO = "Ekubo",
    JEDISWAP = "Jediswap",
    STARKDEFI = "StarkDeFi"
}
declare const AMMS: {
    Ekubo: {
        description: string;
        launchEntrypoint: Entrypoint;
    };
    Jediswap: {
        description: string;
        launchEntrypoint: Entrypoint;
    };
    StarkDeFi: {
        description: string;
        launchEntrypoint: Entrypoint;
    };
};

declare const TOKEN_CLASS_HASH: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};
declare const FACTORY_ADDRESSES: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};
declare const EKUBO_POSITIONS_ADDRESSES: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};
declare const ETH_ADDRESSES: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};
declare const STRK_ADDRESSES: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};
declare const USDC_ADDRESSES: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};
declare const MULTICALL_ADDRESSES: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};
declare const JEDISWAP_ETH_USDC: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};
declare const JEDISWAP_STRK_USDC: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};
declare const compiledMulticall: any;
declare const compiledJediswapPair: any;
declare const compiledEkuboPositions: any;

declare enum Safety {
    SAFE = 0,
    CORRECT = 1,
    DANGEROUS = 2,
    UNKNOWN = 3
}
declare const TEAM_ALLOCATION_SAFETY_BOUNDS: {
    0: Percent;
    1: Percent;
};
declare const LIQUIDITY_LOCK_SAFETY_BOUNDS: {
    0: moment.Duration;
    1: moment.Duration;
};
declare const STARTING_MCAP_SAFETY_BOUNDS: {
    0: {
        mcap: Fraction;
        teamAllocatoion: Fraction;
    };
    1: {
        mcap: Fraction;
        teamAllocatoion: Fraction;
    };
};

type USDCPair = {
    address: string;
    reversed: boolean;
};
type Token = {
    address: string;
    symbol: QUOTE_TOKEN_SYMBOL;
    name: string;
    decimals: number;
    camelCased?: boolean;
    usdcPair?: USDCPair;
};
type MultichainToken = {
    [chainId in constants.StarknetChainId]: Token;
};

declare enum QUOTE_TOKEN_SYMBOL {
    ETH = "ETH",
    STRK = "STRK",
    USDC = "USDC"
}
declare const Ether: MultichainToken;
declare const Stark: MultichainToken;
declare const USDCoin: MultichainToken;
declare const QUOTE_TOKENS: {
    [chainId in constants.StarknetChainId]: Record<string, Token>;
};
declare const DEFAULT_QUOTE_TOKEN_ADDRESSES: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};

type index_AMM = AMM;
declare const index_AMM: typeof AMM;
declare const index_AMMS: typeof AMMS;
declare const index_DECIMALS: typeof DECIMALS;
declare const index_DEFAULT_QUOTE_TOKEN_ADDRESSES: typeof DEFAULT_QUOTE_TOKEN_ADDRESSES;
declare const index_EKUBO_BOUND: typeof EKUBO_BOUND;
declare const index_EKUBO_FEES_MULTIPLICATOR: typeof EKUBO_FEES_MULTIPLICATOR;
declare const index_EKUBO_POSITIONS_ADDRESSES: typeof EKUBO_POSITIONS_ADDRESSES;
declare const index_EKUBO_TICK_SIZE: typeof EKUBO_TICK_SIZE;
declare const index_EKUBO_TICK_SIZE_LOG: typeof EKUBO_TICK_SIZE_LOG;
declare const index_EKUBO_TICK_SPACING: typeof EKUBO_TICK_SPACING;
declare const index_ETH_ADDRESSES: typeof ETH_ADDRESSES;
type index_Entrypoint = Entrypoint;
declare const index_Entrypoint: typeof Entrypoint;
declare const index_Ether: typeof Ether;
declare const index_FACTORY_ADDRESSES: typeof FACTORY_ADDRESSES;
declare const index_JEDISWAP_ETH_USDC: typeof JEDISWAP_ETH_USDC;
declare const index_JEDISWAP_STRK_USDC: typeof JEDISWAP_STRK_USDC;
declare const index_LIQUIDITY_LOCK_FOREVER_TIMESTAMP: typeof LIQUIDITY_LOCK_FOREVER_TIMESTAMP;
declare const index_LIQUIDITY_LOCK_INCREASE_STEP: typeof LIQUIDITY_LOCK_INCREASE_STEP;
declare const index_LIQUIDITY_LOCK_PERIOD_STEP: typeof LIQUIDITY_LOCK_PERIOD_STEP;
declare const index_LIQUIDITY_LOCK_SAFETY_BOUNDS: typeof LIQUIDITY_LOCK_SAFETY_BOUNDS;
type index_LiquidityType = LiquidityType;
declare const index_LiquidityType: typeof LiquidityType;
declare const index_MAX_EKUBO_FEES: typeof MAX_EKUBO_FEES;
declare const index_MAX_HODL_LIMIT: typeof MAX_HODL_LIMIT;
declare const index_MAX_LIQUIDITY_LOCK_INCREASE: typeof MAX_LIQUIDITY_LOCK_INCREASE;
declare const index_MAX_LIQUIDITY_LOCK_PERIOD: typeof MAX_LIQUIDITY_LOCK_PERIOD;
declare const index_MAX_TEAM_ALLOCATION_HOLDERS_COUNT: typeof MAX_TEAM_ALLOCATION_HOLDERS_COUNT;
declare const index_MAX_TEAM_ALLOCATION_TOTAL_SUPPLY_PERCENTAGE: typeof MAX_TEAM_ALLOCATION_TOTAL_SUPPLY_PERCENTAGE;
declare const index_MAX_TRANSFER_RESTRICTION_DELAY: typeof MAX_TRANSFER_RESTRICTION_DELAY;
declare const index_MIN_EKUBO_FEES: typeof MIN_EKUBO_FEES;
declare const index_MIN_HODL_LIMIT: typeof MIN_HODL_LIMIT;
declare const index_MIN_LIQUIDITY_LOCK_INCREASE: typeof MIN_LIQUIDITY_LOCK_INCREASE;
declare const index_MIN_LIQUIDITY_LOCK_PERIOD: typeof MIN_LIQUIDITY_LOCK_PERIOD;
declare const index_MIN_STARTING_MCAP: typeof MIN_STARTING_MCAP;
declare const index_MIN_TRANSFER_RESTRICTION_DELAY: typeof MIN_TRANSFER_RESTRICTION_DELAY;
declare const index_MULTICALL_ADDRESSES: typeof MULTICALL_ADDRESSES;
declare const index_QUOTE_TOKENS: typeof QUOTE_TOKENS;
type index_QUOTE_TOKEN_SYMBOL = QUOTE_TOKEN_SYMBOL;
declare const index_QUOTE_TOKEN_SYMBOL: typeof QUOTE_TOKEN_SYMBOL;
declare const index_RECOMMENDED_EKUBO_FEES: typeof RECOMMENDED_EKUBO_FEES;
declare const index_RECOMMENDED_HODL_LIMIT: typeof RECOMMENDED_HODL_LIMIT;
declare const index_RECOMMENDED_STARTING_MCAP: typeof RECOMMENDED_STARTING_MCAP;
declare const index_STARTING_MCAP_SAFETY_BOUNDS: typeof STARTING_MCAP_SAFETY_BOUNDS;
declare const index_STRK_ADDRESSES: typeof STRK_ADDRESSES;
type index_Safety = Safety;
declare const index_Safety: typeof Safety;
declare const index_Stark: typeof Stark;
declare const index_TEAM_ALLOCATION_SAFETY_BOUNDS: typeof TEAM_ALLOCATION_SAFETY_BOUNDS;
declare const index_TOKEN_CLASS_HASH: typeof TOKEN_CLASS_HASH;
declare const index_TRANSFER_RESTRICTION_DELAY_STEP: typeof TRANSFER_RESTRICTION_DELAY_STEP;
declare const index_USDC_ADDRESSES: typeof USDC_ADDRESSES;
declare const index_USDCoin: typeof USDCoin;
declare const index_compiledEkuboPositions: typeof compiledEkuboPositions;
declare const index_compiledJediswapPair: typeof compiledJediswapPair;
declare const index_compiledMulticall: typeof compiledMulticall;
declare namespace index {
  export { index_AMM as AMM, index_AMMS as AMMS, index_DECIMALS as DECIMALS, index_DEFAULT_QUOTE_TOKEN_ADDRESSES as DEFAULT_QUOTE_TOKEN_ADDRESSES, index_EKUBO_BOUND as EKUBO_BOUND, index_EKUBO_FEES_MULTIPLICATOR as EKUBO_FEES_MULTIPLICATOR, index_EKUBO_POSITIONS_ADDRESSES as EKUBO_POSITIONS_ADDRESSES, index_EKUBO_TICK_SIZE as EKUBO_TICK_SIZE, index_EKUBO_TICK_SIZE_LOG as EKUBO_TICK_SIZE_LOG, index_EKUBO_TICK_SPACING as EKUBO_TICK_SPACING, index_ETH_ADDRESSES as ETH_ADDRESSES, index_Entrypoint as Entrypoint, index_Ether as Ether, index_FACTORY_ADDRESSES as FACTORY_ADDRESSES, index_JEDISWAP_ETH_USDC as JEDISWAP_ETH_USDC, index_JEDISWAP_STRK_USDC as JEDISWAP_STRK_USDC, index_LIQUIDITY_LOCK_FOREVER_TIMESTAMP as LIQUIDITY_LOCK_FOREVER_TIMESTAMP, index_LIQUIDITY_LOCK_INCREASE_STEP as LIQUIDITY_LOCK_INCREASE_STEP, index_LIQUIDITY_LOCK_PERIOD_STEP as LIQUIDITY_LOCK_PERIOD_STEP, index_LIQUIDITY_LOCK_SAFETY_BOUNDS as LIQUIDITY_LOCK_SAFETY_BOUNDS, index_LiquidityType as LiquidityType, index_MAX_EKUBO_FEES as MAX_EKUBO_FEES, index_MAX_HODL_LIMIT as MAX_HODL_LIMIT, index_MAX_LIQUIDITY_LOCK_INCREASE as MAX_LIQUIDITY_LOCK_INCREASE, index_MAX_LIQUIDITY_LOCK_PERIOD as MAX_LIQUIDITY_LOCK_PERIOD, index_MAX_TEAM_ALLOCATION_HOLDERS_COUNT as MAX_TEAM_ALLOCATION_HOLDERS_COUNT, index_MAX_TEAM_ALLOCATION_TOTAL_SUPPLY_PERCENTAGE as MAX_TEAM_ALLOCATION_TOTAL_SUPPLY_PERCENTAGE, index_MAX_TRANSFER_RESTRICTION_DELAY as MAX_TRANSFER_RESTRICTION_DELAY, index_MIN_EKUBO_FEES as MIN_EKUBO_FEES, index_MIN_HODL_LIMIT as MIN_HODL_LIMIT, index_MIN_LIQUIDITY_LOCK_INCREASE as MIN_LIQUIDITY_LOCK_INCREASE, index_MIN_LIQUIDITY_LOCK_PERIOD as MIN_LIQUIDITY_LOCK_PERIOD, index_MIN_STARTING_MCAP as MIN_STARTING_MCAP, index_MIN_TRANSFER_RESTRICTION_DELAY as MIN_TRANSFER_RESTRICTION_DELAY, index_MULTICALL_ADDRESSES as MULTICALL_ADDRESSES, index_QUOTE_TOKENS as QUOTE_TOKENS, index_QUOTE_TOKEN_SYMBOL as QUOTE_TOKEN_SYMBOL, index_RECOMMENDED_EKUBO_FEES as RECOMMENDED_EKUBO_FEES, index_RECOMMENDED_HODL_LIMIT as RECOMMENDED_HODL_LIMIT, index_RECOMMENDED_STARTING_MCAP as RECOMMENDED_STARTING_MCAP, index_STARTING_MCAP_SAFETY_BOUNDS as STARTING_MCAP_SAFETY_BOUNDS, index_STRK_ADDRESSES as STRK_ADDRESSES, index_Safety as Safety, index_Stark as Stark, index_TEAM_ALLOCATION_SAFETY_BOUNDS as TEAM_ALLOCATION_SAFETY_BOUNDS, index_TOKEN_CLASS_HASH as TOKEN_CLASS_HASH, index_TRANSFER_RESTRICTION_DELAY_STEP as TRANSFER_RESTRICTION_DELAY_STEP, index_USDC_ADDRESSES as USDC_ADDRESSES, index_USDCoin as USDCoin, index_compiledEkuboPositions as compiledEkuboPositions, index_compiledJediswapPair as compiledJediswapPair, index_compiledMulticall as compiledMulticall };
}

type i129 = {
    mag: string;
    sign: string;
};
type EkuboPoolKey = {
    token0: string;
    token1: string;
    fee: string;
    tickSpacing: string;
    extension: string;
};
type EkuboBounds = {
    lower: i129;
    upper: i129;
};
type BaseLiquidity = {
    type: LiquidityType;
    lockManager: string;
    unlockTime: number;
    owner: string;
    quoteToken: string;
};
type JediswapLiquidity = {
    type: LiquidityType.JEDISWAP_ERC20 | LiquidityType.STARKDEFI_ERC20;
    lockPosition: string;
    quoteAmount: string;
} & Omit<BaseLiquidity, 'type'>;
type EkuboLiquidity = {
    type: LiquidityType.EKUBO_NFT;
    ekuboId: string;
    startingTick: number;
    poolKey: EkuboPoolKey;
    bounds: EkuboBounds;
} & Omit<BaseLiquidity, 'type'>;
type LaunchedLiquidity = JediswapLiquidity | EkuboLiquidity;
type BaseMemecoin = {
    address: string;
    name: string;
    symbol: string;
    owner: string;
    decimals: number;
    totalSupply: string;
};
type LaunchedMemecoin = {
    isLaunched: false;
} | {
    isLaunched: true;
    quoteToken: Token | undefined;
    launch: {
        teamAllocation: string;
        blockNumber: number;
    };
    liquidity: LaunchedLiquidity;
};
type Memecoin = BaseMemecoin & LaunchedMemecoin;
type DeployData = {
    name: string;
    symbol: string;
    owner: string;
    initialSupply: string | string;
};
type MemecoinBaseLaunchData = {
    amm: AMM;
    teamAllocations: {
        address: string;
        amount: number | string;
    }[];
    holdLimit: Percent;
    /**
     * Anti bot period in *seconds*
     */
    antiBotPeriod: number;
    /**
     * Quote token
     */
    quoteToken: Token;
    /**
     * Starting market cap in USDC
     */
    startingMarketCap: number | string;
};
type EkuboLaunchData = MemecoinBaseLaunchData & {
    fees: Percent;
};
type StandardAMMLaunchData = MemecoinBaseLaunchData & {
    liquidityLockPeriod: number;
};

type FactoryConfig = {
    provider: ProviderInterface;
    chainId: constants.StarknetChainId;
};
declare abstract class FactoryInterface {
    abstract config: FactoryConfig;
    abstract getMemecoin(address: string): Promise<Memecoin | undefined>;
    abstract getBaseMemecoin(address: string): Promise<BaseMemecoin | undefined>;
    abstract getMemecoinLaunchData(address: string): Promise<LaunchedMemecoin>;
    abstract getEkuboFees(memecoin: Memecoin): Promise<Fraction | undefined>;
    abstract getCollectEkuboFeesCalldata(memecoin: Memecoin): {
        calls: CallDetails[];
    } | undefined;
    abstract getExtendLiquidityLockCalldata(memecoin: Memecoin, seconds: number): {
        calls: CallDetails[];
    } | undefined;
    abstract getDeployCalldata(data: DeployData): {
        tokenAddress: string;
        calls: CallDetails[];
    };
    abstract getEkuboLaunchCalldata(memecoin: Memecoin, data: EkuboLaunchData): Promise<{
        calls: CallDetails[];
    }>;
    abstract getStandardAMMLaunchCalldata(memecoin: Memecoin, data: StandardAMMLaunchData): Promise<{
        calls: CallDetails[];
    }>;
}

declare class Factory implements FactoryInterface {
    config: FactoryConfig;
    constructor(config: FactoryConfig);
    getMemecoin(address: string): Promise<Memecoin | undefined>;
    getBaseMemecoin(address: string): Promise<BaseMemecoin | undefined>;
    getMemecoinLaunchData(address: string): Promise<LaunchedMemecoin>;
    private getJediswapLiquidityLockPosition;
    private getEkuboLiquidityLockPosition;
    getEkuboFees(memecoin: Memecoin): Promise<Fraction | undefined>;
    getCollectEkuboFeesCalldata(memecoin: Memecoin): {
        calls: {
            contractAddress: string;
            entrypoint: Entrypoint;
            calldata: starknet.Calldata;
        }[];
    } | undefined;
    getExtendLiquidityLockCalldata(memecoin: Memecoin, seconds: number): {
        calls: {
            contractAddress: string;
            entrypoint: Entrypoint;
            calldata: starknet.Calldata;
        }[];
    } | undefined;
    getDeployCalldata(data: DeployData): {
        tokenAddress: string;
        calls: {
            contractAddress: string;
            entrypoint: Entrypoint;
            calldata: starknet.Calldata;
        }[];
    };
    getEkuboLaunchCalldata(memecoin: Memecoin, data: EkuboLaunchData): Promise<{
        calls: {
            contractAddress: string;
            entrypoint: Entrypoint;
            calldata: starknet.Calldata;
        }[];
    }>;
    getStandardAMMLaunchCalldata(memecoin: Memecoin, data: StandardAMMLaunchData): Promise<{
        calls: {
            contractAddress: string;
            entrypoint: Entrypoint;
            calldata: starknet.Calldata;
        }[];
    }>;
}

declare const getInitialPrice: (startingTick: number) => number;
declare const getStartingTick: (initialPrice: number) => number;

declare function getStartingMarketCap(memecoin: Memecoin, quoteTokenPriceAtLaunch?: Fraction): Fraction | undefined;

declare function getPairPrice(provider: ProviderInterface, pair?: USDCPair, blockNumber?: BlockNumber): Promise<Fraction>;

declare function getTeamAllocationSafety(teamAllocation: Percent): Safety.SAFE | Safety.CORRECT | Safety.DANGEROUS;
declare function getLiquidityLockSafety(liquidityLock: moment.Duration): Safety.SAFE | Safety.CORRECT | Safety.DANGEROUS;
declare function getQuoteTokenSafety(isUnknown: boolean): Safety.SAFE | Safety.DANGEROUS;
declare function getStartingMcapSafety(teamAllocation: Percent, startingMcap?: Fraction): Safety.SAFE | Safety.CORRECT | Safety.DANGEROUS;

export { type BaseMemecoin, type DeployData, type EkuboLaunchData, type EkuboLiquidity, Factory, type FactoryConfig, FactoryInterface, type JediswapLiquidity, type LaunchedMemecoin, type Memecoin, type MultichainToken, type StandardAMMLaunchData, type Token, type USDCPair, index as constants, getInitialPrice, getLiquidityLockSafety, getPairPrice, getQuoteTokenSafety, getStartingMarketCap, getStartingMcapSafety, getStartingTick, getTeamAllocationSafety };
