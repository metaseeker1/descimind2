{"version":3,"sources":["../node_modules/.pnpm/jsbi@3.2.5/node_modules/jsbi/lib/jsbi.ts","../node_modules/.pnpm/decimal.js-light@2.5.1/node_modules/decimal.js-light/decimal.js","../node_modules/.pnpm/big.js@5.2.2/node_modules/big.js/big.js","../node_modules/.pnpm/toformat@2.0.0/node_modules/toformat/toFormat.js","../node_modules/.pnpm/bn.js@5.2.1/node_modules/bn.js/lib/bn.js","../node_modules/.pnpm/js-sha3@0.8.0/node_modules/js-sha3/src/sha3.js","../node_modules/.pnpm/whatwg-fetch@3.6.20/node_modules/whatwg-fetch/fetch.js","../node_modules/.pnpm/isomorphic-fetch@3.0.0/node_modules/isomorphic-fetch/fetch-npm-browserify.js","../node_modules/.pnpm/url-join@4.0.1/node_modules/url-join/lib/url-join.js","../node_modules/.pnpm/moment@2.30.1/node_modules/moment/moment.js","../src/index.ts","../src/constants/index.ts","../node_modules/.pnpm/tiny-invariant@1.3.3/node_modules/tiny-invariant/dist/esm/tiny-invariant.js","../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts","../node_modules/.pnpm/@ethersproject+logger@5.7.0/node_modules/@ethersproject/logger/src.ts/_version.ts","../node_modules/.pnpm/@ethersproject+logger@5.7.0/node_modules/@ethersproject/logger/src.ts/index.ts","../node_modules/.pnpm/@ethersproject+bytes@5.7.0/node_modules/@ethersproject/bytes/src.ts/_version.ts","../node_modules/.pnpm/@ethersproject+bytes@5.7.0/node_modules/@ethersproject/bytes/src.ts/index.ts","../node_modules/.pnpm/@ethersproject+bignumber@5.7.0/node_modules/@ethersproject/bignumber/src.ts/_version.ts","../node_modules/.pnpm/@ethersproject+keccak256@5.7.0/node_modules/@ethersproject/keccak256/src.ts/index.ts","../node_modules/.pnpm/@ethersproject+address@5.7.0/node_modules/@ethersproject/address/src.ts/_version.ts","../node_modules/.pnpm/@ethersproject+address@5.7.0/node_modules/@ethersproject/address/src.ts/index.ts","../node_modules/.pnpm/@uniswap+sdk-core@4.2.1/node_modules/@uniswap/sdk-core/src/chains.ts","../node_modules/.pnpm/@uniswap+sdk-core@4.2.1/node_modules/@uniswap/sdk-core/src/addresses.ts","../node_modules/.pnpm/@uniswap+sdk-core@4.2.1/node_modules/@uniswap/sdk-core/src/constants.ts","../node_modules/.pnpm/@uniswap+sdk-core@4.2.1/node_modules/@uniswap/sdk-core/src/entities/fractions/fraction.ts","../node_modules/.pnpm/@uniswap+sdk-core@4.2.1/node_modules/@uniswap/sdk-core/src/entities/fractions/currencyAmount.ts","../node_modules/.pnpm/@uniswap+sdk-core@4.2.1/node_modules/@uniswap/sdk-core/src/entities/fractions/percent.ts","../node_modules/.pnpm/@uniswap+sdk-core@4.2.1/node_modules/@uniswap/sdk-core/src/entities/fractions/price.ts","../node_modules/.pnpm/@uniswap+sdk-core@4.2.1/node_modules/@uniswap/sdk-core/src/entities/baseCurrency.ts","../node_modules/.pnpm/@uniswap+sdk-core@4.2.1/node_modules/@uniswap/sdk-core/src/entities/nativeCurrency.ts","../node_modules/.pnpm/@uniswap+sdk-core@4.2.1/node_modules/@uniswap/sdk-core/src/utils/validateAndParseAddress.ts","../node_modules/.pnpm/@uniswap+sdk-core@4.2.1/node_modules/@uniswap/sdk-core/src/entities/token.ts","../node_modules/.pnpm/@uniswap+sdk-core@4.2.1/node_modules/@uniswap/sdk-core/src/entities/weth9.ts","../node_modules/.pnpm/@uniswap+sdk-core@4.2.1/node_modules/@uniswap/sdk-core/src/entities/ether.ts","../node_modules/.pnpm/@uniswap+sdk-core@4.2.1/node_modules/@uniswap/sdk-core/src/utils/computePriceImpact.ts","../node_modules/.pnpm/@uniswap+sdk-core@4.2.1/node_modules/@uniswap/sdk-core/src/utils/sortedInsert.ts","../node_modules/.pnpm/@uniswap+sdk-core@4.2.1/node_modules/@uniswap/sdk-core/src/utils/sqrt.ts","../src/utils/ekubo.ts","../src/constants/misc.ts","../src/constants/amms.ts","../node_modules/.pnpm/@scure+base@1.1.9/node_modules/@scure/base/index.ts","../node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/.pnpm/@scure+starknet@0.3.0/node_modules/@scure/starknet/lib/esm/index.js","../node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/src/_assert.ts","../node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/src/_u64.ts","../node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/src/utils.ts","../node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/src/sha3.ts","../node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/src/_sha2.ts","../node_modules/.pnpm/@noble+hashes@1.3.3/node_modules/@noble/hashes/src/sha256.ts","../node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/src/abstract/poseidon.ts","../node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/src/_assert.ts","../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/src/crypto.ts","../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/src/utils.ts","../node_modules/.pnpm/@noble+hashes@1.3.2/node_modules/@noble/hashes/src/hmac.ts","../node_modules/.pnpm/@noble+curves@1.2.0/node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/.pnpm/lossless-json@2.0.11/node_modules/lossless-json/src/utils.ts","../node_modules/.pnpm/lossless-json@2.0.11/node_modules/lossless-json/src/LosslessNumber.ts","../node_modules/.pnpm/lossless-json@2.0.11/node_modules/lossless-json/src/numberParsers.ts","../node_modules/.pnpm/lossless-json@2.0.11/node_modules/lossless-json/src/revive.ts","../node_modules/.pnpm/lossless-json@2.0.11/node_modules/lossless-json/src/parse.ts","../node_modules/.pnpm/lossless-json@2.0.11/node_modules/lossless-json/src/stringify.ts","../node_modules/.pnpm/pako@2.1.0/node_modules/pako/dist/pako.esm.mjs","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/constants.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/encode.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/types/index.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/types/account.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/types/calldata.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/types/lib/contract/index.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/types/lib/index.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/types/api/rpc.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/types/api/jsonrpc/index.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/types/api/rpcspec/errors.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/types/api/rpcspec/components.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/types/api/rpcspec/nonspec.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/types/api/sequencer.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/assert.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/num.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/selector.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/shortString.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/calldata/cairo.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/uint256.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/calldata/enum/CairoCustomEnum.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/calldata/enum/CairoOption.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/calldata/enum/CairoResult.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/calldata/formatter.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/calldata/parser/parser-0-1.1.0.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/calldata/parser/parser-2.0.0.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/calldata/parser/index.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/calldata/tuple.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/calldata/propertyOrder.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/calldata/requestParser.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/calldata/responseParser.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/calldata/validate.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/calldata/index.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/hash.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/ec.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/json.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/stark.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/contract.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/fetchPonyfill.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/provider.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/responseParser/rpc.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/provider/errors.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/starknetId.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/provider/starknetId.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/provider/utils.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/provider/rpc.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/provider/sequencer.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/responseParser/index.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/responseParser/sequencer.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/url.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/provider/default.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/signer/interface.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/transaction.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/typedData.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/merkle.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/signer/default.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/events.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/account/default.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/provider/interface.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/provider/index.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/account/interface.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/events/index.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/contract/default.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/contract/interface.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/contract/contractFactory.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/utils/address.ts","../node_modules/.pnpm/starknet@5.24.3/node_modules/starknet/src/index.ts","../src/abis/EkuboPositions.json","../src/abis/JediswapPair.json","../src/abis/Multicall.json","../src/constants/contracts.ts","../src/constants/safety.ts","../src/constants/tokens.ts","../src/utils/contract.ts","../src/utils/helpers.ts","../src/utils/price.ts","../src/factory/default.ts","../src/factory/interface.ts","../src/utils/marketCap.ts","../src/utils/safety.ts"],"sourcesContent":[null,"/*! decimal.js-light v2.5.1 https://github.com/MikeMcl/decimal.js-light/LICENCE */\r\n;(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*\r\n   *  decimal.js-light v2.5.1\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js-light\r\n   *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Expat Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  var MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    Decimal = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed during run-time using `Decimal.config`.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,\r\n      // `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -MAX_E\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to MAX_E\r\n\r\n      // The natural logarithm of 10.\r\n      // 115 digits\r\n      LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    exponentOutOfRange = decimalError + 'Exponent out of range: ',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    ONE,\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n    MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE),    // 1286742750677284\r\n\r\n    // Decimal.prototype object\r\n    P = {};\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue                       abs\r\n   *  comparedTo                          cmp\r\n   *  decimalPlaces                       dp\r\n   *  dividedBy                           div\r\n   *  dividedToIntegerBy                  idiv\r\n   *  equals                              eq\r\n   *  exponent\r\n   *  greaterThan                         gt\r\n   *  greaterThanOrEqualTo                gte\r\n   *  isInteger                           isint\r\n   *  isNegative                          isneg\r\n   *  isPositive                          ispos\r\n   *  isZero\r\n   *  lessThan                            lt\r\n   *  lessThanOrEqualTo                   lte\r\n   *  logarithm                           log\r\n   *  minus                               sub\r\n   *  modulo                              mod\r\n   *  naturalExponential                  exp\r\n   *  naturalLogarithm                    ln\r\n   *  negated                             neg\r\n   *  plus                                add\r\n   *  precision                           sd\r\n   *  squareRoot                          sqrt\r\n   *  times                               mul\r\n   *  toDecimalPlaces                     todp\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toInteger                           toint\r\n   *  toNumber\r\n   *  toPower                             pow\r\n   *  toPrecision\r\n   *  toSignificantDigits                 tosd\r\n   *  toString\r\n   *  valueOf                             val\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this;\r\n\r\n    y = new x.constructor(y);\r\n\r\n    // Signs differ?\r\n    if (x.s !== y.s) return x.s || -y.s;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ x.s < 0 ? 1 : -1;\r\n\r\n    xdL = x.d.length;\r\n    ydL = y.d.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (x.d[i] !== y.d[i]) return x.d[i] > y.d[i] ^ x.s < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ x.s < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var x = this,\r\n      w = x.d.length - 1,\r\n      dp = (w - x.e) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = x.d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) dp--;\r\n\r\n    return dp < 0 ? 0 : dp;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, truncated to `precision` significant digits.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return round(divide(x, new Ctor(y), 0, 1), Ctor.precision);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return !this.cmp(y);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).\r\n   *\r\n   */\r\n  P.exponent = function () {\r\n    return getBase10Exponent(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    return this.cmp(y) >= 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isint = function () {\r\n    return this.e > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isneg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.ispos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return this.s === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   * If no base is specified, return log[10](x).\r\n   *\r\n   * log[base](x) = ln(x) / ln(base)\r\n   *\r\n   * The maximum error of the result is 1 ulp (unit in the last place).\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var r,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      wpr = pr + 5;\r\n\r\n    // Default base is 10.\r\n    if (base === void 0) {\r\n      base = new Ctor(10);\r\n    } else {\r\n      base = new Ctor(base);\r\n\r\n      // log[-b](x) = NaN\r\n      // log[0](x)  = NaN\r\n      // log[1](x)  = NaN\r\n      if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN');\r\n    }\r\n\r\n    // log[b](-x) = NaN\r\n    // log[b](0) = -Infinity\r\n    if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n    // log[b](1) = 0\r\n    if (x.eq(ONE)) return new Ctor(0);\r\n\r\n    external = false;\r\n    r = divide(ln(x, wpr), ln(base, wpr), wpr);\r\n    external = true;\r\n\r\n    return round(r, pr);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var x = this;\r\n    y = new x.constructor(y);\r\n    return x.s == y.s ? subtract(x, y) : add(x, (y.s = -y.s, y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // x % 0 = NaN\r\n    if (!y.s) throw Error(decimalError + 'NaN');\r\n\r\n    // Return x if x is 0.\r\n    if (!x.s) return round(new Ctor(x), pr);\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n    q = divide(x, y, 0, 1).times(y);\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`\r\n   * significant digits.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return exp(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * truncated to `precision` significant digits.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return ln(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s || 0;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var x = this;\r\n    y = new x.constructor(y);\r\n    return x.s == y.s ? add(x, y) : subtract(x, (y.s = -y.s, y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var e, sd, w,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    e = getBase10Exponent(x) + 1;\r\n    w = x.d.length - 1;\r\n    sd = w * LOG_BASE + 1;\r\n    w = x.d[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) sd--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = x.d[0]; w >= 10; w /= 10) sd++;\r\n    }\r\n\r\n    return z && e > sd ? e : sd;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`\r\n   * significant digits.\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var e, n, pr, r, s, t, wpr,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative or zero?\r\n    if (x.s < 1) {\r\n      if (!x.s) return new Ctor(0);\r\n\r\n      // sqrt(-x) = NaN\r\n      throw Error(decimalError + 'NaN');\r\n    }\r\n\r\n    e = getBase10Exponent(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    pr = Ctor.precision;\r\n    s = wpr = pr + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, wpr + 2)).times(0.5);\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r.d)).slice(0, wpr)) {\r\n        n = n.slice(wpr - 3, wpr + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (s == wpr && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          round(t, pr + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        } else if (n != '9999') {\r\n          break;\r\n        }\r\n\r\n        wpr += 4;\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return round(r, pr);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    // Return 0 if either is 0.\r\n    if (!x.s || !y.s) return new Ctor(0);\r\n\r\n    y.s *= x.s;\r\n    e = x.e + y.e;\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = e;\r\n\r\n    return external ? round(y, Ctor.precision) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.todp = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return round(x, dp + getBase10Exponent(x) + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = toString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = round(new Ctor(x), dp + 1, rm);\r\n      str = toString(x, true, dp + 1);\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) return toString(x);\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = round(new Ctor(x), dp + getBase10Exponent(x) + 1, rm);\r\n    str = toString(y.abs(), false, dp + getBase10Exponent(y) + 1);\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isneg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.toInteger = P.toint = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return round(new Ctor(x), getBase10Exponent(x) + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,\r\n   * truncated to `precision` significant digits.\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * The maximum error is 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, sign, yIsInt,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      guard = 12,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // pow(x, 0) = 1\r\n    if (!y.s) return new Ctor(ONE);\r\n\r\n    x = new Ctor(x);\r\n\r\n    // pow(0, y > 0) = 0\r\n    // pow(0, y < 0) = Infinity\r\n    if (!x.s) {\r\n      if (y.s < 1) throw Error(decimalError + 'Infinity');\r\n      return x;\r\n    }\r\n\r\n    // pow(1, y) = 1\r\n    if (x.eq(ONE)) return x;\r\n\r\n    pr = Ctor.precision;\r\n\r\n    // pow(x, 1) = x\r\n    if (y.eq(ONE)) return round(x, pr);\r\n\r\n    e = y.e;\r\n    k = y.d.length - 1;\r\n    yIsInt = e >= k;\r\n    sign = x.s;\r\n\r\n    if (!yIsInt) {\r\n\r\n      // pow(x < 0, y non-integer) = NaN\r\n      if (sign < 0) throw Error(decimalError + 'NaN');\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = new Ctor(ONE);\r\n\r\n      // Max k of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      e = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n      external = false;\r\n\r\n      for (;;) {\r\n        if (k % 2) {\r\n          r = r.times(x);\r\n          truncate(r.d, e);\r\n        }\r\n\r\n        k = mathfloor(k / 2);\r\n        if (k === 0) break;\r\n\r\n        x = x.times(x);\r\n        truncate(x.d, e);\r\n      }\r\n\r\n      external = true;\r\n\r\n      return y.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);\r\n    }\r\n\r\n    // Result is negative if x is negative and the last digit of integer y is odd.\r\n    sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;\r\n\r\n    x.s = 1;\r\n    external = false;\r\n    r = y.times(ln(x, pr + guard));\r\n    external = true;\r\n    r = exp(r);\r\n    r.s = sign;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var e, str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      e = getBase10Exponent(x);\r\n      str = toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = round(new Ctor(x), sd, rm);\r\n      e = getBase10Exponent(x);\r\n      str = toString(x, sd <= e || e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.tosd = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return round(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = P.valueOf = P.val = P.toJSON = function () {\r\n    var x = this,\r\n      e = getBase10Exponent(x),\r\n      Ctor = x.constructor;\r\n\r\n    return toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n  };\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  add                 P.minus, P.plus\r\n   *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd\r\n   *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln\r\n   *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln\r\n   *  exp                 P.exp, P.pow\r\n   *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,\r\n   *                      P.toString, divide, round, toString, exp, ln\r\n   *  getLn10             P.log, ln\r\n   *  getZeroString       digitsToString, toString\r\n   *  ln                  P.log, P.ln, P.pow, exp\r\n   *  parseDecimal        Decimal\r\n   *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,\r\n   *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,\r\n   *                      divide, getLn10, exp, ln\r\n   *  subtract            P.minus, P.plus\r\n   *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf\r\n   *  truncate            P.pow\r\n   *\r\n   *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,\r\n   *                      getLn10, exp, ln, parseDecimal, Decimal, config\r\n   */\r\n\r\n\r\n  function add(x, y) {\r\n    var carry, d, e, i, k, len, xd, yd,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    // If either is zero...\r\n    if (!x.s || !y.s) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!y.s) y = new Ctor(x);\r\n      return external ? round(y, pr) : y;\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    k = x.e;\r\n    e = y.e;\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = e;\r\n\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % BASE | 0;\r\n        carry = temp / BASE | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * BASE + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, dp) {\r\n      var cmp, e, i, k, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either 0?\r\n      if (!x.s) return new Ctor(x);\r\n      if (!y.s) throw Error(decimalError + 'Division by zero');\r\n\r\n      e = x.e - y.e;\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      for (i = 0; yd[i] == (xd[i] || 0); ) ++i;\r\n      if (yd[i] > (xd[i] || 0)) --e;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n      } else if (dp) {\r\n        sd = pr + (getBase10Exponent(x) - getBase10Exponent(y)) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) return new Ctor(0);\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / LOG_BASE + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * BASE + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= BASE/2\r\n        k = BASE / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k);\r\n          xd = multiplyInteger(xd, k);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= BASE / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= BASE) k = BASE - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n\r\n      q.e = e;\r\n\r\n      return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`\r\n   * significant digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   */\r\n  function exp(x, sd) {\r\n    var denominator, guard, pow, sum, t, wpr,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    if (getBase10Exponent(x) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n\r\n    // exp(0) = 1\r\n    if (!x.s) return new Ctor(ONE);\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    while (x.abs().gte(0.1)) {\r\n      x = x.times(t);    // x = x / 2^5\r\n      k += 5;\r\n    }\r\n\r\n    // Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(ONE);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = round(pow.times(x), wpr);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        while (k--) sum = round(sum.times(sum), wpr);\r\n        Ctor.precision = pr;\r\n        return sd == null ? (external = true, round(sum, pr)) : sum;\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(x) {\r\n    var e = x.e * LOG_BASE,\r\n      w = x.d[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for (; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n\r\n    if (sd > Ctor.LN10.sd()) {\r\n\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(decimalError + 'LN10 precision limit exceeded');\r\n    }\r\n\r\n    return round(new Ctor(Ctor.LN10), sd);\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(n) is non-terminating (n != 1)\r\n   *\r\n   */\r\n  function ln(y, sd) {\r\n    var c, c0, denominator, e, numerator, sum, t, wpr, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    // ln(-x) = NaN\r\n    // ln(0) = -Infinity\r\n    if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n    // ln(1) = 0\r\n    if (x.eq(ONE)) return new Ctor(0);\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    if (x.eq(10)) {\r\n      if (sd == null) external = true;\r\n      return getLn10(Ctor, wpr);\r\n    }\r\n\r\n    wpr += guard;\r\n    Ctor.precision = wpr;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n    e = getBase10Exponent(x);\r\n\r\n    if (Math.abs(e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = getBase10Exponent(x);\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = ln(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n\r\n      Ctor.precision = pr;\r\n      return sd == null ? (external = true, round(x, pr)) : x;\r\n    }\r\n\r\n    // x is reduced to a value near 1.\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(ONE), x.plus(ONE), wpr);\r\n    x2 = round(x.times(x), wpr);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = round(numerator.times(x2), wpr);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr);\r\n\r\n        Ctor.precision = pr;\r\n        return sd == null ? (external = true, round(sum, pr)) : sum;\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48;) ++i;\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48;) --len;\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      e = e - i - 1;\r\n      x.e = mathfloor(e / LOG_BASE);\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external && (x.e > MAX_E || x.e < -MAX_E)) throw Error(exponentOutOfRange + e);\r\n    } else {\r\n\r\n      // Zero.\r\n      x.s = 0;\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).\r\n   */\r\n   function round(x, sd, rm) {\r\n    var i, j, k, n, rd, doRound, w, xdi,\r\n      xd = x.d;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd which contains the rounding digit, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // n: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (n = 1, k = xd[0]; k >= 10; k /= 10) n++;\r\n    i = sd - n;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) return x;\r\n      w = k = xd[xdi];\r\n\r\n      // Get the number of digits of w.\r\n      for (n = 1; k >= 10; k /= 10) n++;\r\n\r\n      // Get the index of rd within w.\r\n      i %= LOG_BASE;\r\n\r\n      // Get the index of rd within w, adjusted for leading zeros.\r\n      // The number of leading zeros of w is given by LOG_BASE - n.\r\n      j = i - LOG_BASE + n;\r\n    }\r\n\r\n    if (rm !== void 0) {\r\n      k = mathpow(10, n - j - 1);\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / k % 10 | 0;\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k;\r\n\r\n      // The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the\r\n      // digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give\r\n      // 714.\r\n\r\n      doRound = rm < 4\r\n        ? (rd || doRound) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n    }\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      if (doRound) {\r\n        k = getBase10Exponent(x);\r\n        xd.length = 1;\r\n\r\n        // Convert sd to decimal places.\r\n        sd = sd - k - 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = mathfloor(-sd / LOG_BASE) || 0;\r\n      } else {\r\n        xd.length = 1;\r\n\r\n        // Zero.\r\n        xd[0] = x.e = x.s = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (doRound) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n          if ((xd[0] += k) == BASE) {\r\n            xd[0] = 1;\r\n            ++x.e;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n\r\n    if (external && (x.e > MAX_E || x.e < -MAX_E)) {\r\n      throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function subtract(x, y) {\r\n    var d, e, i, j, k, len, xd, xe, xLTy, yd,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    // Return y negated if x is zero.\r\n    // Return x if y is zero and x is non-zero.\r\n    if (!x.s || !y.s) {\r\n      if (y.s) y.s = -y.s;\r\n      else y = new Ctor(x);\r\n      return external ? round(y, pr) : y;\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n\r\n    // x and y are non-zero numbers with the same sign.\r\n\r\n    e = y.e;\r\n    xe = x.e;\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of zeros\r\n      // needing to be prepended, but this can be avoided while still ensuring correct rounding by\r\n      // limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to xd if shorter.\r\n    // Don't add zeros to yd if shorter as subtraction only needs to start at yd length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(0);\r\n\r\n    y.d = xd;\r\n    y.e = e;\r\n\r\n    //return external && xd.length >= pr / LOG_BASE ? round(y, pr) : y;\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n\r\n  function toString(x, isExp, sd) {\r\n    var k,\r\n      e = getBase10Exponent(x),\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (e < 0 ? 'e' : 'e+') + e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  clone\r\n   *  config/set\r\n   */\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * value {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(value) {\r\n      var x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(value);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (value instanceof Decimal) {\r\n        x.s = value.s;\r\n        x.e = value.e;\r\n        x.d = (value = value.d) ? value.slice() : value;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'number') {\r\n\r\n        // Reject Infinity/NaN.\r\n        if (value * 0 !== 0) {\r\n          throw Error(invalidArgument + value);\r\n        }\r\n\r\n        if (value > 0) {\r\n          x.s = 1;\r\n        } else if (value < 0) {\r\n          value = -value;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 0;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (value === ~~value && value < 1e7) {\r\n          x.e = 0;\r\n          x.d = [value];\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, value.toString());\r\n      } else if (typeof value !== 'string') {\r\n        throw Error(invalidArgument + value);\r\n      }\r\n\r\n      // Minus sign?\r\n      if (value.charCodeAt(0) === 45) {\r\n        value = value.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      if (isDecimal.test(value)) parseDecimal(x, value);\r\n      else throw Error(invalidArgument + value);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n\r\n    Decimal.clone = clone;\r\n    Decimal.config = Decimal.set = config;\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') {\r\n      throw Error(decimalError + 'Object expected');\r\n    }\r\n    var i, p, v,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -1 / 0, 0,\r\n        'toExpPos', 0, 1 / 0\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if ((v = obj[p = ps[i]]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if ((v = obj[p = 'LN10']) !== void 0) {\r\n        if (v == Math.LN10) this[p] = new this(v);\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(Decimal);\r\n\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Internal constant.\r\n  ONE = new Decimal(1);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = Decimal;\r\n\r\n    // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self\r\n        ? self : Function('return this')();\r\n    }\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n","/*\r\n *  big.js v5.2.2\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  https://github.com/MikeMcl/big.js/LICENCE\r\n */\r\n;(function (GLOBAL) {\r\n  'use strict';\r\n  var Big,\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n    // The default values below must be integers within the stated ranges.\r\n\r\n    /*\r\n     * The maximum number of decimal places (DP) of the results of operations involving division:\r\n     * div and sqrt, and pow with negative exponents.\r\n     */\r\n    DP = 20,          // 0 to MAX_DP\r\n\r\n    /*\r\n     * The rounding mode (RM) used when rounding to the above decimal places.\r\n     *\r\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n     *  3  Away from zero.                                  (ROUND_UP)\r\n     */\r\n    RM = 1,             // 0, 1, 2 or 3\r\n\r\n    // The maximum value of DP and Big.DP.\r\n    MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n    // The maximum magnitude of the exponent argument to the pow method.\r\n    MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n    /*\r\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n     * (JavaScript numbers: -7)\r\n     * -1000000 is the minimum recommended exponent value of a Big.\r\n     */\r\n    NE = -7,            // 0 to -1000000\r\n\r\n    /*\r\n     * The positive exponent (PE) at and above which toString returns exponential notation.\r\n     * (JavaScript numbers: 21)\r\n     * 1000000 is the maximum recommended exponent value of a Big.\r\n     * (This limit is not enforced or checked.)\r\n     */\r\n    PE = 21,            // 0 to 1000000\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n    // Error messages.\r\n    NAME = '[big.js] ',\r\n    INVALID = NAME + 'Invalid ',\r\n    INVALID_DP = INVALID + 'decimal places',\r\n    INVALID_RM = INVALID + 'rounding mode',\r\n    DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n    // The shared prototype object.\r\n    P = {},\r\n    UNDEFINED = void 0,\r\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n  /*\r\n   * Create and return a Big constructor.\r\n   *\r\n   */\r\n  function _Big_() {\r\n\r\n    /*\r\n     * The Big constructor and exported function.\r\n     * Create and return a new instance of a Big number object.\r\n     *\r\n     * n {number|string|Big} A numeric value.\r\n     */\r\n    function Big(n) {\r\n      var x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n      // Duplicate.\r\n      if (n instanceof Big) {\r\n        x.s = n.s;\r\n        x.e = n.e;\r\n        x.c = n.c.slice();\r\n      } else {\r\n        parse(x, n);\r\n      }\r\n\r\n      /*\r\n       * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\r\n       * points to Object.\r\n       */\r\n      x.constructor = Big;\r\n    }\r\n\r\n    Big.prototype = P;\r\n    Big.DP = DP;\r\n    Big.RM = RM;\r\n    Big.NE = NE;\r\n    Big.PE = PE;\r\n    Big.version = '5.2.2';\r\n\r\n    return Big;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the number or string value passed to a Big constructor.\r\n   *\r\n   * x {Big} A Big number instance.\r\n   * n {number|string} A numeric value.\r\n   */\r\n  function parse(x, n) {\r\n    var e, i, nl;\r\n\r\n    // Minus zero?\r\n    if (n === 0 && 1 / n < 0) n = '-0';\r\n    else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number');\r\n\r\n    // Determine sign.\r\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n    // Decimal point?\r\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = n.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +n.slice(i + 1);\r\n      n = n.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = n.length;\r\n    }\r\n\r\n    nl = n.length;\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n    if (i == nl) {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    } else {\r\n\r\n      // Determine trailing zeros.\r\n      for (; nl > 0 && n.charAt(--nl) == '0';);\r\n      x.e = e - i - 1;\r\n      x.c = [];\r\n\r\n      // Convert string to array of digits without leading/trailing zeros.\r\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n   * Called by stringify, P.div, P.round and P.sqrt.\r\n   *\r\n   * x {Big} The Big to round.\r\n   * dp {number} Integer, 0 to MAX_DP inclusive.\r\n   * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n   * [more] {boolean} Whether the result of division was truncated.\r\n   */\r\n  function round(x, dp, rm, more) {\r\n    var xc = x.c,\r\n      i = x.e + dp + 1;\r\n\r\n    if (i < xc.length) {\r\n      if (rm === 1) {\r\n\r\n        // xc[i] is the digit after the digit that may be rounded up.\r\n        more = xc[i] >= 5;\r\n      } else if (rm === 2) {\r\n        more = xc[i] > 5 || xc[i] == 5 &&\r\n          (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\r\n      } else if (rm === 3) {\r\n        more = more || !!xc[0];\r\n      } else {\r\n        more = false;\r\n        if (rm !== 0) throw Error(INVALID_RM);\r\n      }\r\n\r\n      if (i < 1) {\r\n        xc.length = 1;\r\n\r\n        if (more) {\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          x.e = -dp;\r\n          xc[0] = 1;\r\n        } else {\r\n\r\n          // Zero.\r\n          xc[0] = x.e = 0;\r\n        }\r\n      } else {\r\n\r\n        // Remove any digits after the required decimal places.\r\n        xc.length = i--;\r\n\r\n        // Round up?\r\n        if (more) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up.\r\n          for (; ++xc[i] > 9;) {\r\n            xc[i] = 0;\r\n            if (!i--) {\r\n              ++x.e;\r\n              xc.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; !xc[--i];) xc.pop();\r\n      }\r\n    } else if (rm < 0 || rm > 3 || rm !== ~~rm) {\r\n      throw Error(INVALID_RM);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of Big x in normal or exponential notation.\r\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n   *\r\n   * x {Big}\r\n   * id? {number} Caller id.\r\n   *         1 toExponential\r\n   *         2 toFixed\r\n   *         3 toPrecision\r\n   *         4 valueOf\r\n   * n? {number|undefined} Caller's argument.\r\n   * k? {number|undefined}\r\n   */\r\n  function stringify(x, id, n, k) {\r\n    var e, s,\r\n      Big = x.constructor,\r\n      z = !x.c[0];\r\n\r\n    if (n !== UNDEFINED) {\r\n      if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\r\n        throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\r\n      }\r\n\r\n      x = new Big(x);\r\n\r\n      // The index of the digit that may be rounded up.\r\n      n = k - x.e;\r\n\r\n      // Round?\r\n      if (x.c.length > ++k) round(x, n, Big.RM);\r\n\r\n      // toFixed: recalculate k as x.e may have changed if value rounded up.\r\n      if (id == 2) k = x.e + n + 1;\r\n\r\n      // Append zeros?\r\n      for (; x.c.length < k;) x.c.push(0);\r\n    }\r\n\r\n    e = x.e;\r\n    s = x.c.join('');\r\n    n = s.length;\r\n\r\n    // Exponential notation?\r\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\r\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n    // Normal notation.\r\n    } else if (e < 0) {\r\n      for (; ++e;) s = '0' + s;\r\n      s = '0.' + s;\r\n    } else if (e > 0) {\r\n      if (++e > n) for (e -= n; e--;) s += '0';\r\n      else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);\r\n    } else if (n > 1) {\r\n      s = s.charAt(0) + '.' + s.slice(1);\r\n    }\r\n\r\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\r\n  }\r\n\r\n\r\n  // Prototype/instance methods\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the absolute value of this Big.\r\n   */\r\n  P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return 1 if the value of this Big is greater than the value of Big y,\r\n   *       -1 if the value of this Big is less than the value of Big y, or\r\n   *        0 if they have the same value.\r\n  */\r\n  P.cmp = function (y) {\r\n    var isneg,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new x.constructor(y)).c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    isneg = i < 0;\r\n\r\n    // Compare exponents.\r\n    if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = -1; ++i < j;) {\r\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.div = function (y) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      a = x.c,                  // dividend\r\n      b = (y = new Big(y)).c,   // divisor\r\n      k = x.s == y.s ? 1 : -1,\r\n      dp = Big.DP;\r\n\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\r\n\r\n    // Divisor is zero?\r\n    if (!b[0]) throw Error(DIV_BY_ZERO);\r\n\r\n    // Dividend is 0? Return +-0.\r\n    if (!a[0]) return new Big(k * 0);\r\n\r\n    var bl, bt, n, cmp, ri,\r\n      bz = b.slice(),\r\n      ai = bl = b.length,\r\n      al = a.length,\r\n      r = a.slice(0, bl),   // remainder\r\n      rl = r.length,\r\n      q = y,                // quotient\r\n      qc = q.c = [],\r\n      qi = 0,\r\n      d = dp + (q.e = x.e - y.e) + 1;    // number of digits of the result\r\n\r\n    q.s = k;\r\n    k = d < 0 ? 0 : d;\r\n\r\n    // Create version of divisor with leading zero.\r\n    bz.unshift(0);\r\n\r\n    // Add zeros to make remainder as long as divisor.\r\n    for (; rl++ < bl;) r.push(0);\r\n\r\n    do {\r\n\r\n      // n is how many times the divisor goes into current remainder.\r\n      for (n = 0; n < 10; n++) {\r\n\r\n        // Compare divisor and remainder.\r\n        if (bl != (rl = r.length)) {\r\n          cmp = bl > rl ? 1 : -1;\r\n        } else {\r\n          for (ri = -1, cmp = 0; ++ri < bl;) {\r\n            if (b[ri] != r[ri]) {\r\n              cmp = b[ri] > r[ri] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If divisor < remainder, subtract divisor from remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Remainder can't be more than 1 digit longer than divisor.\r\n          // Equalise lengths using divisor with extra leading zero?\r\n          for (bt = rl == bl ? b : bz; rl;) {\r\n            if (r[--rl] < bt[rl]) {\r\n              ri = rl;\r\n              for (; ri && !r[--ri];) r[ri] = 9;\r\n              --r[ri];\r\n              r[rl] += 10;\r\n            }\r\n            r[rl] -= bt[rl];\r\n          }\r\n\r\n          for (; !r[0];) r.shift();\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Add the digit n to the result array.\r\n      qc[qi++] = cmp ? n : ++n;\r\n\r\n      // Update the remainder.\r\n      if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n      else r = [a[ai]];\r\n\r\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n    if (!qc[0] && qi != 1) {\r\n\r\n      // There can't be more than one zero.\r\n      qc.shift();\r\n      q.e--;\r\n    }\r\n\r\n    // Round?\r\n    if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);\r\n\r\n    return q;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n   */\r\n  P.eq = function (y) {\r\n    return !this.cmp(y);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n   * false.\r\n   */\r\n  P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.gte = function (y) {\r\n    return this.cmp(y) > -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n   */\r\n  P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var i, j, t, xlty,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xc = x.c.slice(),\r\n      xe = x.e,\r\n      yc = y.c,\r\n      ye = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n\r\n      // y is non-zero? x is non-zero? Or both are zero.\r\n      return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\r\n    }\r\n\r\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n    if (a = xe - ye) {\r\n\r\n      if (xlty = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (b = a; b--;) t.push(0);\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n        if (xc[b] != yc[b]) {\r\n          xlty = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xlty) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n     * needs to start at yc.length.\r\n     */\r\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n    // Subtract yc from xc.\r\n    for (b = i; j > a;) {\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i];) xc[i] = 9;\r\n        --xc[i];\r\n        xc[j] += 10;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xc[--b] === 0;) xc.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] === 0;) {\r\n      xc.shift();\r\n      --ye;\r\n    }\r\n\r\n    if (!xc[0]) {\r\n\r\n      // n - n = +0\r\n      y.s = 1;\r\n\r\n      // Result must be zero.\r\n      xc = [ye = 0];\r\n    }\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n   */\r\n  P.mod = function (y) {\r\n    var ygtx,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    if (!y.c[0]) throw Error(DIV_BY_ZERO);\r\n\r\n    x.s = y.s = 1;\r\n    ygtx = y.cmp(x) == 1;\r\n    x.s = a;\r\n    y.s = b;\r\n\r\n    if (ygtx) return new Big(x);\r\n\r\n    a = Big.DP;\r\n    b = Big.RM;\r\n    Big.DP = Big.RM = 0;\r\n    x = x.div(y);\r\n    Big.DP = a;\r\n    Big.RM = b;\r\n\r\n    return this.minus(x.times(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e,\r\n      xc = x.c,\r\n      ye = y.e,\r\n      yc = y.c;\r\n\r\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\r\n    if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);\r\n\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    // Note: reverse faster than unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--;) t.push(0);\r\n      t.reverse();\r\n    }\r\n\r\n    // Point xc to the longer array.\r\n    if (xc.length - yc.length < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n    }\r\n\r\n    a = yc.length;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n    for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n    if (b) {\r\n      xc.unshift(b);\r\n      ++ye;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (a = xc.length; xc[--a] === 0;) xc.pop();\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a Big whose value is the value of this Big raised to the power n.\r\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n   * mode Big.RM.\r\n   *\r\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n   */\r\n  P.pow = function (n) {\r\n    var x = this,\r\n      one = new x.constructor(1),\r\n      y = one,\r\n      isneg = n < 0;\r\n\r\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');\r\n    if (isneg) n = -n;\r\n\r\n    for (;;) {\r\n      if (n & 1) y = y.times(x);\r\n      n >>= 1;\r\n      if (!n) break;\r\n      x = x.times(x);\r\n    }\r\n\r\n    return isneg ? one.div(y) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded using rounding mode rm\r\n   * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\r\n   * multiple of 10**-dp.\r\n   * If dp is not specified, round to 0 decimal places.\r\n   * If rm is not specified, use Big.RM.\r\n   *\r\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n   * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n   */\r\n  P.round = function (dp, rm) {\r\n    var Big = this.constructor;\r\n    if (dp === UNDEFINED) dp = 0;\r\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);\r\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.sqrt = function () {\r\n    var r, c, t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      s = x.s,\r\n      e = x.e,\r\n      half = new Big(0.5);\r\n\r\n    // Zero?\r\n    if (!x.c[0]) return new Big(x);\r\n\r\n    // Negative?\r\n    if (s < 0) throw Error(NAME + 'No square root');\r\n\r\n    // Estimate.\r\n    s = Math.sqrt(x + '');\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n    if (s === 0 || s === 1 / 0) {\r\n      c = x.c.join('');\r\n      if (!(c.length + e & 1)) c += '0';\r\n      s = Math.sqrt(c);\r\n      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n      r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n    } else {\r\n      r = new Big(s);\r\n    }\r\n\r\n    e = r.e + (Big.DP += 4);\r\n\r\n    // Newton-Raphson iteration.\r\n    do {\r\n      t = r;\r\n      r = half.times(t.plus(x.div(t)));\r\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n    return round(r, Big.DP -= 4, Big.RM);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big times the value of Big y.\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var c,\r\n      x = this,\r\n      Big = x.constructor,\r\n      xc = x.c,\r\n      yc = (y = new Big(y)).c,\r\n      a = xc.length,\r\n      b = yc.length,\r\n      i = x.e,\r\n      j = y.e;\r\n\r\n    // Determine sign of result.\r\n    y.s = x.s == y.s ? 1 : -1;\r\n\r\n    // Return signed 0 if either 0.\r\n    if (!xc[0] || !yc[0]) return new Big(y.s * 0);\r\n\r\n    // Initialise exponent of result as x.e + y.e.\r\n    y.e = i + j;\r\n\r\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n    if (a < b) {\r\n      c = xc;\r\n      xc = yc;\r\n      yc = c;\r\n      j = a;\r\n      a = b;\r\n      b = j;\r\n    }\r\n\r\n    // Initialise coefficient array of result with zeros.\r\n    for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n    // Multiply.\r\n\r\n    // i is initially xc.length.\r\n    for (i = b; i--;) {\r\n      b = 0;\r\n\r\n      // a is yc.length.\r\n      for (j = a + i; j > i;) {\r\n\r\n        // Current sum of products at this digit position, plus carry.\r\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n        c[j--] = b % 10;\r\n\r\n        // carry\r\n        b = b / 10 | 0;\r\n      }\r\n\r\n      c[j] = (c[j] + b) % 10;\r\n    }\r\n\r\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n    if (b) ++y.e;\r\n    else c.shift();\r\n\r\n    // Remove trailing zeros.\r\n    for (i = c.length; !c[--i];) c.pop();\r\n    y.c = c;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in exponential notation to dp fixed decimal\r\n   * places and rounded using Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   */\r\n  P.toExponential = function (dp) {\r\n    return stringify(this, 1, dp, dp);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in normal notation to dp fixed decimal\r\n   * places and rounded using Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   */\r\n  P.toFixed = function (dp) {\r\n    return stringify(this, 2, dp, this.e + dp);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big rounded to sd significant digits using\r\n   * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * sd {number} Integer, 1 to MAX_DP inclusive.\r\n   */\r\n  P.toPrecision = function (sd) {\r\n    return stringify(this, 3, sd, sd - 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Omit the sign for negative zero.\r\n   */\r\n  P.toString = function () {\r\n    return stringify(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Include the sign for negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return stringify(this, 4);\r\n  };\r\n\r\n\r\n  // Export\r\n\r\n\r\n  Big = _Big_();\r\n\r\n  Big['default'] = Big.Big = Big;\r\n\r\n  //AMD.\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function () { return Big; });\r\n\r\n  // Node and other CommonJS-like environments that support module.exports.\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Big;\r\n\r\n  //Browser.\r\n  } else {\r\n    GLOBAL.Big = Big;\r\n  }\r\n})(this);\r\n","/*\r\n *  toFormat v2.0.0\r\n *  Adds a toFormat instance method to big.js or decimal.js\r\n *  Copyright (c) 2017 Michael Mclaughlin\r\n *  MIT Licence\r\n */\r\n\r\n /*\r\n * Adds a `toFormat` method to `Ctor.prototype` and a `format` object to `Ctor`, where `Ctor` is\r\n * a big number constructor such as `Decimal` (decimal.js) or `Big` (big.js).\r\n */\r\nfunction toFormat(Ctor) {\r\n  'use strict';\r\n\r\n  /*\r\n   *  Returns a string representing the value of this big number in fixed-point notation to `dp`\r\n   *  decimal places using rounding mode `rm`, and formatted according to the properties of the\r\n   * `fmt`, `this.format` and `this.constructor.format` objects, in that order of precedence.\r\n   *\r\n   *  Example:\r\n   *\r\n   *  x = new Decimal('123456789.987654321')\r\n   *\r\n   *  // Add a format object to the constructor...\r\n   *  Decimal.format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ',',\r\n   *    groupSize: 3,\r\n   *    secondaryGroupSize: 0,\r\n   *    fractionGroupSeparator: '',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 0\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123,456,789.987654321\r\n   *  x.toFormat(2, 1);            // 123,456,789.98\r\n   *\r\n   *  // And/or add a format object to the big number itself...\r\n   *  x.format = {\r\n   *    decimalSeparator: ',',\r\n   *    groupSeparator: '',\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123456789,987654321\r\n   *\r\n   *  format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ' ',\r\n   *    groupSize: 3,\r\n   *    fractionGroupSeparator: ' ',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 5\r\n   *  }\r\n\r\n   *  // And/or pass a format object to the method call.\r\n   *  x.toFormat(format);          // 123 456 789.98765 4321\r\n   *  x.toFormat(4, format);       // 123 456 789.9877\r\n   *  x.toFormat(2, 1, format);    // 123 456 789.98\r\n   *\r\n   *  [dp] {number} Decimal places. Integer.\r\n   *  [rm] {number} Rounding mode. Integer, 0 to 8. (Ignored if using big.js.)\r\n   *  [fmt] {Object} A format object.\r\n   *\r\n   */\r\n  Ctor.prototype.toFormat = function toFormat(dp, rm, fmt) {\r\n\r\n    if (!this.e && this.e !== 0) return this.toString();   // Infinity/NaN\r\n\r\n    var arr, g1, g2, i,\r\n      u,                             // undefined\r\n      nd,                            // number of integer digits\r\n      intd,                          // integer digits\r\n      intp,                          // integer part\r\n      fracp,                         // fraction part\r\n      dsep,                          // decimalSeparator\r\n      gsep,                          // groupSeparator\r\n      gsize,                         // groupSize\r\n      sgsize,                        // secondaryGroupSize\r\n      fgsep,                         // fractionGroupSeparator\r\n      fgsize,                        // fractionGroupSize\r\n      tfmt = this.format || {},\r\n      cfmt = this.constructor.format || {};\r\n\r\n    if (dp != u) {\r\n      if (typeof dp == 'object') {\r\n        fmt = dp;\r\n        dp = u;\r\n      } else if (rm != u) {\r\n        if (typeof rm == 'object') {\r\n          fmt = rm;\r\n          rm = u;\r\n        } else if (typeof fmt != 'object') {\r\n          fmt = {};\r\n        }\r\n      } else {\r\n        fmt = {};\r\n      }\r\n    } else {\r\n      fmt = {};\r\n    }\r\n\r\n    arr = this.toFixed(dp, rm).split('.');\r\n    intp = arr[0];\r\n    fracp = arr[1];\r\n    intd = this.s < 0 ? intp.slice(1) : intp;\r\n    nd = intd.length;\r\n\r\n    dsep = fmt.decimalSeparator;\r\n    if (dsep == u) {\r\n      dsep = tfmt.decimalSeparator;\r\n      if (dsep == u) {\r\n        dsep = cfmt.decimalSeparator;\r\n        if (dsep == u) dsep = '.';\r\n      }\r\n    }\r\n\r\n    gsep = fmt.groupSeparator;\r\n    if (gsep == u) {\r\n      gsep = tfmt.groupSeparator;\r\n      if (gsep == u) gsep = cfmt.groupSeparator;\r\n    }\r\n\r\n    if (gsep) {\r\n      gsize = fmt.groupSize;\r\n      if (gsize == u) {\r\n        gsize = tfmt.groupSize;\r\n        if (gsize == u) {\r\n          gsize = cfmt.groupSize;\r\n          if (gsize == u) gsize = 0;\r\n        }\r\n      }\r\n\r\n      sgsize = fmt.secondaryGroupSize;\r\n      if (sgsize == u) {\r\n        sgsize = tfmt.secondaryGroupSize;\r\n        if (sgsize == u) {\r\n          sgsize = cfmt.secondaryGroupSize;\r\n          if (sgsize == u) sgsize = 0;\r\n        }\r\n      }\r\n\r\n      if (sgsize) {\r\n        g1 = +sgsize;\r\n        g2 = +gsize;\r\n        nd -= g2;\r\n      } else {\r\n        g1 = +gsize;\r\n        g2 = +sgsize;\r\n      }\r\n\r\n      if (g1 > 0 && nd > 0) {\r\n        i = nd % g1 || g1;\r\n        intp = intd.substr(0, i);\r\n        for (; i < nd; i += g1) intp += gsep + intd.substr(i, g1);\r\n        if (g2 > 0) intp += gsep + intd.slice(i);\r\n        if (this.s < 0) intp = '-' + intp;\r\n      }\r\n    }\r\n\r\n    if (fracp) {\r\n      fgsep = fmt.fractionGroupSeparator;\r\n      if (fgsep == u) {\r\n        fgsep = tfmt.fractionGroupSeparator;\r\n        if (fgsep == u) fgsep = cfmt.fractionGroupSeparator;\r\n      }\r\n\r\n      if (fgsep) {\r\n        fgsize = fmt.fractionGroupSize;\r\n        if (fgsize == u) {\r\n          fgsize = tfmt.fractionGroupSize;\r\n          if (fgsize == u) {\r\n            fgsize = cfmt.fractionGroupSize;\r\n            if (fgsize == u) fgsize = 0;\r\n          }\r\n        }\r\n\r\n        fgsize = +fgsize;\r\n\r\n        if (fgsize) {\r\n          fracp = fracp.replace(new RegExp('\\\\d{' + fgsize + '}\\\\B', 'g'), '$&' + fgsep);\r\n        }\r\n      }\r\n\r\n      return intp + dsep + fracp;\r\n    } else {\r\n\r\n      return intp;\r\n    }\r\n  };\r\n\r\n  Ctor.format = {\r\n    decimalSeparator: '.',\r\n    groupSeparator: ',',\r\n    groupSize: 3,\r\n    secondaryGroupSize: 0,\r\n    fractionGroupSeparator: '',\r\n    fractionGroupSize: 0\r\n  };\r\n\r\n  return Ctor;\r\n}\r\n\r\nif (typeof module !== 'undefined' && module.exports) module.exports = toFormat;\r\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {\n      Buffer = window.Buffer;\n    } else {\n      Buffer = require('buffer').Buffer;\n    }\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n      this.negative = 1;\n    }\n\n    if (start < number.length) {\n      if (base === 16) {\n        this._parseHex(number, start, endian);\n      } else {\n        this._parseBase(number, base, start);\n        if (endian === 'le') {\n          this._initArray(this.toArray(), base, endian);\n        }\n      }\n    }\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [number & 0x3ffffff];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [0];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this._strip();\n  };\n\n  function parseHex4Bits (string, index) {\n    var c = string.charCodeAt(index);\n    // '0' - '9'\n    if (c >= 48 && c <= 57) {\n      return c - 48;\n    // 'A' - 'F'\n    } else if (c >= 65 && c <= 70) {\n      return c - 55;\n    // 'a' - 'f'\n    } else if (c >= 97 && c <= 102) {\n      return c - 87;\n    } else {\n      assert(false, 'Invalid character in ' + string);\n    }\n  }\n\n  function parseHexByte (string, lowerBound, index) {\n    var r = parseHex4Bits(string, index);\n    if (index - 1 >= lowerBound) {\n      r |= parseHex4Bits(string, index - 1) << 4;\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start, endian) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    // 24-bits chunks\n    var off = 0;\n    var j = 0;\n\n    var w;\n    if (endian === 'be') {\n      for (i = number.length - 1; i >= start; i -= 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    } else {\n      var parseLength = number.length - start;\n      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    }\n\n    this._strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var b = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        b = c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        b = c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        b = c;\n      }\n      assert(c >= 0 && b < mul, 'Invalid character');\n      r += b;\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [0];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    this._strip();\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  function move (dest, src) {\n    dest.words = src.words;\n    dest.length = src.length;\n    dest.negative = src.negative;\n    dest.red = src.red;\n  }\n\n  BN.prototype._move = function _move (dest) {\n    move(dest, this);\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype._strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  // Check Symbol.for because not everywhere where Symbol defined\n  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility\n  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {\n    try {\n      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;\n    } catch (e) {\n      BN.prototype.inspect = inspect;\n    }\n  } else {\n    BN.prototype.inspect = inspect;\n  }\n\n  function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  }\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modrn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16, 2);\n  };\n\n  if (Buffer) {\n    BN.prototype.toBuffer = function toBuffer (endian, length) {\n      return this.toArrayLike(Buffer, endian, length);\n    };\n  }\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  var allocate = function allocate (ArrayType, size) {\n    if (ArrayType.allocUnsafe) {\n      return ArrayType.allocUnsafe(size);\n    }\n    return new ArrayType(size);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    this._strip();\n\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    var res = allocate(ArrayType, reqLength);\n    var postfix = endian === 'le' ? 'LE' : 'BE';\n    this['_toArrayLike' + postfix](res, byteLength);\n    return res;\n  };\n\n  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {\n    var position = 0;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position++] = word & 0xff;\n      if (position < res.length) {\n        res[position++] = (word >> 8) & 0xff;\n      }\n      if (position < res.length) {\n        res[position++] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position < res.length) {\n          res[position++] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position < res.length) {\n      res[position++] = carry;\n\n      while (position < res.length) {\n        res[position++] = 0;\n      }\n    }\n  };\n\n  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {\n    var position = res.length - 1;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position--] = word & 0xff;\n      if (position >= 0) {\n        res[position--] = (word >> 8) & 0xff;\n      }\n      if (position >= 0) {\n        res[position--] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position >= 0) {\n          res[position--] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position >= 0) {\n      res[position--] = carry;\n\n      while (position >= 0) {\n        res[position--] = 0;\n      }\n    }\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] >>> wbit) & 0x01;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this._strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this._strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this._strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    // Temporary disable, see https://github.com/indutny/bn.js/issues/211\n    // var fftm = new FFTM();\n    // return fftm.mulp(self, num, out);\n    return bigMulTo(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out._strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this._strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) <= num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this._strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this._strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q._strip();\n    }\n    a._strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modrn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modrn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modrn = function modrn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return isNegNum ? -acc : acc;\n  };\n\n  // WARNING: DEPRECATED\n  BN.prototype.modn = function modn (num) {\n    return this.modrn(num);\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    this._strip();\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this._strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is a BN v4 instance\n        r.strip();\n      } else {\n        // r is a BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n\n    move(a, a.umod(this.m)._forceRed(this));\n    return a;\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/**\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\n *\n * @version 0.8.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var INPUT_ERROR = 'input is invalid type';\n  var FINALIZE_ERROR = 'finalize already called';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_SHA3_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\n  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];\n  var KECCAK_PADDING = [1, 256, 65536, 16777216];\n  var PADDING = [6, 1536, 393216, 100663296];\n  var SHIFT = [0, 8, 16, 24];\n  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,\n    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,\n    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,\n    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,\n    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n  var BITS = [224, 256, 384, 512];\n  var SHAKE_BITS = [128, 256];\n  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];\n  var CSHAKE_BYTEPAD = {\n    '128': 168,\n    '256': 136\n  };\n\n  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  var createOutputMethod = function (bits, padding, outputType) {\n    return function (message) {\n      return new Keccak(bits, padding, bits).update(message)[outputType]();\n    };\n  };\n\n  var createShakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits) {\n      return new Keccak(bits, padding, outputBits).update(message)[outputType]();\n    };\n  };\n\n  var createCshakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits, n, s) {\n      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();\n    };\n  };\n\n  var createKmacOutputMethod = function (bits, padding, outputType) {\n    return function (key, message, outputBits, s) {\n      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();\n    };\n  };\n\n  var createOutputMethods = function (method, createMethod, bits, padding) {\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createMethod(bits, padding, type);\n    }\n    return method;\n  };\n\n  var createMethod = function (bits, padding) {\n    var method = createOutputMethod(bits, padding, 'hex');\n    method.create = function () {\n      return new Keccak(bits, padding, bits);\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    return createOutputMethods(method, createOutputMethod, bits, padding);\n  };\n\n  var createShakeMethod = function (bits, padding) {\n    var method = createShakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits) {\n      return new Keccak(bits, padding, outputBits);\n    };\n    method.update = function (message, outputBits) {\n      return method.create(outputBits).update(message);\n    };\n    return createOutputMethods(method, createShakeOutputMethod, bits, padding);\n  };\n\n  var createCshakeMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createCshakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits, n, s) {\n      if (!n && !s) {\n        return methods['shake' + bits].create(outputBits);\n      } else {\n        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);\n      }\n    };\n    method.update = function (message, outputBits, n, s) {\n      return method.create(outputBits, n, s).update(message);\n    };\n    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);\n  };\n\n  var createKmacMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createKmacOutputMethod(bits, padding, 'hex');\n    method.create = function (key, outputBits, s) {\n      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);\n    };\n    method.update = function (key, message, outputBits, s) {\n      return method.create(key, outputBits, s).update(message);\n    };\n    return createOutputMethods(method, createKmacOutputMethod, bits, padding);\n  };\n\n  var algorithms = [\n    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },\n    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },\n    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }\n  ];\n\n  var methods = {}, methodNames = [];\n\n  for (var i = 0; i < algorithms.length; ++i) {\n    var algorithm = algorithms[i];\n    var bits = algorithm.bits;\n    for (var j = 0; j < bits.length; ++j) {\n      var methodName = algorithm.name + '_' + bits[j];\n      methodNames.push(methodName);\n      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n      if (algorithm.name !== 'sha3') {\n        var newMethodName = algorithm.name + bits[j];\n        methodNames.push(newMethodName);\n        methods[newMethodName] = methods[methodName];\n      }\n    }\n  }\n\n  function Keccak(bits, padding, outputBits) {\n    this.blocks = [];\n    this.s = [];\n    this.padding = padding;\n    this.outputBits = outputBits;\n    this.reset = true;\n    this.finalized = false;\n    this.block = 0;\n    this.start = 0;\n    this.blockCount = (1600 - (bits << 1)) >> 5;\n    this.byteCount = this.blockCount << 2;\n    this.outputBlocks = outputBits >> 5;\n    this.extraBytes = (outputBits & 31) >> 3;\n\n    for (var i = 0; i < 50; ++i) {\n      this.s[i] = 0;\n    }\n  }\n\n  Keccak.prototype.update = function (message) {\n    if (this.finalized) {\n      throw new Error(FINALIZE_ERROR);\n    }\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw new Error(INPUT_ERROR);\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw new Error(INPUT_ERROR);\n          }\n        }\n      } else {\n        throw new Error(INPUT_ERROR);\n      }\n      notString = true;\n    }\n    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,\n      blockCount = this.blockCount, index = 0, s = this.s, i, code;\n\n    while (index < length) {\n      if (this.reset) {\n        this.reset = false;\n        blocks[0] = this.block;\n        for (i = 1; i < blockCount + 1; ++i) {\n          blocks[i] = 0;\n        }\n      }\n      if (notString) {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          code = message.charCodeAt(index);\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      if (i >= byteCount) {\n        this.start = i - byteCount;\n        this.block = blocks[blockCount];\n        for (i = 0; i < blockCount; ++i) {\n          s[i] ^= blocks[i];\n        }\n        f(s);\n        this.reset = true;\n      } else {\n        this.start = i;\n      }\n    }\n    return this;\n  };\n\n  Keccak.prototype.encode = function (x, right) {\n    var o = x & 255, n = 1;\n    var bytes = [o];\n    x = x >> 8;\n    o = x & 255;\n    while (o > 0) {\n      bytes.unshift(o);\n      x = x >> 8;\n      o = x & 255;\n      ++n;\n    }\n    if (right) {\n      bytes.push(n);\n    } else {\n      bytes.unshift(n);\n    }\n    this.update(bytes);\n    return bytes.length;\n  };\n\n  Keccak.prototype.encodeString = function (str) {\n    var notString, type = typeof str;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (str === null) {\n          throw new Error(INPUT_ERROR);\n        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {\n          str = new Uint8Array(str);\n        } else if (!Array.isArray(str)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {\n            throw new Error(INPUT_ERROR);\n          }\n        }\n      } else {\n        throw new Error(INPUT_ERROR);\n      }\n      notString = true;\n    }\n    var bytes = 0, length = str.length;\n    if (notString) {\n      bytes = length;\n    } else {\n      for (var i = 0; i < str.length; ++i) {\n        var code = str.charCodeAt(i);\n        if (code < 0x80) {\n          bytes += 1;\n        } else if (code < 0x800) {\n          bytes += 2;\n        } else if (code < 0xd800 || code >= 0xe000) {\n          bytes += 3;\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));\n          bytes += 4;\n        }\n      }\n    }\n    bytes += this.encode(bytes * 8);\n    this.update(str);\n    return bytes;\n  };\n\n  Keccak.prototype.bytepad = function (strs, w) {\n    var bytes = this.encode(w);\n    for (var i = 0; i < strs.length; ++i) {\n      bytes += this.encodeString(strs[i]);\n    }\n    var paddingBytes = w - bytes % w;\n    var zeros = [];\n    zeros.length = paddingBytes;\n    this.update(zeros);\n    return this;\n  };\n\n  Keccak.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;\n    blocks[i >> 2] |= this.padding[i & 3];\n    if (this.lastByteIndex === this.byteCount) {\n      blocks[0] = blocks[blockCount];\n      for (i = 1; i < blockCount + 1; ++i) {\n        blocks[i] = 0;\n      }\n    }\n    blocks[blockCount - 1] |= 0x80000000;\n    for (i = 0; i < blockCount; ++i) {\n      s[i] ^= blocks[i];\n    }\n    f(s);\n  };\n\n  Keccak.prototype.toString = Keccak.prototype.hex = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var hex = '', block;\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        block = s[i];\n        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +\n          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +\n          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +\n          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];\n      }\n      if (j % blockCount === 0) {\n        f(s);\n        i = 0;\n      }\n    }\n    if (extraBytes) {\n      block = s[i];\n      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];\n      if (extraBytes > 1) {\n        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];\n      }\n      if (extraBytes > 2) {\n        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];\n      }\n    }\n    return hex;\n  };\n\n  Keccak.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var bytes = this.outputBits >> 3;\n    var buffer;\n    if (extraBytes) {\n      buffer = new ArrayBuffer((outputBlocks + 1) << 2);\n    } else {\n      buffer = new ArrayBuffer(bytes);\n    }\n    var array = new Uint32Array(buffer);\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        array[j] = s[i];\n      }\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n    if (extraBytes) {\n      array[i] = s[i];\n      buffer = buffer.slice(0, bytes);\n    }\n    return buffer;\n  };\n\n  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n\n  Keccak.prototype.digest = Keccak.prototype.array = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var array = [], offset, block;\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        offset = j << 2;\n        block = s[i];\n        array[offset] = block & 0xFF;\n        array[offset + 1] = (block >> 8) & 0xFF;\n        array[offset + 2] = (block >> 16) & 0xFF;\n        array[offset + 3] = (block >> 24) & 0xFF;\n      }\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n    if (extraBytes) {\n      offset = j << 2;\n      block = s[i];\n      array[offset] = block & 0xFF;\n      if (extraBytes > 1) {\n        array[offset + 1] = (block >> 8) & 0xFF;\n      }\n      if (extraBytes > 2) {\n        array[offset + 2] = (block >> 16) & 0xFF;\n      }\n    }\n    return array;\n  };\n\n  function Kmac(bits, padding, outputBits) {\n    Keccak.call(this, bits, padding, outputBits);\n  }\n\n  Kmac.prototype = new Keccak();\n\n  Kmac.prototype.finalize = function () {\n    this.encode(this.outputBits, true);\n    return Keccak.prototype.finalize.call(this);\n  };\n\n  var f = function (s) {\n    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,\n      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,\n      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,\n      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n    for (n = 0; n < 48; n += 2) {\n      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n      h = c8 ^ ((c2 << 1) | (c3 >>> 31));\n      l = c9 ^ ((c3 << 1) | (c2 >>> 31));\n      s[0] ^= h;\n      s[1] ^= l;\n      s[10] ^= h;\n      s[11] ^= l;\n      s[20] ^= h;\n      s[21] ^= l;\n      s[30] ^= h;\n      s[31] ^= l;\n      s[40] ^= h;\n      s[41] ^= l;\n      h = c0 ^ ((c4 << 1) | (c5 >>> 31));\n      l = c1 ^ ((c5 << 1) | (c4 >>> 31));\n      s[2] ^= h;\n      s[3] ^= l;\n      s[12] ^= h;\n      s[13] ^= l;\n      s[22] ^= h;\n      s[23] ^= l;\n      s[32] ^= h;\n      s[33] ^= l;\n      s[42] ^= h;\n      s[43] ^= l;\n      h = c2 ^ ((c6 << 1) | (c7 >>> 31));\n      l = c3 ^ ((c7 << 1) | (c6 >>> 31));\n      s[4] ^= h;\n      s[5] ^= l;\n      s[14] ^= h;\n      s[15] ^= l;\n      s[24] ^= h;\n      s[25] ^= l;\n      s[34] ^= h;\n      s[35] ^= l;\n      s[44] ^= h;\n      s[45] ^= l;\n      h = c4 ^ ((c8 << 1) | (c9 >>> 31));\n      l = c5 ^ ((c9 << 1) | (c8 >>> 31));\n      s[6] ^= h;\n      s[7] ^= l;\n      s[16] ^= h;\n      s[17] ^= l;\n      s[26] ^= h;\n      s[27] ^= l;\n      s[36] ^= h;\n      s[37] ^= l;\n      s[46] ^= h;\n      s[47] ^= l;\n      h = c6 ^ ((c0 << 1) | (c1 >>> 31));\n      l = c7 ^ ((c1 << 1) | (c0 >>> 31));\n      s[8] ^= h;\n      s[9] ^= l;\n      s[18] ^= h;\n      s[19] ^= l;\n      s[28] ^= h;\n      s[29] ^= l;\n      s[38] ^= h;\n      s[39] ^= l;\n      s[48] ^= h;\n      s[49] ^= l;\n\n      b0 = s[0];\n      b1 = s[1];\n      b32 = (s[11] << 4) | (s[10] >>> 28);\n      b33 = (s[10] << 4) | (s[11] >>> 28);\n      b14 = (s[20] << 3) | (s[21] >>> 29);\n      b15 = (s[21] << 3) | (s[20] >>> 29);\n      b46 = (s[31] << 9) | (s[30] >>> 23);\n      b47 = (s[30] << 9) | (s[31] >>> 23);\n      b28 = (s[40] << 18) | (s[41] >>> 14);\n      b29 = (s[41] << 18) | (s[40] >>> 14);\n      b20 = (s[2] << 1) | (s[3] >>> 31);\n      b21 = (s[3] << 1) | (s[2] >>> 31);\n      b2 = (s[13] << 12) | (s[12] >>> 20);\n      b3 = (s[12] << 12) | (s[13] >>> 20);\n      b34 = (s[22] << 10) | (s[23] >>> 22);\n      b35 = (s[23] << 10) | (s[22] >>> 22);\n      b16 = (s[33] << 13) | (s[32] >>> 19);\n      b17 = (s[32] << 13) | (s[33] >>> 19);\n      b48 = (s[42] << 2) | (s[43] >>> 30);\n      b49 = (s[43] << 2) | (s[42] >>> 30);\n      b40 = (s[5] << 30) | (s[4] >>> 2);\n      b41 = (s[4] << 30) | (s[5] >>> 2);\n      b22 = (s[14] << 6) | (s[15] >>> 26);\n      b23 = (s[15] << 6) | (s[14] >>> 26);\n      b4 = (s[25] << 11) | (s[24] >>> 21);\n      b5 = (s[24] << 11) | (s[25] >>> 21);\n      b36 = (s[34] << 15) | (s[35] >>> 17);\n      b37 = (s[35] << 15) | (s[34] >>> 17);\n      b18 = (s[45] << 29) | (s[44] >>> 3);\n      b19 = (s[44] << 29) | (s[45] >>> 3);\n      b10 = (s[6] << 28) | (s[7] >>> 4);\n      b11 = (s[7] << 28) | (s[6] >>> 4);\n      b42 = (s[17] << 23) | (s[16] >>> 9);\n      b43 = (s[16] << 23) | (s[17] >>> 9);\n      b24 = (s[26] << 25) | (s[27] >>> 7);\n      b25 = (s[27] << 25) | (s[26] >>> 7);\n      b6 = (s[36] << 21) | (s[37] >>> 11);\n      b7 = (s[37] << 21) | (s[36] >>> 11);\n      b38 = (s[47] << 24) | (s[46] >>> 8);\n      b39 = (s[46] << 24) | (s[47] >>> 8);\n      b30 = (s[8] << 27) | (s[9] >>> 5);\n      b31 = (s[9] << 27) | (s[8] >>> 5);\n      b12 = (s[18] << 20) | (s[19] >>> 12);\n      b13 = (s[19] << 20) | (s[18] >>> 12);\n      b44 = (s[29] << 7) | (s[28] >>> 25);\n      b45 = (s[28] << 7) | (s[29] >>> 25);\n      b26 = (s[38] << 8) | (s[39] >>> 24);\n      b27 = (s[39] << 8) | (s[38] >>> 24);\n      b8 = (s[48] << 14) | (s[49] >>> 18);\n      b9 = (s[49] << 14) | (s[48] >>> 18);\n\n      s[0] = b0 ^ (~b2 & b4);\n      s[1] = b1 ^ (~b3 & b5);\n      s[10] = b10 ^ (~b12 & b14);\n      s[11] = b11 ^ (~b13 & b15);\n      s[20] = b20 ^ (~b22 & b24);\n      s[21] = b21 ^ (~b23 & b25);\n      s[30] = b30 ^ (~b32 & b34);\n      s[31] = b31 ^ (~b33 & b35);\n      s[40] = b40 ^ (~b42 & b44);\n      s[41] = b41 ^ (~b43 & b45);\n      s[2] = b2 ^ (~b4 & b6);\n      s[3] = b3 ^ (~b5 & b7);\n      s[12] = b12 ^ (~b14 & b16);\n      s[13] = b13 ^ (~b15 & b17);\n      s[22] = b22 ^ (~b24 & b26);\n      s[23] = b23 ^ (~b25 & b27);\n      s[32] = b32 ^ (~b34 & b36);\n      s[33] = b33 ^ (~b35 & b37);\n      s[42] = b42 ^ (~b44 & b46);\n      s[43] = b43 ^ (~b45 & b47);\n      s[4] = b4 ^ (~b6 & b8);\n      s[5] = b5 ^ (~b7 & b9);\n      s[14] = b14 ^ (~b16 & b18);\n      s[15] = b15 ^ (~b17 & b19);\n      s[24] = b24 ^ (~b26 & b28);\n      s[25] = b25 ^ (~b27 & b29);\n      s[34] = b34 ^ (~b36 & b38);\n      s[35] = b35 ^ (~b37 & b39);\n      s[44] = b44 ^ (~b46 & b48);\n      s[45] = b45 ^ (~b47 & b49);\n      s[6] = b6 ^ (~b8 & b0);\n      s[7] = b7 ^ (~b9 & b1);\n      s[16] = b16 ^ (~b18 & b10);\n      s[17] = b17 ^ (~b19 & b11);\n      s[26] = b26 ^ (~b28 & b20);\n      s[27] = b27 ^ (~b29 & b21);\n      s[36] = b36 ^ (~b38 & b30);\n      s[37] = b37 ^ (~b39 & b31);\n      s[46] = b46 ^ (~b48 & b40);\n      s[47] = b47 ^ (~b49 & b41);\n      s[8] = b8 ^ (~b0 & b2);\n      s[9] = b9 ^ (~b1 & b3);\n      s[18] = b18 ^ (~b10 & b12);\n      s[19] = b19 ^ (~b11 & b13);\n      s[28] = b28 ^ (~b20 & b22);\n      s[29] = b29 ^ (~b21 & b23);\n      s[38] = b38 ^ (~b30 & b32);\n      s[39] = b39 ^ (~b31 & b33);\n      s[48] = b48 ^ (~b40 & b42);\n      s[49] = b49 ^ (~b41 & b43);\n\n      s[0] ^= RC[n];\n      s[1] ^= RC[n + 1];\n    }\n  };\n\n  if (COMMON_JS) {\n    module.exports = methods;\n  } else {\n    for (i = 0; i < methodNames.length; ++i) {\n      root[methodNames[i]] = methods[methodNames[i]];\n    }\n    if (AMD) {\n      define(function () {\n        return methods;\n      });\n    }\n  }\n})();\n","/* eslint-disable no-prototype-builtins */\nvar g =\n  (typeof globalThis !== 'undefined' && globalThis) ||\n  (typeof self !== 'undefined' && self) ||\n  // eslint-disable-next-line no-undef\n  (typeof global !== 'undefined' && global) ||\n  {}\n\nvar support = {\n  searchParams: 'URLSearchParams' in g,\n  iterable: 'Symbol' in g && 'iterator' in Symbol,\n  blob:\n    'FileReader' in g &&\n    'Blob' in g &&\n    (function() {\n      try {\n        new Blob()\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: 'FormData' in g,\n  arrayBuffer: 'ArrayBuffer' in g\n}\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]'\n  ]\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== 'string') {\n    name = String(name)\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {\n    throw new TypeError('Invalid character in header field name: \"' + name + '\"')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value)\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift()\n      return {done: value === undefined, value: value}\n    }\n  }\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    }\n  }\n\n  return iterator\n}\n\nexport function Headers(headers) {\n  this.map = {}\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value)\n    }, this)\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      if (header.length != 2) {\n        throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length)\n      }\n      this.append(header[0], header[1])\n    }, this)\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name])\n    }, this)\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name)\n  value = normalizeValue(value)\n  var oldValue = this.map[name]\n  this.map[name] = oldValue ? oldValue + ', ' + value : value\n}\n\nHeaders.prototype['delete'] = function(name) {\n  delete this.map[normalizeName(name)]\n}\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name)\n  return this.has(name) ? this.map[name] : null\n}\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n}\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value)\n}\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this)\n    }\n  }\n}\n\nHeaders.prototype.keys = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push(name)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.values = function() {\n  var items = []\n  this.forEach(function(value) {\n    items.push(value)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.entries = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push([name, value])\n  })\n  return iteratorFor(items)\n}\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n}\n\nfunction consumed(body) {\n  if (body._noBody) return\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError('Already read'))\n  }\n  body.bodyUsed = true\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result)\n    }\n    reader.onerror = function() {\n      reject(reader.error)\n    }\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type)\n  var encoding = match ? match[1] : 'utf-8'\n  reader.readAsText(blob, encoding)\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf)\n  var chars = new Array(view.length)\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i])\n  }\n  return chars.join('')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength)\n    view.set(new Uint8Array(buf))\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false\n\n  this._initBody = function(body) {\n    /*\n      fetch-mock wraps the Response object in an ES6 Proxy to\n      provide useful test harness features such as flush. However, on\n      ES5 browsers without fetch or Proxy support pollyfills must be used;\n      the proxy-pollyfill is unable to proxy an attribute unless it exists\n      on the object before the Proxy is created. This change ensures\n      Response.bodyUsed exists on the instance, while maintaining the\n      semantic of setting Request.bodyUsed in the constructor before\n      _initBody is called.\n    */\n    // eslint-disable-next-line no-self-assign\n    this.bodyUsed = this.bodyUsed\n    this._bodyInit = body\n    if (!body) {\n      this._noBody = true;\n      this._bodyText = ''\n    } else if (typeof body === 'string') {\n      this._bodyText = body\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString()\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer)\n      // IE 10-11 can't handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body)\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body)\n    }\n\n    if (!this.headers.get('content-type')) {\n      if (typeof body === 'string') {\n        this.headers.set('content-type', 'text/plain;charset=UTF-8')\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set('content-type', this._bodyBlob.type)\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n      }\n    }\n  }\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as blob')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    }\n  }\n\n  this.arrayBuffer = function() {\n    if (this._bodyArrayBuffer) {\n      var isConsumed = consumed(this)\n      if (isConsumed) {\n        return isConsumed\n      } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\n        return Promise.resolve(\n          this._bodyArrayBuffer.buffer.slice(\n            this._bodyArrayBuffer.byteOffset,\n            this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength\n          )\n        )\n      } else {\n        return Promise.resolve(this._bodyArrayBuffer)\n      }\n    } else if (support.blob) {\n      return this.blob().then(readBlobAsArrayBuffer)\n    } else {\n      throw new Error('could not read as ArrayBuffer')\n    }\n  }\n\n  this.text = function() {\n    var rejected = consumed(this)\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error('could not read FormData body as text')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  }\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode)\n    }\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  }\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE']\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase()\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nexport function Request(input, options) {\n  if (!(this instanceof Request)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n\n  options = options || {}\n  var body = options.body\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError('Already read')\n    }\n    this.url = input.url\n    this.credentials = input.credentials\n    if (!options.headers) {\n      this.headers = new Headers(input.headers)\n    }\n    this.method = input.method\n    this.mode = input.mode\n    this.signal = input.signal\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit\n      input.bodyUsed = true\n    }\n  } else {\n    this.url = String(input)\n  }\n\n  this.credentials = options.credentials || this.credentials || 'same-origin'\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers)\n  }\n  this.method = normalizeMethod(options.method || this.method || 'GET')\n  this.mode = options.mode || this.mode || null\n  this.signal = options.signal || this.signal || (function () {\n    if ('AbortController' in g) {\n      var ctrl = new AbortController();\n      return ctrl.signal;\n    }\n  }());\n  this.referrer = null\n\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n    throw new TypeError('Body not allowed for GET or HEAD requests')\n  }\n  this._initBody(body)\n\n  if (this.method === 'GET' || this.method === 'HEAD') {\n    if (options.cache === 'no-store' || options.cache === 'no-cache') {\n      // Search for a '_' parameter in the query string\n      var reParamSearch = /([?&])_=[^&]*/\n      if (reParamSearch.test(this.url)) {\n        // If it already exists then set the value with the current time\n        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime())\n      } else {\n        // Otherwise add a new '_' parameter to the end with the current time\n        var reQueryString = /\\?/\n        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime()\n      }\n    }\n  }\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n}\n\nfunction decode(body) {\n  var form = new FormData()\n  body\n    .trim()\n    .split('&')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers()\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n  // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill\n  // https://github.com/github/fetch/issues/748\n  // https://github.com/zloirock/core-js/issues/751\n  preProcessedHeaders\n    .split('\\r')\n    .map(function(header) {\n      return header.indexOf('\\n') === 0 ? header.substr(1, header.length) : header\n    })\n    .forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        try {\n          headers.append(key, value)\n        } catch (error) {\n          console.warn('Response ' + error.message)\n        }\n      }\n    })\n  return headers\n}\n\nBody.call(Request.prototype)\n\nexport function Response(bodyInit, options) {\n  if (!(this instanceof Response)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n  if (!options) {\n    options = {}\n  }\n\n  this.type = 'default'\n  this.status = options.status === undefined ? 200 : options.status\n  if (this.status < 200 || this.status > 599) {\n    throw new RangeError(\"Failed to construct 'Response': The status provided (0) is outside the range [200, 599].\")\n  }\n  this.ok = this.status >= 200 && this.status < 300\n  this.statusText = options.statusText === undefined ? '' : '' + options.statusText\n  this.headers = new Headers(options.headers)\n  this.url = options.url || ''\n  this._initBody(bodyInit)\n}\n\nBody.call(Response.prototype)\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n}\n\nResponse.error = function() {\n  var response = new Response(null, {status: 200, statusText: ''})\n  response.ok = false\n  response.status = 0\n  response.type = 'error'\n  return response\n}\n\nvar redirectStatuses = [301, 302, 303, 307, 308]\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError('Invalid status code')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n}\n\nexport var DOMException = g.DOMException\ntry {\n  new DOMException()\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message\n    this.name = name\n    var error = Error(message)\n    this.stack = error.stack\n  }\n  DOMException.prototype = Object.create(Error.prototype)\n  DOMException.prototype.constructor = DOMException\n}\n\nexport function fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init)\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    var xhr = new XMLHttpRequest()\n\n    function abortXhr() {\n      xhr.abort()\n    }\n\n    xhr.onload = function() {\n      var options = {\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n      }\n      // This check if specifically for when a user fetches a file locally from the file system\n      // Only if the status is out of a normal range\n      if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {\n        options.status = 200;\n      } else {\n        options.status = xhr.status;\n      }\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n      var body = 'response' in xhr ? xhr.response : xhr.responseText\n      setTimeout(function() {\n        resolve(new Response(body, options))\n      }, 0)\n    }\n\n    xhr.onerror = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.ontimeout = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request timed out'))\n      }, 0)\n    }\n\n    xhr.onabort = function() {\n      setTimeout(function() {\n        reject(new DOMException('Aborted', 'AbortError'))\n      }, 0)\n    }\n\n    function fixUrl(url) {\n      try {\n        return url === '' && g.location.href ? g.location.href : url\n      } catch (e) {\n        return url\n      }\n    }\n\n    xhr.open(request.method, fixUrl(request.url), true)\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    if ('responseType' in xhr) {\n      if (support.blob) {\n        xhr.responseType = 'blob'\n      } else if (\n        support.arrayBuffer\n      ) {\n        xhr.responseType = 'arraybuffer'\n      }\n    }\n\n    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || (g.Headers && init.headers instanceof g.Headers))) {\n      var names = [];\n      Object.getOwnPropertyNames(init.headers).forEach(function(name) {\n        names.push(normalizeName(name))\n        xhr.setRequestHeader(name, normalizeValue(init.headers[name]))\n      })\n      request.headers.forEach(function(value, name) {\n        if (names.indexOf(name) === -1) {\n          xhr.setRequestHeader(name, value)\n        }\n      })\n    } else {\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n    }\n\n    if (request.signal) {\n      request.signal.addEventListener('abort', abortXhr)\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener('abort', abortXhr)\n        }\n      }\n    }\n\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n  })\n}\n\nfetch.polyfill = true\n\nif (!g.fetch) {\n  g.fetch = fetch\n  g.Headers = Headers\n  g.Request = Request\n  g.Response = Response\n}\n","// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\nrequire('whatwg-fetch');\nmodule.exports = self.fetch.bind(self);\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();\n  else if (typeof define === 'function' && define.amd) define(definition);\n  else context[name] = definition();\n})('urljoin', this, function () {\n\n  function normalize (strArray) {\n    var resultArray = [];\n    if (strArray.length === 0) { return ''; }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    }\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') { continue; }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n\n    }\n\n    var str = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n\n});\n","//! moment.js\n//! version : 2.30.1\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, (function () { 'use strict';\n\n    var hookCallback;\n\n    function hooks() {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback(callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return (\n            input instanceof Array ||\n            Object.prototype.toString.call(input) === '[object Array]'\n        );\n    }\n\n    function isObject(input) {\n        // IE8 will treat undefined and null as object if it wasn't for\n        // input != null\n        return (\n            input != null &&\n            Object.prototype.toString.call(input) === '[object Object]'\n        );\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function isObjectEmpty(obj) {\n        if (Object.getOwnPropertyNames) {\n            return Object.getOwnPropertyNames(obj).length === 0;\n        } else {\n            var k;\n            for (k in obj) {\n                if (hasOwnProp(obj, k)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    function isNumber(input) {\n        return (\n            typeof input === 'number' ||\n            Object.prototype.toString.call(input) === '[object Number]'\n        );\n    }\n\n    function isDate(input) {\n        return (\n            input instanceof Date ||\n            Object.prototype.toString.call(input) === '[object Date]'\n        );\n    }\n\n    function map(arr, fn) {\n        var res = [],\n            i,\n            arrLen = arr.length;\n        for (i = 0; i < arrLen; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function createUTC(input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty: false,\n            unusedTokens: [],\n            unusedInput: [],\n            overflow: -2,\n            charsLeftOver: 0,\n            nullInput: false,\n            invalidEra: null,\n            invalidMonth: null,\n            invalidFormat: false,\n            userInvalidated: false,\n            iso: false,\n            parsedDateParts: [],\n            era: null,\n            meridiem: null,\n            rfc2822: false,\n            weekdayMismatch: false,\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this),\n                len = t.length >>> 0,\n                i;\n\n            for (i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function isValid(m) {\n        var flags = null,\n            parsedParts = false,\n            isNowValid = m._d && !isNaN(m._d.getTime());\n        if (isNowValid) {\n            flags = getParsingFlags(m);\n            parsedParts = some.call(flags.parsedDateParts, function (i) {\n                return i != null;\n            });\n            isNowValid =\n                flags.overflow < 0 &&\n                !flags.empty &&\n                !flags.invalidEra &&\n                !flags.invalidMonth &&\n                !flags.invalidWeekday &&\n                !flags.weekdayMismatch &&\n                !flags.nullInput &&\n                !flags.invalidFormat &&\n                !flags.userInvalidated &&\n                (!flags.meridiem || (flags.meridiem && parsedParts));\n            if (m._strict) {\n                isNowValid =\n                    isNowValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n        }\n        if (Object.isFrozen == null || !Object.isFrozen(m)) {\n            m._isValid = isNowValid;\n        } else {\n            return isNowValid;\n        }\n        return m._isValid;\n    }\n\n    function createInvalid(flags) {\n        var m = createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        } else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = (hooks.momentProperties = []),\n        updateInProgress = false;\n\n    function copyConfig(to, from) {\n        var i,\n            prop,\n            val,\n            momentPropertiesLen = momentProperties.length;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentPropertiesLen > 0) {\n            for (i = 0; i < momentPropertiesLen; i++) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        if (!this.isValid()) {\n            this._d = new Date(NaN);\n        }\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment(obj) {\n        return (\n            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)\n        );\n    }\n\n    function warn(msg) {\n        if (\n            hooks.suppressDeprecationWarnings === false &&\n            typeof console !== 'undefined' &&\n            console.warn\n        ) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (hooks.deprecationHandler != null) {\n                hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                var args = [],\n                    arg,\n                    i,\n                    key,\n                    argLen = arguments.length;\n                for (i = 0; i < argLen; i++) {\n                    arg = '';\n                    if (typeof arguments[i] === 'object') {\n                        arg += '\\n[' + i + '] ';\n                        for (key in arguments[0]) {\n                            if (hasOwnProp(arguments[0], key)) {\n                                arg += key + ': ' + arguments[0][key] + ', ';\n                            }\n                        }\n                        arg = arg.slice(0, -2); // Remove trailing comma and space\n                    } else {\n                        arg = arguments[i];\n                    }\n                    args.push(arg);\n                }\n                warn(\n                    msg +\n                        '\\nArguments: ' +\n                        Array.prototype.slice.call(args).join('') +\n                        '\\n' +\n                        new Error().stack\n                );\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (hooks.deprecationHandler != null) {\n            hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    hooks.suppressDeprecationWarnings = false;\n    hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return (\n            (typeof Function !== 'undefined' && input instanceof Function) ||\n            Object.prototype.toString.call(input) === '[object Function]'\n        );\n    }\n\n    function set(config) {\n        var prop, i;\n        for (i in config) {\n            if (hasOwnProp(config, i)) {\n                prop = config[i];\n                if (isFunction(prop)) {\n                    this[i] = prop;\n                } else {\n                    this['_' + i] = prop;\n                }\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        this._dayOfMonthOrdinalParseLenient = new RegExp(\n            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +\n                '|' +\n                /\\d{1,2}/.source\n        );\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig),\n            prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (\n                hasOwnProp(parentConfig, prop) &&\n                !hasOwnProp(childConfig, prop) &&\n                isObject(parentConfig[prop])\n            ) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i,\n                res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay: '[Today at] LT',\n        nextDay: '[Tomorrow at] LT',\n        nextWeek: 'dddd [at] LT',\n        lastDay: '[Yesterday at] LT',\n        lastWeek: '[Last] dddd [at] LT',\n        sameElse: 'L',\n    };\n\n    function calendar(key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (\n            (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +\n            absNumber\n        );\n    }\n\n    var formattingTokens =\n            /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,\n        localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g,\n        formatFunctions = {},\n        formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken(token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(\n                    func.apply(this, arguments),\n                    token\n                );\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens),\n            i,\n            length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '',\n                i;\n            for (i = 0; i < length; i++) {\n                output += isFunction(array[i])\n                    ? array[i].call(mom, format)\n                    : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] =\n            formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(\n                localFormattingTokens,\n                replaceLongDateFormatTokens\n            );\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var defaultLongDateFormat = {\n        LTS: 'h:mm:ss A',\n        LT: 'h:mm A',\n        L: 'MM/DD/YYYY',\n        LL: 'MMMM D, YYYY',\n        LLL: 'MMMM D, YYYY h:mm A',\n        LLLL: 'dddd, MMMM D, YYYY h:mm A',\n    };\n\n    function longDateFormat(key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper\n            .match(formattingTokens)\n            .map(function (tok) {\n                if (\n                    tok === 'MMMM' ||\n                    tok === 'MM' ||\n                    tok === 'DD' ||\n                    tok === 'dddd'\n                ) {\n                    return tok.slice(1);\n                }\n                return tok;\n            })\n            .join('');\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate() {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d',\n        defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n\n    function ordinal(number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future: 'in %s',\n        past: '%s ago',\n        s: 'a few seconds',\n        ss: '%d seconds',\n        m: 'a minute',\n        mm: '%d minutes',\n        h: 'an hour',\n        hh: '%d hours',\n        d: 'a day',\n        dd: '%d days',\n        w: 'a week',\n        ww: '%d weeks',\n        M: 'a month',\n        MM: '%d months',\n        y: 'a year',\n        yy: '%d years',\n    };\n\n    function relativeTime(number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return isFunction(output)\n            ? output(number, withoutSuffix, string, isFuture)\n            : output.replace(/%d/i, number);\n    }\n\n    function pastFuture(diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {\n        D: 'date',\n        dates: 'date',\n        date: 'date',\n        d: 'day',\n        days: 'day',\n        day: 'day',\n        e: 'weekday',\n        weekdays: 'weekday',\n        weekday: 'weekday',\n        E: 'isoWeekday',\n        isoweekdays: 'isoWeekday',\n        isoweekday: 'isoWeekday',\n        DDD: 'dayOfYear',\n        dayofyears: 'dayOfYear',\n        dayofyear: 'dayOfYear',\n        h: 'hour',\n        hours: 'hour',\n        hour: 'hour',\n        ms: 'millisecond',\n        milliseconds: 'millisecond',\n        millisecond: 'millisecond',\n        m: 'minute',\n        minutes: 'minute',\n        minute: 'minute',\n        M: 'month',\n        months: 'month',\n        month: 'month',\n        Q: 'quarter',\n        quarters: 'quarter',\n        quarter: 'quarter',\n        s: 'second',\n        seconds: 'second',\n        second: 'second',\n        gg: 'weekYear',\n        weekyears: 'weekYear',\n        weekyear: 'weekYear',\n        GG: 'isoWeekYear',\n        isoweekyears: 'isoWeekYear',\n        isoweekyear: 'isoWeekYear',\n        w: 'week',\n        weeks: 'week',\n        week: 'week',\n        W: 'isoWeek',\n        isoweeks: 'isoWeek',\n        isoweek: 'isoWeek',\n        y: 'year',\n        years: 'year',\n        year: 'year',\n    };\n\n    function normalizeUnits(units) {\n        return typeof units === 'string'\n            ? aliases[units] || aliases[units.toLowerCase()]\n            : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {\n        date: 9,\n        day: 11,\n        weekday: 11,\n        isoWeekday: 11,\n        dayOfYear: 4,\n        hour: 13,\n        millisecond: 16,\n        minute: 14,\n        month: 8,\n        quarter: 7,\n        second: 15,\n        weekYear: 1,\n        isoWeekYear: 1,\n        week: 5,\n        isoWeek: 5,\n        year: 1,\n    };\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [],\n            u;\n        for (u in unitsObj) {\n            if (hasOwnProp(unitsObj, u)) {\n                units.push({ unit: u, priority: priorities[u] });\n            }\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    var match1 = /\\d/, //       0 - 9\n        match2 = /\\d\\d/, //      00 - 99\n        match3 = /\\d{3}/, //     000 - 999\n        match4 = /\\d{4}/, //    0000 - 9999\n        match6 = /[+-]?\\d{6}/, // -999999 - 999999\n        match1to2 = /\\d\\d?/, //       0 - 99\n        match3to4 = /\\d\\d\\d\\d?/, //     999 - 9999\n        match5to6 = /\\d\\d\\d\\d\\d\\d?/, //   99999 - 999999\n        match1to3 = /\\d{1,3}/, //       0 - 999\n        match1to4 = /\\d{1,4}/, //       0 - 9999\n        match1to6 = /[+-]?\\d{1,6}/, // -999999 - 999999\n        matchUnsigned = /\\d+/, //       0 - inf\n        matchSigned = /[+-]?\\d+/, //    -inf - inf\n        matchOffset = /Z|[+-]\\d\\d:?\\d\\d/gi, // +00:00 -00:00 +0000 -0000 or Z\n        matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n        matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/, // 123456789 123456789.123\n        // any word (or two) characters or numbers including two/three word month in arabic.\n        // includes scottish gaelic two word and hyphenated months\n        matchWord =\n            /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i,\n        match1to2NoLeadingZero = /^[1-9]\\d?/, //         1-99\n        match1to2HasZero = /^([1-9]\\d|\\d)/, //           0-99\n        regexes;\n\n    regexes = {};\n\n    function addRegexToken(token, regex, strictRegex) {\n        regexes[token] = isFunction(regex)\n            ? regex\n            : function (isStrict, localeData) {\n                  return isStrict && strictRegex ? strictRegex : regex;\n              };\n    }\n\n    function getParseRegexForToken(token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(\n            s\n                .replace('\\\\', '')\n                .replace(\n                    /\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g,\n                    function (matched, p1, p2, p3, p4) {\n                        return p1 || p2 || p3 || p4;\n                    }\n                )\n        );\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    function absFloor(number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    var tokens = {};\n\n    function addParseToken(token, callback) {\n        var i,\n            func = callback,\n            tokenLen;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (isNumber(callback)) {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        tokenLen = token.length;\n        for (i = 0; i < tokenLen; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken(token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    var YEAR = 0,\n        MONTH = 1,\n        DATE = 2,\n        HOUR = 3,\n        MINUTE = 4,\n        SECOND = 5,\n        MILLISECOND = 6,\n        WEEK = 7,\n        WEEKDAY = 8;\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? zeroFill(y, 4) : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY', 4], 0, 'year');\n    addFormatToken(0, ['YYYYY', 5], 0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // PARSING\n\n    addRegexToken('Y', matchSigned);\n    addRegexToken('YY', match1to2, match2);\n    addRegexToken('YYYY', match1to4, match4);\n    addRegexToken('YYYYY', match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] =\n            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    // HOOKS\n\n    hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear() {\n        return isLeapYear(this.year());\n    }\n\n    function makeGetSet(unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                set$1(this, unit, value);\n                hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get(this, unit);\n            }\n        };\n    }\n\n    function get(mom, unit) {\n        if (!mom.isValid()) {\n            return NaN;\n        }\n\n        var d = mom._d,\n            isUTC = mom._isUTC;\n\n        switch (unit) {\n            case 'Milliseconds':\n                return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();\n            case 'Seconds':\n                return isUTC ? d.getUTCSeconds() : d.getSeconds();\n            case 'Minutes':\n                return isUTC ? d.getUTCMinutes() : d.getMinutes();\n            case 'Hours':\n                return isUTC ? d.getUTCHours() : d.getHours();\n            case 'Date':\n                return isUTC ? d.getUTCDate() : d.getDate();\n            case 'Day':\n                return isUTC ? d.getUTCDay() : d.getDay();\n            case 'Month':\n                return isUTC ? d.getUTCMonth() : d.getMonth();\n            case 'FullYear':\n                return isUTC ? d.getUTCFullYear() : d.getFullYear();\n            default:\n                return NaN; // Just in case\n        }\n    }\n\n    function set$1(mom, unit, value) {\n        var d, isUTC, year, month, date;\n\n        if (!mom.isValid() || isNaN(value)) {\n            return;\n        }\n\n        d = mom._d;\n        isUTC = mom._isUTC;\n\n        switch (unit) {\n            case 'Milliseconds':\n                return void (isUTC\n                    ? d.setUTCMilliseconds(value)\n                    : d.setMilliseconds(value));\n            case 'Seconds':\n                return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));\n            case 'Minutes':\n                return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));\n            case 'Hours':\n                return void (isUTC ? d.setUTCHours(value) : d.setHours(value));\n            case 'Date':\n                return void (isUTC ? d.setUTCDate(value) : d.setDate(value));\n            // case 'Day': // Not real\n            //    return void (isUTC ? d.setUTCDay(value) : d.setDay(value));\n            // case 'Month': // Not used because we need to pass two variables\n            //     return void (isUTC ? d.setUTCMonth(value) : d.setMonth(value));\n            case 'FullYear':\n                break; // See below ...\n            default:\n                return; // Just in case\n        }\n\n        year = value;\n        month = mom.month();\n        date = mom.date();\n        date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;\n        void (isUTC\n            ? d.setUTCFullYear(year, month, date)\n            : d.setFullYear(year, month, date));\n    }\n\n    // MOMENTS\n\n    function stringGet(units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n    function stringSet(units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units),\n                i,\n                prioritizedLen = prioritized.length;\n            for (i = 0; i < prioritizedLen; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    function mod(n, x) {\n        return ((n % x) + x) % x;\n    }\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        if (isNaN(year) || isNaN(month)) {\n            return NaN;\n        }\n        var modMonth = mod(month, 12);\n        year += (month - modMonth) / 12;\n        return modMonth === 1\n            ? isLeapYear(year)\n                ? 29\n                : 28\n            : 31 - ((modMonth % 7) % 2);\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // PARSING\n\n    addRegexToken('M', match1to2, match1to2NoLeadingZero);\n    addRegexToken('MM', match1to2, match2);\n    addRegexToken('MMM', function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var defaultLocaleMonths =\n            'January_February_March_April_May_June_July_August_September_October_November_December'.split(\n                '_'\n            ),\n        defaultLocaleMonthsShort =\n            'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),\n        MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/,\n        defaultMonthsShortRegex = matchWord,\n        defaultMonthsRegex = matchWord;\n\n    function localeMonths(m, format) {\n        if (!m) {\n            return isArray(this._months)\n                ? this._months\n                : this._months['standalone'];\n        }\n        return isArray(this._months)\n            ? this._months[m.month()]\n            : this._months[\n                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)\n                      ? 'format'\n                      : 'standalone'\n              ][m.month()];\n    }\n\n    function localeMonthsShort(m, format) {\n        if (!m) {\n            return isArray(this._monthsShort)\n                ? this._monthsShort\n                : this._monthsShort['standalone'];\n        }\n        return isArray(this._monthsShort)\n            ? this._monthsShort[m.month()]\n            : this._monthsShort[\n                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'\n              ][m.month()];\n    }\n\n    function handleStrictParse(monthName, format, strict) {\n        var i,\n            ii,\n            mom,\n            llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse(monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp(\n                    '^' + this.months(mom, '').replace('.', '') + '$',\n                    'i'\n                );\n                this._shortMonthsParse[i] = new RegExp(\n                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',\n                    'i'\n                );\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex =\n                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (\n                strict &&\n                format === 'MMMM' &&\n                this._longMonthsParse[i].test(monthName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'MMM' &&\n                this._shortMonthsParse[i].test(monthName)\n            ) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth(mom, value) {\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (!isNumber(value)) {\n                    return mom;\n                }\n            }\n        }\n\n        var month = value,\n            date = mom.date();\n\n        date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));\n        void (mom._isUTC\n            ? mom._d.setUTCMonth(month, date)\n            : mom._d.setMonth(month, date));\n        return mom;\n    }\n\n    function getSetMonth(value) {\n        if (value != null) {\n            setMonth(this, value);\n            hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth() {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    function monthsShortRegex(isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict\n                ? this._monthsShortStrictRegex\n                : this._monthsShortRegex;\n        }\n    }\n\n    function monthsRegex(isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict\n                ? this._monthsStrictRegex\n                : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse() {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [],\n            longPieces = [],\n            mixedPieces = [],\n            i,\n            mom,\n            shortP,\n            longP;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            shortP = regexEscape(this.monthsShort(mom, ''));\n            longP = regexEscape(this.months(mom, ''));\n            shortPieces.push(shortP);\n            longPieces.push(longP);\n            mixedPieces.push(longP);\n            mixedPieces.push(shortP);\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp(\n            '^(' + longPieces.join('|') + ')',\n            'i'\n        );\n        this._monthsShortStrictRegex = new RegExp(\n            '^(' + shortPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    function createDate(y, m, d, h, M, s, ms) {\n        // can't just apply() to create a date:\n        // https://stackoverflow.com/q/181348\n        var date;\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            date = new Date(y + 400, m, d, h, M, s, ms);\n            if (isFinite(date.getFullYear())) {\n                date.setFullYear(y);\n            }\n        } else {\n            date = new Date(y, m, d, h, M, s, ms);\n        }\n\n        return date;\n    }\n\n    function createUTCDate(y) {\n        var date, args;\n        // the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            args = Array.prototype.slice.call(arguments);\n            // preserve leap years using a full 400 year cycle, then reset\n            args[0] = y + 400;\n            date = new Date(Date.UTC.apply(null, args));\n            if (isFinite(date.getUTCFullYear())) {\n                date.setUTCFullYear(y);\n            }\n        } else {\n            date = new Date(Date.UTC.apply(null, arguments));\n        }\n\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear,\n            resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear,\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek,\n            resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear,\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // PARSING\n\n    addRegexToken('w', match1to2, match1to2NoLeadingZero);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W', match1to2, match1to2NoLeadingZero);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(\n        ['w', 'ww', 'W', 'WW'],\n        function (input, week, config, token) {\n            week[token.substr(0, 1)] = toInt(input);\n        }\n    );\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek(mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow: 0, // Sunday is the first day of the week.\n        doy: 6, // The week that contains Jan 6th is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek() {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear() {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek(input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek(input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // PARSING\n\n    addRegexToken('d', match1to2);\n    addRegexToken('e', match1to2);\n    addRegexToken('E', match1to2);\n    addRegexToken('dd', function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd', function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd', function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n    function shiftWeekdays(ws, n) {\n        return ws.slice(n, 7).concat(ws.slice(0, n));\n    }\n\n    var defaultLocaleWeekdays =\n            'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),\n        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\n        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),\n        defaultWeekdaysRegex = matchWord,\n        defaultWeekdaysShortRegex = matchWord,\n        defaultWeekdaysMinRegex = matchWord;\n\n    function localeWeekdays(m, format) {\n        var weekdays = isArray(this._weekdays)\n            ? this._weekdays\n            : this._weekdays[\n                  m && m !== true && this._weekdays.isFormat.test(format)\n                      ? 'format'\n                      : 'standalone'\n              ];\n        return m === true\n            ? shiftWeekdays(weekdays, this._week.dow)\n            : m\n              ? weekdays[m.day()]\n              : weekdays;\n    }\n\n    function localeWeekdaysShort(m) {\n        return m === true\n            ? shiftWeekdays(this._weekdaysShort, this._week.dow)\n            : m\n              ? this._weekdaysShort[m.day()]\n              : this._weekdaysShort;\n    }\n\n    function localeWeekdaysMin(m) {\n        return m === true\n            ? shiftWeekdays(this._weekdaysMin, this._week.dow)\n            : m\n              ? this._weekdaysMin[m.day()]\n              : this._weekdaysMin;\n    }\n\n    function handleStrictParse$1(weekdayName, format, strict) {\n        var i,\n            ii,\n            mom,\n            llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(\n                    mom,\n                    ''\n                ).toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse(weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return handleStrictParse$1.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdays(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n                this._shortWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdaysShort(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n                this._minWeekdaysParse[i] = new RegExp(\n                    '^' + this.weekdaysMin(mom, '').replace('.', '\\\\.?') + '$',\n                    'i'\n                );\n            }\n            if (!this._weekdaysParse[i]) {\n                regex =\n                    '^' +\n                    this.weekdays(mom, '') +\n                    '|^' +\n                    this.weekdaysShort(mom, '') +\n                    '|^' +\n                    this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (\n                strict &&\n                format === 'dddd' &&\n                this._fullWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'ddd' &&\n                this._shortWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (\n                strict &&\n                format === 'dd' &&\n                this._minWeekdaysParse[i].test(weekdayName)\n            ) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        var day = get(this, 'Day');\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek(input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    function weekdaysRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict\n                ? this._weekdaysStrictRegex\n                : this._weekdaysRegex;\n        }\n    }\n\n    function weekdaysShortRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict\n                ? this._weekdaysShortStrictRegex\n                : this._weekdaysShortRegex;\n        }\n    }\n\n    function weekdaysMinRegex(isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict\n                ? this._weekdaysMinStrictRegex\n                : this._weekdaysMinRegex;\n        }\n    }\n\n    function computeWeekdaysParse() {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [],\n            shortPieces = [],\n            longPieces = [],\n            mixedPieces = [],\n            i,\n            mom,\n            minp,\n            shortp,\n            longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, 1]).day(i);\n            minp = regexEscape(this.weekdaysMin(mom, ''));\n            shortp = regexEscape(this.weekdaysShort(mom, ''));\n            longp = regexEscape(this.weekdays(mom, ''));\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp(\n            '^(' + longPieces.join('|') + ')',\n            'i'\n        );\n        this._weekdaysShortStrictRegex = new RegExp(\n            '^(' + shortPieces.join('|') + ')',\n            'i'\n        );\n        this._weekdaysMinStrictRegex = new RegExp(\n            '^(' + minPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return (\n            '' +\n            hFormat.apply(this) +\n            zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2)\n        );\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return (\n            '' +\n            this.hours() +\n            zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2)\n        );\n    });\n\n    function meridiem(token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(\n                this.hours(),\n                this.minutes(),\n                lowercase\n            );\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // PARSING\n\n    function matchMeridiem(isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a', matchMeridiem);\n    addRegexToken('A', matchMeridiem);\n    addRegexToken('H', match1to2, match1to2HasZero);\n    addRegexToken('h', match1to2, match1to2NoLeadingZero);\n    addRegexToken('k', match1to2, match1to2NoLeadingZero);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n    addRegexToken('kk', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['k', 'kk'], function (input, array, config) {\n        var kInput = toInt(input);\n        array[HOUR] = kInput === 24 ? 0 : kInput;\n    });\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4,\n            pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4,\n            pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM(input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return (input + '').toLowerCase().charAt(0) === 'p';\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i,\n        // Setting the hour should keep the time, because the user explicitly\n        // specified which hour they want. So trying to maintain the same hour (in\n        // a new timezone) makes sense. Adding/subtracting hours does not follow\n        // this rule.\n        getSetHour = makeGetSet('Hours', true);\n\n    function localeMeridiem(hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse,\n    };\n\n    // internal storage for locale config files\n    var locales = {},\n        localeFamilies = {},\n        globalLocale;\n\n    function commonPrefix(arr1, arr2) {\n        var i,\n            minl = Math.min(arr1.length, arr2.length);\n        for (i = 0; i < minl; i += 1) {\n            if (arr1[i] !== arr2[i]) {\n                return i;\n            }\n        }\n        return minl;\n    }\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0,\n            j,\n            next,\n            locale,\n            split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (\n                    next &&\n                    next.length >= j &&\n                    commonPrefix(split, next) >= j - 1\n                ) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return globalLocale;\n    }\n\n    function isLocaleNameSane(name) {\n        // Prevent names that look like filesystem paths, i.e contain '/' or '\\'\n        // Ensure name is available and function returns boolean\n        return !!(name && name.match('^[^/\\\\\\\\]*$'));\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null,\n            aliasedRequire;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (\n            locales[name] === undefined &&\n            typeof module !== 'undefined' &&\n            module &&\n            module.exports &&\n            isLocaleNameSane(name)\n        ) {\n            try {\n                oldLocale = globalLocale._abbr;\n                aliasedRequire = require;\n                aliasedRequire('./locale/' + name);\n                getSetGlobalLocale(oldLocale);\n            } catch (e) {\n                // mark as not found to avoid repeating expensive file require call causing high CPU\n                // when trying to find en-US, en_US, en-us for every format call\n                locales[name] = null; // null means not found\n            }\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function getSetGlobalLocale(key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = getLocale(key);\n            } else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            } else {\n                if (typeof console !== 'undefined' && console.warn) {\n                    //warn user if arguments are passed but the locale could not be set\n                    console.warn(\n                        'Locale ' + key + ' not found. Did you forget to load it?'\n                    );\n                }\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale(name, config) {\n        if (config !== null) {\n            var locale,\n                parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple(\n                    'defineLocaleOverride',\n                    'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'\n                );\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    locale = loadLocale(config.parentLocale);\n                    if (locale != null) {\n                        parentConfig = locale._config;\n                    } else {\n                        if (!localeFamilies[config.parentLocale]) {\n                            localeFamilies[config.parentLocale] = [];\n                        }\n                        localeFamilies[config.parentLocale].push({\n                            name: name,\n                            config: config,\n                        });\n                        return null;\n                    }\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            if (localeFamilies[name]) {\n                localeFamilies[name].forEach(function (x) {\n                    defineLocale(x.name, x.config);\n                });\n            }\n\n            // backwards compat for now: also set the locale\n            // make sure we set the locale AFTER all child locales have been\n            // created, so we won't end up with the child locale set.\n            getSetGlobalLocale(name);\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale,\n                tmpLocale,\n                parentConfig = baseConfig;\n\n            if (locales[name] != null && locales[name].parentLocale != null) {\n                // Update existing child locale in-place to avoid memory-leaks\n                locales[name].set(mergeConfigs(locales[name]._config, config));\n            } else {\n                // MERGE\n                tmpLocale = loadLocale(name);\n                if (tmpLocale != null) {\n                    parentConfig = tmpLocale._config;\n                }\n                config = mergeConfigs(parentConfig, config);\n                if (tmpLocale == null) {\n                    // updateLocale is called for creating a new locale\n                    // Set abbr so it will have a name (getters return\n                    // undefined otherwise).\n                    config.abbr = name;\n                }\n                locale = new Locale(config);\n                locale.parentLocale = locales[name];\n                locales[name] = locale;\n            }\n\n            // backwards compat for now: also set the locale\n            getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                    if (name === getSetGlobalLocale()) {\n                        getSetGlobalLocale(name);\n                    }\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function getLocale(key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow(m) {\n        var overflow,\n            a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH] < 0 || a[MONTH] > 11\n                    ? MONTH\n                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])\n                      ? DATE\n                      : a[HOUR] < 0 ||\n                          a[HOUR] > 24 ||\n                          (a[HOUR] === 24 &&\n                              (a[MINUTE] !== 0 ||\n                                  a[SECOND] !== 0 ||\n                                  a[MILLISECOND] !== 0))\n                        ? HOUR\n                        : a[MINUTE] < 0 || a[MINUTE] > 59\n                          ? MINUTE\n                          : a[SECOND] < 0 || a[SECOND] > 59\n                            ? SECOND\n                            : a[MILLISECOND] < 0 || a[MILLISECOND] > 999\n                              ? MILLISECOND\n                              : -1;\n\n            if (\n                getParsingFlags(m)._overflowDayOfYear &&\n                (overflow < YEAR || overflow > DATE)\n            ) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex =\n            /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n        basicIsoRegex =\n            /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d|))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([+-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n        tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/,\n        isoDates = [\n            ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n            ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n            ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n            ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n            ['YYYY-DDD', /\\d{4}-\\d{3}/],\n            ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n            ['YYYYYYMMDD', /[+-]\\d{10}/],\n            ['YYYYMMDD', /\\d{8}/],\n            ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n            ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n            ['YYYYDDD', /\\d{7}/],\n            ['YYYYMM', /\\d{6}/, false],\n            ['YYYY', /\\d{4}/, false],\n        ],\n        // iso time formats and regexes\n        isoTimes = [\n            ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n            ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n            ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n            ['HH:mm', /\\d\\d:\\d\\d/],\n            ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n            ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n            ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n            ['HHmm', /\\d\\d\\d\\d/],\n            ['HH', /\\d\\d/],\n        ],\n        aspNetJsonRegex = /^\\/?Date\\((-?\\d+)/i,\n        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n        rfc2822 =\n            /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/,\n        obsOffsets = {\n            UT: 0,\n            GMT: 0,\n            EDT: -4 * 60,\n            EST: -5 * 60,\n            CDT: -5 * 60,\n            CST: -6 * 60,\n            MDT: -6 * 60,\n            MST: -7 * 60,\n            PDT: -7 * 60,\n            PST: -8 * 60,\n        };\n\n    // date from iso format\n    function configFromISO(config) {\n        var i,\n            l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime,\n            dateFormat,\n            timeFormat,\n            tzFormat,\n            isoDatesLen = isoDates.length,\n            isoTimesLen = isoTimes.length;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n            for (i = 0, l = isoDatesLen; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimesLen; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    function extractFromRFC2822Strings(\n        yearStr,\n        monthStr,\n        dayStr,\n        hourStr,\n        minuteStr,\n        secondStr\n    ) {\n        var result = [\n            untruncateYear(yearStr),\n            defaultLocaleMonthsShort.indexOf(monthStr),\n            parseInt(dayStr, 10),\n            parseInt(hourStr, 10),\n            parseInt(minuteStr, 10),\n        ];\n\n        if (secondStr) {\n            result.push(parseInt(secondStr, 10));\n        }\n\n        return result;\n    }\n\n    function untruncateYear(yearStr) {\n        var year = parseInt(yearStr, 10);\n        if (year <= 49) {\n            return 2000 + year;\n        } else if (year <= 999) {\n            return 1900 + year;\n        }\n        return year;\n    }\n\n    function preprocessRFC2822(s) {\n        // Remove comments and folding whitespace and replace multiple-spaces with a single space\n        return s\n            .replace(/\\([^()]*\\)|[\\n\\t]/g, ' ')\n            .replace(/(\\s\\s+)/g, ' ')\n            .replace(/^\\s\\s*/, '')\n            .replace(/\\s\\s*$/, '');\n    }\n\n    function checkWeekday(weekdayStr, parsedInput, config) {\n        if (weekdayStr) {\n            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.\n            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n                weekdayActual = new Date(\n                    parsedInput[0],\n                    parsedInput[1],\n                    parsedInput[2]\n                ).getDay();\n            if (weekdayProvided !== weekdayActual) {\n                getParsingFlags(config).weekdayMismatch = true;\n                config._isValid = false;\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function calculateOffset(obsOffset, militaryOffset, numOffset) {\n        if (obsOffset) {\n            return obsOffsets[obsOffset];\n        } else if (militaryOffset) {\n            // the only allowed military tz is Z\n            return 0;\n        } else {\n            var hm = parseInt(numOffset, 10),\n                m = hm % 100,\n                h = (hm - m) / 100;\n            return h * 60 + m;\n        }\n    }\n\n    // date and time from ref 2822 format\n    function configFromRFC2822(config) {\n        var match = rfc2822.exec(preprocessRFC2822(config._i)),\n            parsedArray;\n        if (match) {\n            parsedArray = extractFromRFC2822Strings(\n                match[4],\n                match[3],\n                match[2],\n                match[5],\n                match[6],\n                match[7]\n            );\n            if (!checkWeekday(match[1], parsedArray, config)) {\n                return;\n            }\n\n            config._a = parsedArray;\n            config._tzm = calculateOffset(match[8], match[9], match[10]);\n\n            config._d = createUTCDate.apply(null, config._a);\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n            getParsingFlags(config).rfc2822 = true;\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        configFromRFC2822(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        if (config._strict) {\n            config._isValid = false;\n        } else {\n            // Final attempt, use Input Fallback\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    hooks.createFromInputFallback = deprecate(\n        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\n            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\n            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(hooks.now());\n        if (config._useUTC) {\n            return [\n                nowValue.getUTCFullYear(),\n                nowValue.getUTCMonth(),\n                nowValue.getUTCDate(),\n            ];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray(config) {\n        var i,\n            date,\n            input = [],\n            currentDate,\n            expectedWeekday,\n            yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear != null) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (\n                config._dayOfYear > daysInYear(yearToUse) ||\n                config._dayOfYear === 0\n            ) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] =\n                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (\n            config._a[HOUR] === 24 &&\n            config._a[MINUTE] === 0 &&\n            config._a[SECOND] === 0 &&\n            config._a[MILLISECOND] === 0\n        ) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(\n            null,\n            input\n        );\n        expectedWeekday = config._useUTC\n            ? config._d.getUTCDay()\n            : config._d.getDay();\n\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n\n        // check for mismatching day of week\n        if (\n            config._w &&\n            typeof config._w.d !== 'undefined' &&\n            config._w.d !== expectedWeekday\n        ) {\n            getParsingFlags(config).weekdayMismatch = true;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(\n                w.GG,\n                config._a[YEAR],\n                weekOfYear(createLocal(), 1, 4).year\n            );\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            curWeek = weekOfYear(createLocal(), dow, doy);\n\n            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n            // Default to current week.\n            week = defaults(w.w, curWeek.week);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from beginning of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to beginning of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // constant that refers to the ISO standard\n    hooks.ISO_8601 = function () {};\n\n    // constant that refers to the RFC 2822 form\n    hooks.RFC_2822 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n        if (config._f === hooks.RFC_2822) {\n            configFromRFC2822(config);\n            return;\n        }\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i,\n            parsedInput,\n            tokens,\n            token,\n            skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0,\n            era,\n            tokenLen;\n\n        tokens =\n            expandFormat(config._f, config._locale).match(formattingTokens) || [];\n        tokenLen = tokens.length;\n        for (i = 0; i < tokenLen; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) ||\n                [])[0];\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(\n                    string.indexOf(parsedInput) + parsedInput.length\n                );\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                } else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            } else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver =\n            stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (\n            config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0\n        ) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(\n            config._locale,\n            config._a[HOUR],\n            config._meridiem\n        );\n\n        // handle era\n        era = getParsingFlags(config).era;\n        if (era !== null) {\n            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);\n        }\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n    function meridiemFixWrap(locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n            scoreToBeat,\n            i,\n            currentScore,\n            validFormatFound,\n            bestFormatIsValid = false,\n            configfLen = config._f.length;\n\n        if (configfLen === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < configfLen; i++) {\n            currentScore = 0;\n            validFormatFound = false;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (isValid(tempConfig)) {\n                validFormatFound = true;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (!bestFormatIsValid) {\n                if (\n                    scoreToBeat == null ||\n                    currentScore < scoreToBeat ||\n                    validFormatFound\n                ) {\n                    scoreToBeat = currentScore;\n                    bestMoment = tempConfig;\n                    if (validFormatFound) {\n                        bestFormatIsValid = true;\n                    }\n                }\n            } else {\n                if (currentScore < scoreToBeat) {\n                    scoreToBeat = currentScore;\n                    bestMoment = tempConfig;\n                }\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i),\n            dayOrDate = i.day === undefined ? i.date : i.day;\n        config._a = map(\n            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],\n            function (obj) {\n                return obj && parseInt(obj, 10);\n            }\n        );\n\n        configFromArray(config);\n    }\n\n    function createFromConfig(config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig(config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return createInvalid({ nullInput: true });\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (format) {\n            configFromStringAndFormat(config);\n        } else {\n            configFromInput(config);\n        }\n\n        if (!isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (isUndefined(input)) {\n            config._d = new Date(hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (isObject(input)) {\n            configFromObject(config);\n        } else if (isNumber(input)) {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC(input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (format === true || format === false) {\n            strict = format;\n            format = undefined;\n        }\n\n        if (locale === true || locale === false) {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if (\n            (isObject(input) && isObjectEmpty(input)) ||\n            (isArray(input) && input.length === 0)\n        ) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function createLocal(input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n            function () {\n                var other = createLocal.apply(null, arguments);\n                if (this.isValid() && other.isValid()) {\n                    return other < this ? this : other;\n                } else {\n                    return createInvalid();\n                }\n            }\n        ),\n        prototypeMax = deprecate(\n            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n            function () {\n                var other = createLocal.apply(null, arguments);\n                if (this.isValid() && other.isValid()) {\n                    return other > this ? this : other;\n                } else {\n                    return createInvalid();\n                }\n            }\n        );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min() {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max() {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +new Date();\n    };\n\n    var ordering = [\n        'year',\n        'quarter',\n        'month',\n        'week',\n        'day',\n        'hour',\n        'minute',\n        'second',\n        'millisecond',\n    ];\n\n    function isDurationValid(m) {\n        var key,\n            unitHasDecimal = false,\n            i,\n            orderLen = ordering.length;\n        for (key in m) {\n            if (\n                hasOwnProp(m, key) &&\n                !(\n                    indexOf.call(ordering, key) !== -1 &&\n                    (m[key] == null || !isNaN(m[key]))\n                )\n            ) {\n                return false;\n            }\n        }\n\n        for (i = 0; i < orderLen; ++i) {\n            if (m[ordering[i]]) {\n                if (unitHasDecimal) {\n                    return false; // only allow non-integers for smallest unit\n                }\n                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n                    unitHasDecimal = true;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function isValid$1() {\n        return this._isValid;\n    }\n\n    function createInvalid$1() {\n        return createDuration(NaN);\n    }\n\n    function Duration(duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        this._isValid = isDurationValid(normalizedInput);\n\n        // representation for dateAddRemove\n        this._milliseconds =\n            +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days + weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months + quarters * 3 + years * 12;\n\n        this._data = {};\n\n        this._locale = getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration(obj) {\n        return obj instanceof Duration;\n    }\n\n    function absRound(number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if (\n                (dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))\n            ) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    // FORMATTING\n\n    function offset(token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset(),\n                sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return (\n                sign +\n                zeroFill(~~(offset / 60), 2) +\n                separator +\n                zeroFill(~~offset % 60, 2)\n            );\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z', matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = (string || '').match(matcher),\n            chunk,\n            parts,\n            minutes;\n\n        if (matches === null) {\n            return null;\n        }\n\n        chunk = matches[matches.length - 1] || [];\n        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff =\n                (isMoment(input) || isDate(input)\n                    ? input.valueOf()\n                    : createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return createLocal(input).local();\n        }\n    }\n\n    function getDateOffset(m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset());\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset(input, keepLocalTime, keepMinutes) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n                if (input === null) {\n                    return this;\n                }\n            } else if (Math.abs(input) < 16 && !keepMinutes) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    addSubtract(\n                        this,\n                        createDuration(input - offset, 'm'),\n                        1,\n                        false\n                    );\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone(input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC(keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal(keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset() {\n        if (this._tzm != null) {\n            this.utcOffset(this._tzm, false, true);\n        } else if (typeof this._i === 'string') {\n            var tZone = offsetFromString(matchOffset, this._i);\n            if (tZone != null) {\n                this.utcOffset(tZone);\n            } else {\n                this.utcOffset(0, true);\n            }\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset(input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime() {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted() {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {},\n            other;\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n            this._isDSTShifted =\n                this.isValid() && compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal() {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset() {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc() {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(-|\\+)?(?:(\\d*)[. ])?(\\d+):(\\d+)(?::(\\d+)(\\.\\d*)?)?$/,\n        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n        // and further modified to allow for strings containing both week and day\n        isoRegex =\n            /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n    function createDuration(input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms: input._milliseconds,\n                d: input._days,\n                M: input._months,\n            };\n        } else if (isNumber(input) || !isNaN(+input)) {\n            duration = {};\n            if (key) {\n                duration[key] = +input;\n            } else {\n                duration.milliseconds = +input;\n            }\n        } else if ((match = aspNetRegex.exec(input))) {\n            sign = match[1] === '-' ? -1 : 1;\n            duration = {\n                y: 0,\n                d: toInt(match[DATE]) * sign,\n                h: toInt(match[HOUR]) * sign,\n                m: toInt(match[MINUTE]) * sign,\n                s: toInt(match[SECOND]) * sign,\n                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match\n            };\n        } else if ((match = isoRegex.exec(input))) {\n            sign = match[1] === '-' ? -1 : 1;\n            duration = {\n                y: parseIso(match[2], sign),\n                M: parseIso(match[3], sign),\n                w: parseIso(match[4], sign),\n                d: parseIso(match[5], sign),\n                h: parseIso(match[6], sign),\n                m: parseIso(match[7], sign),\n                s: parseIso(match[8], sign),\n            };\n        } else if (duration == null) {\n            // checks for null or undefined\n            duration = {};\n        } else if (\n            typeof duration === 'object' &&\n            ('from' in duration || 'to' in duration)\n        ) {\n            diffRes = momentsDifference(\n                createLocal(duration.from),\n                createLocal(duration.to)\n            );\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        if (isDuration(input) && hasOwnProp(input, '_isValid')) {\n            ret._isValid = input._isValid;\n        }\n\n        return ret;\n    }\n\n    createDuration.fn = Duration.prototype;\n    createDuration.invalid = createInvalid$1;\n\n    function parseIso(inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {};\n\n        res.months =\n            other.month() - base.month() + (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +base.clone().add(res.months, 'M');\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return { milliseconds: 0, months: 0 };\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(\n                    name,\n                    'moment().' +\n                        name +\n                        '(period, number) is deprecated. Please use moment().' +\n                        name +\n                        '(number, period). ' +\n                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'\n                );\n                tmp = val;\n                val = period;\n                period = tmp;\n            }\n\n            dur = createDuration(val, period);\n            addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function addSubtract(mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (months) {\n            setMonth(mom, get(mom, 'Month') + months * isAdding);\n        }\n        if (days) {\n            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);\n        }\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (updateOffset) {\n            hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add = createAdder(1, 'add'),\n        subtract = createAdder(-1, 'subtract');\n\n    function isString(input) {\n        return typeof input === 'string' || input instanceof String;\n    }\n\n    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined\n    function isMomentInput(input) {\n        return (\n            isMoment(input) ||\n            isDate(input) ||\n            isString(input) ||\n            isNumber(input) ||\n            isNumberOrStringArray(input) ||\n            isMomentInputObject(input) ||\n            input === null ||\n            input === undefined\n        );\n    }\n\n    function isMomentInputObject(input) {\n        var objectTest = isObject(input) && !isObjectEmpty(input),\n            propertyTest = false,\n            properties = [\n                'years',\n                'year',\n                'y',\n                'months',\n                'month',\n                'M',\n                'days',\n                'day',\n                'd',\n                'dates',\n                'date',\n                'D',\n                'hours',\n                'hour',\n                'h',\n                'minutes',\n                'minute',\n                'm',\n                'seconds',\n                'second',\n                's',\n                'milliseconds',\n                'millisecond',\n                'ms',\n            ],\n            i,\n            property,\n            propertyLen = properties.length;\n\n        for (i = 0; i < propertyLen; i += 1) {\n            property = properties[i];\n            propertyTest = propertyTest || hasOwnProp(input, property);\n        }\n\n        return objectTest && propertyTest;\n    }\n\n    function isNumberOrStringArray(input) {\n        var arrayTest = isArray(input),\n            dataTypeTest = false;\n        if (arrayTest) {\n            dataTypeTest =\n                input.filter(function (item) {\n                    return !isNumber(item) && isString(input);\n                }).length === 0;\n        }\n        return arrayTest && dataTypeTest;\n    }\n\n    function isCalendarSpec(input) {\n        var objectTest = isObject(input) && !isObjectEmpty(input),\n            propertyTest = false,\n            properties = [\n                'sameDay',\n                'nextDay',\n                'lastDay',\n                'nextWeek',\n                'lastWeek',\n                'sameElse',\n            ],\n            i,\n            property;\n\n        for (i = 0; i < properties.length; i += 1) {\n            property = properties[i];\n            propertyTest = propertyTest || hasOwnProp(input, property);\n        }\n\n        return objectTest && propertyTest;\n    }\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6\n            ? 'sameElse'\n            : diff < -1\n              ? 'lastWeek'\n              : diff < 0\n                ? 'lastDay'\n                : diff < 1\n                  ? 'sameDay'\n                  : diff < 2\n                    ? 'nextDay'\n                    : diff < 7\n                      ? 'nextWeek'\n                      : 'sameElse';\n    }\n\n    function calendar$1(time, formats) {\n        // Support for single parameter, formats only overload to the calendar function\n        if (arguments.length === 1) {\n            if (!arguments[0]) {\n                time = undefined;\n                formats = undefined;\n            } else if (isMomentInput(arguments[0])) {\n                time = arguments[0];\n                formats = undefined;\n            } else if (isCalendarSpec(arguments[0])) {\n                formats = arguments[0];\n                time = undefined;\n            }\n        }\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = hooks.calendarFormat(this, sod) || 'sameElse',\n            output =\n                formats &&\n                (isFunction(formats[format])\n                    ? formats[format].call(this, now)\n                    : formats[format]);\n\n        return this.format(\n            output || this.localeData().calendar(format, this, createLocal(now))\n        );\n    }\n\n    function clone() {\n        return new Moment(this);\n    }\n\n    function isAfter(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween(from, to, units, inclusivity) {\n        var localFrom = isMoment(from) ? from : createLocal(from),\n            localTo = isMoment(to) ? to : createLocal(to);\n        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {\n            return false;\n        }\n        inclusivity = inclusivity || '()';\n        return (\n            (inclusivity[0] === '('\n                ? this.isAfter(localFrom, units)\n                : !this.isBefore(localFrom, units)) &&\n            (inclusivity[1] === ')'\n                ? this.isBefore(localTo, units)\n                : !this.isAfter(localTo, units))\n        );\n    }\n\n    function isSame(input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return (\n                this.clone().startOf(units).valueOf() <= inputMs &&\n                inputMs <= this.clone().endOf(units).valueOf()\n            );\n        }\n    }\n\n    function isSameOrAfter(input, units) {\n        return this.isSame(input, units) || this.isAfter(input, units);\n    }\n\n    function isSameOrBefore(input, units) {\n        return this.isSame(input, units) || this.isBefore(input, units);\n    }\n\n    function diff(input, units, asFloat) {\n        var that, zoneDelta, output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        switch (units) {\n            case 'year':\n                output = monthDiff(this, that) / 12;\n                break;\n            case 'month':\n                output = monthDiff(this, that);\n                break;\n            case 'quarter':\n                output = monthDiff(this, that) / 3;\n                break;\n            case 'second':\n                output = (this - that) / 1e3;\n                break; // 1000\n            case 'minute':\n                output = (this - that) / 6e4;\n                break; // 1000 * 60\n            case 'hour':\n                output = (this - that) / 36e5;\n                break; // 1000 * 60 * 60\n            case 'day':\n                output = (this - that - zoneDelta) / 864e5;\n                break; // 1000 * 60 * 60 * 24, negate dst\n            case 'week':\n                output = (this - that - zoneDelta) / 6048e5;\n                break; // 1000 * 60 * 60 * 24 * 7, negate dst\n            default:\n                output = this - that;\n        }\n\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff(a, b) {\n        if (a.date() < b.date()) {\n            // end-of-month calculations work correct when the start month has more\n            // days than the end month.\n            return -monthDiff(b, a);\n        }\n        // difference in months\n        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2,\n            adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString() {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function toISOString(keepOffset) {\n        if (!this.isValid()) {\n            return null;\n        }\n        var utc = keepOffset !== true,\n            m = utc ? this.clone().utc() : this;\n        if (m.year() < 0 || m.year() > 9999) {\n            return formatMoment(\n                m,\n                utc\n                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'\n                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'\n            );\n        }\n        if (isFunction(Date.prototype.toISOString)) {\n            // native implementation is ~50x faster, use it when we can\n            if (utc) {\n                return this.toDate().toISOString();\n            } else {\n                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)\n                    .toISOString()\n                    .replace('Z', formatMoment(m, 'Z'));\n            }\n        }\n        return formatMoment(\n            m,\n            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'\n        );\n    }\n\n    /**\n     * Return a human readable representation of a moment that can\n     * also be evaluated to get a new moment which is the same\n     *\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n     */\n    function inspect() {\n        if (!this.isValid()) {\n            return 'moment.invalid(/* ' + this._i + ' */)';\n        }\n        var func = 'moment',\n            zone = '',\n            prefix,\n            year,\n            datetime,\n            suffix;\n        if (!this.isLocal()) {\n            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n            zone = 'Z';\n        }\n        prefix = '[' + func + '(\"]';\n        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';\n        datetime = '-MM-DD[T]HH:mm:ss.SSS';\n        suffix = zone + '[\")]';\n\n        return this.format(prefix + year + datetime + suffix);\n    }\n\n    function format(inputString) {\n        if (!inputString) {\n            inputString = this.isUtc()\n                ? hooks.defaultFormatUtc\n                : hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from(time, withoutSuffix) {\n        if (\n            this.isValid() &&\n            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())\n        ) {\n            return createDuration({ to: this, from: time })\n                .locale(this.locale())\n                .humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow(withoutSuffix) {\n        return this.from(createLocal(), withoutSuffix);\n    }\n\n    function to(time, withoutSuffix) {\n        if (\n            this.isValid() &&\n            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())\n        ) {\n            return createDuration({ from: this, to: time })\n                .locale(this.locale())\n                .humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow(withoutSuffix) {\n        return this.to(createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale(key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData() {\n        return this._locale;\n    }\n\n    var MS_PER_SECOND = 1000,\n        MS_PER_MINUTE = 60 * MS_PER_SECOND,\n        MS_PER_HOUR = 60 * MS_PER_MINUTE,\n        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;\n\n    // actual modulo - handles negative numbers (for dates before 1970):\n    function mod$1(dividend, divisor) {\n        return ((dividend % divisor) + divisor) % divisor;\n    }\n\n    function localStartOfDate(y, m, d) {\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return new Date(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return new Date(y, m, d).valueOf();\n        }\n    }\n\n    function utcStartOfDate(y, m, d) {\n        // Date.UTC remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return Date.UTC(y, m, d);\n        }\n    }\n\n    function startOf(units) {\n        var time, startOfDate;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year(), 0, 1);\n                break;\n            case 'quarter':\n                time = startOfDate(\n                    this.year(),\n                    this.month() - (this.month() % 3),\n                    1\n                );\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month(), 1);\n                break;\n            case 'week':\n                time = startOfDate(\n                    this.year(),\n                    this.month(),\n                    this.date() - this.weekday()\n                );\n                break;\n            case 'isoWeek':\n                time = startOfDate(\n                    this.year(),\n                    this.month(),\n                    this.date() - (this.isoWeekday() - 1)\n                );\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date());\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time -= mod$1(\n                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),\n                    MS_PER_HOUR\n                );\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_MINUTE);\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_SECOND);\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function endOf(units) {\n        var time, startOfDate;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year() + 1, 0, 1) - 1;\n                break;\n            case 'quarter':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month() - (this.month() % 3) + 3,\n                        1\n                    ) - 1;\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month() + 1, 1) - 1;\n                break;\n            case 'week':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month(),\n                        this.date() - this.weekday() + 7\n                    ) - 1;\n                break;\n            case 'isoWeek':\n                time =\n                    startOfDate(\n                        this.year(),\n                        this.month(),\n                        this.date() - (this.isoWeekday() - 1) + 7\n                    ) - 1;\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time +=\n                    MS_PER_HOUR -\n                    mod$1(\n                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),\n                        MS_PER_HOUR\n                    ) -\n                    1;\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function valueOf() {\n        return this._d.valueOf() - (this._offset || 0) * 60000;\n    }\n\n    function unix() {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate() {\n        return new Date(this.valueOf());\n    }\n\n    function toArray() {\n        var m = this;\n        return [\n            m.year(),\n            m.month(),\n            m.date(),\n            m.hour(),\n            m.minute(),\n            m.second(),\n            m.millisecond(),\n        ];\n    }\n\n    function toObject() {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds(),\n        };\n    }\n\n    function toJSON() {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function isValid$2() {\n        return isValid(this);\n    }\n\n    function parsingFlags() {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt() {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict,\n        };\n    }\n\n    addFormatToken('N', 0, 0, 'eraAbbr');\n    addFormatToken('NN', 0, 0, 'eraAbbr');\n    addFormatToken('NNN', 0, 0, 'eraAbbr');\n    addFormatToken('NNNN', 0, 0, 'eraName');\n    addFormatToken('NNNNN', 0, 0, 'eraNarrow');\n\n    addFormatToken('y', ['y', 1], 'yo', 'eraYear');\n    addFormatToken('y', ['yy', 2], 0, 'eraYear');\n    addFormatToken('y', ['yyy', 3], 0, 'eraYear');\n    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');\n\n    addRegexToken('N', matchEraAbbr);\n    addRegexToken('NN', matchEraAbbr);\n    addRegexToken('NNN', matchEraAbbr);\n    addRegexToken('NNNN', matchEraName);\n    addRegexToken('NNNNN', matchEraNarrow);\n\n    addParseToken(\n        ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],\n        function (input, array, config, token) {\n            var era = config._locale.erasParse(input, token, config._strict);\n            if (era) {\n                getParsingFlags(config).era = era;\n            } else {\n                getParsingFlags(config).invalidEra = input;\n            }\n        }\n    );\n\n    addRegexToken('y', matchUnsigned);\n    addRegexToken('yy', matchUnsigned);\n    addRegexToken('yyy', matchUnsigned);\n    addRegexToken('yyyy', matchUnsigned);\n    addRegexToken('yo', matchEraYearOrdinal);\n\n    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);\n    addParseToken(['yo'], function (input, array, config, token) {\n        var match;\n        if (config._locale._eraYearOrdinalRegex) {\n            match = input.match(config._locale._eraYearOrdinalRegex);\n        }\n\n        if (config._locale.eraYearOrdinalParse) {\n            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);\n        } else {\n            array[YEAR] = parseInt(input, 10);\n        }\n    });\n\n    function localeEras(m, format) {\n        var i,\n            l,\n            date,\n            eras = this._eras || getLocale('en')._eras;\n        for (i = 0, l = eras.length; i < l; ++i) {\n            switch (typeof eras[i].since) {\n                case 'string':\n                    // truncate time\n                    date = hooks(eras[i].since).startOf('day');\n                    eras[i].since = date.valueOf();\n                    break;\n            }\n\n            switch (typeof eras[i].until) {\n                case 'undefined':\n                    eras[i].until = +Infinity;\n                    break;\n                case 'string':\n                    // truncate time\n                    date = hooks(eras[i].until).startOf('day').valueOf();\n                    eras[i].until = date.valueOf();\n                    break;\n            }\n        }\n        return eras;\n    }\n\n    function localeErasParse(eraName, format, strict) {\n        var i,\n            l,\n            eras = this.eras(),\n            name,\n            abbr,\n            narrow;\n        eraName = eraName.toUpperCase();\n\n        for (i = 0, l = eras.length; i < l; ++i) {\n            name = eras[i].name.toUpperCase();\n            abbr = eras[i].abbr.toUpperCase();\n            narrow = eras[i].narrow.toUpperCase();\n\n            if (strict) {\n                switch (format) {\n                    case 'N':\n                    case 'NN':\n                    case 'NNN':\n                        if (abbr === eraName) {\n                            return eras[i];\n                        }\n                        break;\n\n                    case 'NNNN':\n                        if (name === eraName) {\n                            return eras[i];\n                        }\n                        break;\n\n                    case 'NNNNN':\n                        if (narrow === eraName) {\n                            return eras[i];\n                        }\n                        break;\n                }\n            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {\n                return eras[i];\n            }\n        }\n    }\n\n    function localeErasConvertYear(era, year) {\n        var dir = era.since <= era.until ? +1 : -1;\n        if (year === undefined) {\n            return hooks(era.since).year();\n        } else {\n            return hooks(era.since).year() + (year - era.offset) * dir;\n        }\n    }\n\n    function getEraName() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].name;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].name;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraNarrow() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].narrow;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].narrow;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraAbbr() {\n        var i,\n            l,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (eras[i].since <= val && val <= eras[i].until) {\n                return eras[i].abbr;\n            }\n            if (eras[i].until <= val && val <= eras[i].since) {\n                return eras[i].abbr;\n            }\n        }\n\n        return '';\n    }\n\n    function getEraYear() {\n        var i,\n            l,\n            dir,\n            val,\n            eras = this.localeData().eras();\n        for (i = 0, l = eras.length; i < l; ++i) {\n            dir = eras[i].since <= eras[i].until ? +1 : -1;\n\n            // truncate time\n            val = this.clone().startOf('day').valueOf();\n\n            if (\n                (eras[i].since <= val && val <= eras[i].until) ||\n                (eras[i].until <= val && val <= eras[i].since)\n            ) {\n                return (\n                    (this.year() - hooks(eras[i].since).year()) * dir +\n                    eras[i].offset\n                );\n            }\n        }\n\n        return this.year();\n    }\n\n    function erasNameRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasNameRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasNameRegex : this._erasRegex;\n    }\n\n    function erasAbbrRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasAbbrRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasAbbrRegex : this._erasRegex;\n    }\n\n    function erasNarrowRegex(isStrict) {\n        if (!hasOwnProp(this, '_erasNarrowRegex')) {\n            computeErasParse.call(this);\n        }\n        return isStrict ? this._erasNarrowRegex : this._erasRegex;\n    }\n\n    function matchEraAbbr(isStrict, locale) {\n        return locale.erasAbbrRegex(isStrict);\n    }\n\n    function matchEraName(isStrict, locale) {\n        return locale.erasNameRegex(isStrict);\n    }\n\n    function matchEraNarrow(isStrict, locale) {\n        return locale.erasNarrowRegex(isStrict);\n    }\n\n    function matchEraYearOrdinal(isStrict, locale) {\n        return locale._eraYearOrdinalRegex || matchUnsigned;\n    }\n\n    function computeErasParse() {\n        var abbrPieces = [],\n            namePieces = [],\n            narrowPieces = [],\n            mixedPieces = [],\n            i,\n            l,\n            erasName,\n            erasAbbr,\n            erasNarrow,\n            eras = this.eras();\n\n        for (i = 0, l = eras.length; i < l; ++i) {\n            erasName = regexEscape(eras[i].name);\n            erasAbbr = regexEscape(eras[i].abbr);\n            erasNarrow = regexEscape(eras[i].narrow);\n\n            namePieces.push(erasName);\n            abbrPieces.push(erasAbbr);\n            narrowPieces.push(erasNarrow);\n            mixedPieces.push(erasName);\n            mixedPieces.push(erasAbbr);\n            mixedPieces.push(erasNarrow);\n        }\n\n        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');\n        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');\n        this._erasNarrowRegex = new RegExp(\n            '^(' + narrowPieces.join('|') + ')',\n            'i'\n        );\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken(token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg', 'weekYear');\n    addWeekYearFormatToken('ggggg', 'weekYear');\n    addWeekYearFormatToken('GGGG', 'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    // PARSING\n\n    addRegexToken('G', matchSigned);\n    addRegexToken('g', matchSigned);\n    addRegexToken('GG', match1to2, match2);\n    addRegexToken('gg', match1to2, match2);\n    addRegexToken('GGGG', match1to4, match4);\n    addRegexToken('gggg', match1to4, match4);\n    addRegexToken('GGGGG', match1to6, match6);\n    addRegexToken('ggggg', match1to6, match6);\n\n    addWeekParseToken(\n        ['gggg', 'ggggg', 'GGGG', 'GGGGG'],\n        function (input, week, config, token) {\n            week[token.substr(0, 2)] = toInt(input);\n        }\n    );\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear(input) {\n        return getSetWeekYearHelper.call(\n            this,\n            input,\n            this.week(),\n            this.weekday() + this.localeData()._week.dow,\n            this.localeData()._week.dow,\n            this.localeData()._week.doy\n        );\n    }\n\n    function getSetISOWeekYear(input) {\n        return getSetWeekYearHelper.call(\n            this,\n            input,\n            this.isoWeek(),\n            this.isoWeekday(),\n            1,\n            4\n        );\n    }\n\n    function getISOWeeksInYear() {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getISOWeeksInISOWeekYear() {\n        return weeksInYear(this.isoWeekYear(), 1, 4);\n    }\n\n    function getWeeksInYear() {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getWeeksInWeekYear() {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter(input) {\n        return input == null\n            ? Math.ceil((this.month() + 1) / 3)\n            : this.month((input - 1) * 3 + (this.month() % 3));\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // PARSING\n\n    addRegexToken('D', match1to2, match1to2NoLeadingZero);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        return isStrict\n            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse\n            : locale._dayOfMonthOrdinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0]);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // PARSING\n\n    addRegexToken('DDD', match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear(input) {\n        var dayOfYear =\n            Math.round(\n                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5\n            ) + 1;\n        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // PARSING\n\n    addRegexToken('m', match1to2, match1to2HasZero);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // PARSING\n\n    addRegexToken('s', match1to2, match1to2HasZero);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n    // PARSING\n\n    addRegexToken('S', match1to3, match1);\n    addRegexToken('SS', match1to3, match2);\n    addRegexToken('SSS', match1to3, match3);\n\n    var token, getSetMillisecond;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n\n    getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z', 0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr() {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName() {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var proto = Moment.prototype;\n\n    proto.add = add;\n    proto.calendar = calendar$1;\n    proto.clone = clone;\n    proto.diff = diff;\n    proto.endOf = endOf;\n    proto.format = format;\n    proto.from = from;\n    proto.fromNow = fromNow;\n    proto.to = to;\n    proto.toNow = toNow;\n    proto.get = stringGet;\n    proto.invalidAt = invalidAt;\n    proto.isAfter = isAfter;\n    proto.isBefore = isBefore;\n    proto.isBetween = isBetween;\n    proto.isSame = isSame;\n    proto.isSameOrAfter = isSameOrAfter;\n    proto.isSameOrBefore = isSameOrBefore;\n    proto.isValid = isValid$2;\n    proto.lang = lang;\n    proto.locale = locale;\n    proto.localeData = localeData;\n    proto.max = prototypeMax;\n    proto.min = prototypeMin;\n    proto.parsingFlags = parsingFlags;\n    proto.set = stringSet;\n    proto.startOf = startOf;\n    proto.subtract = subtract;\n    proto.toArray = toArray;\n    proto.toObject = toObject;\n    proto.toDate = toDate;\n    proto.toISOString = toISOString;\n    proto.inspect = inspect;\n    if (typeof Symbol !== 'undefined' && Symbol.for != null) {\n        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {\n            return 'Moment<' + this.format() + '>';\n        };\n    }\n    proto.toJSON = toJSON;\n    proto.toString = toString;\n    proto.unix = unix;\n    proto.valueOf = valueOf;\n    proto.creationData = creationData;\n    proto.eraName = getEraName;\n    proto.eraNarrow = getEraNarrow;\n    proto.eraAbbr = getEraAbbr;\n    proto.eraYear = getEraYear;\n    proto.year = getSetYear;\n    proto.isLeapYear = getIsLeapYear;\n    proto.weekYear = getSetWeekYear;\n    proto.isoWeekYear = getSetISOWeekYear;\n    proto.quarter = proto.quarters = getSetQuarter;\n    proto.month = getSetMonth;\n    proto.daysInMonth = getDaysInMonth;\n    proto.week = proto.weeks = getSetWeek;\n    proto.isoWeek = proto.isoWeeks = getSetISOWeek;\n    proto.weeksInYear = getWeeksInYear;\n    proto.weeksInWeekYear = getWeeksInWeekYear;\n    proto.isoWeeksInYear = getISOWeeksInYear;\n    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;\n    proto.date = getSetDayOfMonth;\n    proto.day = proto.days = getSetDayOfWeek;\n    proto.weekday = getSetLocaleDayOfWeek;\n    proto.isoWeekday = getSetISODayOfWeek;\n    proto.dayOfYear = getSetDayOfYear;\n    proto.hour = proto.hours = getSetHour;\n    proto.minute = proto.minutes = getSetMinute;\n    proto.second = proto.seconds = getSetSecond;\n    proto.millisecond = proto.milliseconds = getSetMillisecond;\n    proto.utcOffset = getSetOffset;\n    proto.utc = setOffsetToUTC;\n    proto.local = setOffsetToLocal;\n    proto.parseZone = setOffsetToParsedOffset;\n    proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    proto.isDST = isDaylightSavingTime;\n    proto.isLocal = isLocal;\n    proto.isUtcOffset = isUtcOffset;\n    proto.isUtc = isUtc;\n    proto.isUTC = isUtc;\n    proto.zoneAbbr = getZoneAbbr;\n    proto.zoneName = getZoneName;\n    proto.dates = deprecate(\n        'dates accessor is deprecated. Use date instead.',\n        getSetDayOfMonth\n    );\n    proto.months = deprecate(\n        'months accessor is deprecated. Use month instead',\n        getSetMonth\n    );\n    proto.years = deprecate(\n        'years accessor is deprecated. Use year instead',\n        getSetYear\n    );\n    proto.zone = deprecate(\n        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',\n        getSetZone\n    );\n    proto.isDSTShifted = deprecate(\n        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',\n        isDaylightSavingTimeShifted\n    );\n\n    function createUnix(input) {\n        return createLocal(input * 1000);\n    }\n\n    function createInZone() {\n        return createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat(string) {\n        return string;\n    }\n\n    var proto$1 = Locale.prototype;\n\n    proto$1.calendar = calendar;\n    proto$1.longDateFormat = longDateFormat;\n    proto$1.invalidDate = invalidDate;\n    proto$1.ordinal = ordinal;\n    proto$1.preparse = preParsePostFormat;\n    proto$1.postformat = preParsePostFormat;\n    proto$1.relativeTime = relativeTime;\n    proto$1.pastFuture = pastFuture;\n    proto$1.set = set;\n    proto$1.eras = localeEras;\n    proto$1.erasParse = localeErasParse;\n    proto$1.erasConvertYear = localeErasConvertYear;\n    proto$1.erasAbbrRegex = erasAbbrRegex;\n    proto$1.erasNameRegex = erasNameRegex;\n    proto$1.erasNarrowRegex = erasNarrowRegex;\n\n    proto$1.months = localeMonths;\n    proto$1.monthsShort = localeMonthsShort;\n    proto$1.monthsParse = localeMonthsParse;\n    proto$1.monthsRegex = monthsRegex;\n    proto$1.monthsShortRegex = monthsShortRegex;\n    proto$1.week = localeWeek;\n    proto$1.firstDayOfYear = localeFirstDayOfYear;\n    proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n\n    proto$1.weekdays = localeWeekdays;\n    proto$1.weekdaysMin = localeWeekdaysMin;\n    proto$1.weekdaysShort = localeWeekdaysShort;\n    proto$1.weekdaysParse = localeWeekdaysParse;\n\n    proto$1.weekdaysRegex = weekdaysRegex;\n    proto$1.weekdaysShortRegex = weekdaysShortRegex;\n    proto$1.weekdaysMinRegex = weekdaysMinRegex;\n\n    proto$1.isPM = localeIsPM;\n    proto$1.meridiem = localeMeridiem;\n\n    function get$1(format, index, field, setter) {\n        var locale = getLocale(),\n            utc = createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl(format, index, field) {\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return get$1(format, index, field, 'month');\n        }\n\n        var i,\n            out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = get$1(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl(localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = getLocale(),\n            shift = localeSorted ? locale._week.dow : 0,\n            i,\n            out = [];\n\n        if (index != null) {\n            return get$1(format, (index + shift) % 7, field, 'day');\n        }\n\n        for (i = 0; i < 7; i++) {\n            out[i] = get$1(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function listMonths(format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function listMonthsShort(format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function listWeekdays(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function listWeekdaysShort(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function listWeekdaysMin(localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    getSetGlobalLocale('en', {\n        eras: [\n            {\n                since: '0001-01-01',\n                until: +Infinity,\n                offset: 1,\n                name: 'Anno Domini',\n                narrow: 'AD',\n                abbr: 'AD',\n            },\n            {\n                since: '0000-12-31',\n                until: -Infinity,\n                offset: 1,\n                name: 'Before Christ',\n                narrow: 'BC',\n                abbr: 'BC',\n            },\n        ],\n        dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal: function (number) {\n            var b = number % 10,\n                output =\n                    toInt((number % 100) / 10) === 1\n                        ? 'th'\n                        : b === 1\n                          ? 'st'\n                          : b === 2\n                            ? 'nd'\n                            : b === 3\n                              ? 'rd'\n                              : 'th';\n            return number + output;\n        },\n    });\n\n    // Side effect imports\n\n    hooks.lang = deprecate(\n        'moment.lang is deprecated. Use moment.locale instead.',\n        getSetGlobalLocale\n    );\n    hooks.langData = deprecate(\n        'moment.langData is deprecated. Use moment.localeData instead.',\n        getLocale\n    );\n\n    var mathAbs = Math.abs;\n\n    function abs() {\n        var data = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days = mathAbs(this._days);\n        this._months = mathAbs(this._months);\n\n        data.milliseconds = mathAbs(data.milliseconds);\n        data.seconds = mathAbs(data.seconds);\n        data.minutes = mathAbs(data.minutes);\n        data.hours = mathAbs(data.hours);\n        data.months = mathAbs(data.months);\n        data.years = mathAbs(data.years);\n\n        return this;\n    }\n\n    function addSubtract$1(duration, input, value, direction) {\n        var other = createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days += direction * other._days;\n        duration._months += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function add$1(input, value) {\n        return addSubtract$1(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function subtract$1(input, value) {\n        return addSubtract$1(this, input, value, -1);\n    }\n\n    function absCeil(number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble() {\n        var milliseconds = this._milliseconds,\n            days = this._days,\n            months = this._months,\n            data = this._data,\n            seconds,\n            minutes,\n            hours,\n            years,\n            monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (\n            !(\n                (milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0)\n            )\n        ) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds = absFloor(milliseconds / 1000);\n        data.seconds = seconds % 60;\n\n        minutes = absFloor(seconds / 60);\n        data.minutes = minutes % 60;\n\n        hours = absFloor(minutes / 60);\n        data.hours = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days = days;\n        data.months = months;\n        data.years = years;\n\n        return this;\n    }\n\n    function daysToMonths(days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return (days * 4800) / 146097;\n    }\n\n    function monthsToDays(months) {\n        // the reverse of daysToMonths\n        return (months * 146097) / 4800;\n    }\n\n    function as(units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        var days,\n            months,\n            milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'quarter' || units === 'year') {\n            days = this._days + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            switch (units) {\n                case 'month':\n                    return months;\n                case 'quarter':\n                    return months / 3;\n                case 'year':\n                    return months / 12;\n            }\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week':\n                    return days / 7 + milliseconds / 6048e5;\n                case 'day':\n                    return days + milliseconds / 864e5;\n                case 'hour':\n                    return days * 24 + milliseconds / 36e5;\n                case 'minute':\n                    return days * 1440 + milliseconds / 6e4;\n                case 'second':\n                    return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond':\n                    return Math.floor(days * 864e5) + milliseconds;\n                default:\n                    throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    function makeAs(alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms'),\n        asSeconds = makeAs('s'),\n        asMinutes = makeAs('m'),\n        asHours = makeAs('h'),\n        asDays = makeAs('d'),\n        asWeeks = makeAs('w'),\n        asMonths = makeAs('M'),\n        asQuarters = makeAs('Q'),\n        asYears = makeAs('y'),\n        valueOf$1 = asMilliseconds;\n\n    function clone$1() {\n        return createDuration(this);\n    }\n\n    function get$2(units) {\n        units = normalizeUnits(units);\n        return this.isValid() ? this[units + 's']() : NaN;\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this.isValid() ? this._data[name] : NaN;\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds'),\n        seconds = makeGetter('seconds'),\n        minutes = makeGetter('minutes'),\n        hours = makeGetter('hours'),\n        days = makeGetter('days'),\n        months = makeGetter('months'),\n        years = makeGetter('years');\n\n    function weeks() {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round,\n        thresholds = {\n            ss: 44, // a few seconds to seconds\n            s: 45, // seconds to minute\n            m: 45, // minutes to hour\n            h: 22, // hours to day\n            d: 26, // days to month/week\n            w: null, // weeks to month\n            M: 11, // months to year\n        };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {\n        var duration = createDuration(posNegDuration).abs(),\n            seconds = round(duration.as('s')),\n            minutes = round(duration.as('m')),\n            hours = round(duration.as('h')),\n            days = round(duration.as('d')),\n            months = round(duration.as('M')),\n            weeks = round(duration.as('w')),\n            years = round(duration.as('y')),\n            a =\n                (seconds <= thresholds.ss && ['s', seconds]) ||\n                (seconds < thresholds.s && ['ss', seconds]) ||\n                (minutes <= 1 && ['m']) ||\n                (minutes < thresholds.m && ['mm', minutes]) ||\n                (hours <= 1 && ['h']) ||\n                (hours < thresholds.h && ['hh', hours]) ||\n                (days <= 1 && ['d']) ||\n                (days < thresholds.d && ['dd', days]);\n\n        if (thresholds.w != null) {\n            a =\n                a ||\n                (weeks <= 1 && ['w']) ||\n                (weeks < thresholds.w && ['ww', weeks]);\n        }\n        a = a ||\n            (months <= 1 && ['M']) ||\n            (months < thresholds.M && ['MM', months]) ||\n            (years <= 1 && ['y']) || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function getSetRelativeTimeRounding(roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof roundingFunction === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function getSetRelativeTimeThreshold(threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        if (threshold === 's') {\n            thresholds.ss = limit - 1;\n        }\n        return true;\n    }\n\n    function humanize(argWithSuffix, argThresholds) {\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var withSuffix = false,\n            th = thresholds,\n            locale,\n            output;\n\n        if (typeof argWithSuffix === 'object') {\n            argThresholds = argWithSuffix;\n            argWithSuffix = false;\n        }\n        if (typeof argWithSuffix === 'boolean') {\n            withSuffix = argWithSuffix;\n        }\n        if (typeof argThresholds === 'object') {\n            th = Object.assign({}, thresholds, argThresholds);\n            if (argThresholds.s != null && argThresholds.ss == null) {\n                th.ss = argThresholds.s - 1;\n            }\n        }\n\n        locale = this.localeData();\n        output = relativeTime$1(this, !withSuffix, th, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var abs$1 = Math.abs;\n\n    function sign(x) {\n        return (x > 0) - (x < 0) || +x;\n    }\n\n    function toISOString$1() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var seconds = abs$1(this._milliseconds) / 1000,\n            days = abs$1(this._days),\n            months = abs$1(this._months),\n            minutes,\n            hours,\n            years,\n            s,\n            total = this.asSeconds(),\n            totalSign,\n            ymSign,\n            daysSign,\n            hmsSign;\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes = absFloor(seconds / 60);\n        hours = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, '') : '';\n\n        totalSign = total < 0 ? '-' : '';\n        ymSign = sign(this._months) !== sign(total) ? '-' : '';\n        daysSign = sign(this._days) !== sign(total) ? '-' : '';\n        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';\n\n        return (\n            totalSign +\n            'P' +\n            (years ? ymSign + years + 'Y' : '') +\n            (months ? ymSign + months + 'M' : '') +\n            (days ? daysSign + days + 'D' : '') +\n            (hours || minutes || seconds ? 'T' : '') +\n            (hours ? hmsSign + hours + 'H' : '') +\n            (minutes ? hmsSign + minutes + 'M' : '') +\n            (seconds ? hmsSign + s + 'S' : '')\n        );\n    }\n\n    var proto$2 = Duration.prototype;\n\n    proto$2.isValid = isValid$1;\n    proto$2.abs = abs;\n    proto$2.add = add$1;\n    proto$2.subtract = subtract$1;\n    proto$2.as = as;\n    proto$2.asMilliseconds = asMilliseconds;\n    proto$2.asSeconds = asSeconds;\n    proto$2.asMinutes = asMinutes;\n    proto$2.asHours = asHours;\n    proto$2.asDays = asDays;\n    proto$2.asWeeks = asWeeks;\n    proto$2.asMonths = asMonths;\n    proto$2.asQuarters = asQuarters;\n    proto$2.asYears = asYears;\n    proto$2.valueOf = valueOf$1;\n    proto$2._bubble = bubble;\n    proto$2.clone = clone$1;\n    proto$2.get = get$2;\n    proto$2.milliseconds = milliseconds;\n    proto$2.seconds = seconds;\n    proto$2.minutes = minutes;\n    proto$2.hours = hours;\n    proto$2.days = days;\n    proto$2.weeks = weeks;\n    proto$2.months = months;\n    proto$2.years = years;\n    proto$2.humanize = humanize;\n    proto$2.toISOString = toISOString$1;\n    proto$2.toString = toISOString$1;\n    proto$2.toJSON = toISOString$1;\n    proto$2.locale = locale;\n    proto$2.localeData = localeData;\n\n    proto$2.toIsoString = deprecate(\n        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',\n        toISOString$1\n    );\n    proto$2.lang = lang;\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    //! moment.js\n\n    hooks.version = '2.30.1';\n\n    setHookCallback(createLocal);\n\n    hooks.fn = proto;\n    hooks.min = min;\n    hooks.max = max;\n    hooks.now = now;\n    hooks.utc = createUTC;\n    hooks.unix = createUnix;\n    hooks.months = listMonths;\n    hooks.isDate = isDate;\n    hooks.locale = getSetGlobalLocale;\n    hooks.invalid = createInvalid;\n    hooks.duration = createDuration;\n    hooks.isMoment = isMoment;\n    hooks.weekdays = listWeekdays;\n    hooks.parseZone = createInZone;\n    hooks.localeData = getLocale;\n    hooks.isDuration = isDuration;\n    hooks.monthsShort = listMonthsShort;\n    hooks.weekdaysMin = listWeekdaysMin;\n    hooks.defineLocale = defineLocale;\n    hooks.updateLocale = updateLocale;\n    hooks.locales = listLocales;\n    hooks.weekdaysShort = listWeekdaysShort;\n    hooks.normalizeUnits = normalizeUnits;\n    hooks.relativeTimeRounding = getSetRelativeTimeRounding;\n    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n    hooks.calendarFormat = getCalendarFormat;\n    hooks.prototype = proto;\n\n    // currently HTML5 input type only supports 24-hour formats\n    hooks.HTML5_FMT = {\n        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type=\"datetime-local\" />\n        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type=\"datetime-local\" step=\"1\" />\n        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type=\"datetime-local\" step=\"0.001\" />\n        DATE: 'YYYY-MM-DD', // <input type=\"date\" />\n        TIME: 'HH:mm', // <input type=\"time\" />\n        TIME_SECONDS: 'HH:mm:ss', // <input type=\"time\" step=\"1\" />\n        TIME_MS: 'HH:mm:ss.SSS', // <input type=\"time\" step=\"0.001\" />\n        WEEK: 'GGGG-[W]WW', // <input type=\"week\" />\n        MONTH: 'YYYY-MM', // <input type=\"month\" />\n    };\n\n    return hooks;\n\n})));\n","export * as constants from './constants'\nexport * from './factory'\nexport * from './types'\nexport * from './utils'\n","export * from './amms'\nexport * from './contracts'\nexport * from './misc'\nexport * from './safety'\nexport * from './tokens'\n","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? \"\".concat(prefix, \": \").concat(provided) : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n","\"use strict\";\n\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\n\nimport _BN from \"bn.js\";\nimport BN = _BN.BN;\n\nimport { Bytes, Hexable, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst _constructorGuard = { };\n\nconst MAX_SAFE = 0x1fffffffffffff;\n\n\nexport type BigNumberish = BigNumber | Bytes | bigint | string | number;\n\nexport function isBigNumberish(value: any): value is BigNumberish {\n    return (value != null) && (\n        BigNumber.isBigNumber(value) ||\n        (typeof(value) === \"number\" && (value % 1) === 0) ||\n        (typeof(value) === \"string\" && !!value.match(/^-?[0-9]+$/)) ||\n        isHexString(value) ||\n        (typeof(value) === \"bigint\") ||\n        isBytes(value)\n    );\n}\n\n// Only warn about passing 10 into radix once\nlet _warnedToStringRadix = false;\n\nexport class BigNumber implements Hexable {\n    readonly _hex: string;\n    readonly _isBigNumber: boolean;\n\n    constructor(constructorGuard: any, hex: string) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new (BigNumber)\"\n            });\n        }\n\n        this._hex = hex;\n        this._isBigNumber = true;\n\n        Object.freeze(this);\n    }\n\n    fromTwos(value: number): BigNumber {\n        return toBigNumber(toBN(this).fromTwos(value));\n    }\n\n    toTwos(value: number): BigNumber {\n        return toBigNumber(toBN(this).toTwos(value));\n    }\n\n    abs(): BigNumber {\n        if (this._hex[0] === \"-\") {\n            return BigNumber.from(this._hex.substring(1));\n        }\n        return this;\n    }\n\n    add(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).add(toBN(other)));\n    }\n\n    sub(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n\n    div(other: BigNumberish): BigNumber {\n        const o = BigNumber.from(other);\n        if (o.isZero()) {\n            throwFault(\"division-by-zero\", \"div\");\n        }\n        return toBigNumber(toBN(this).div(toBN(other)));\n    }\n\n    mul(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n\n    mod(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"division-by-zero\", \"mod\");\n        }\n        return toBigNumber(toBN(this).umod(value));\n    }\n\n    pow(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"negative-power\", \"pow\");\n        }\n        return toBigNumber(toBN(this).pow(value));\n    }\n\n    and(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"and\");\n        }\n        return toBigNumber(toBN(this).and(value));\n    }\n\n    or(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"or\");\n        }\n        return toBigNumber(toBN(this).or(value));\n    }\n\n    xor(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"xor\");\n        }\n        return toBigNumber(toBN(this).xor(value));\n    }\n\n    mask(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"mask\");\n        }\n        return toBigNumber(toBN(this).maskn(value));\n    }\n\n    shl(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shl\");\n        }\n        return toBigNumber(toBN(this).shln(value));\n    }\n\n    shr(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shr\");\n        }\n        return toBigNumber(toBN(this).shrn(value));\n    }\n\n    eq(other: BigNumberish): boolean {\n        return toBN(this).eq(toBN(other));\n    }\n\n    lt(other: BigNumberish): boolean {\n        return toBN(this).lt(toBN(other));\n    }\n\n    lte(other: BigNumberish): boolean {\n        return toBN(this).lte(toBN(other));\n    }\n\n    gt(other: BigNumberish): boolean {\n        return toBN(this).gt(toBN(other));\n   }\n\n    gte(other: BigNumberish): boolean {\n        return toBN(this).gte(toBN(other));\n    }\n\n    isNegative(): boolean {\n        return (this._hex[0] === \"-\");\n    }\n\n    isZero(): boolean {\n        return toBN(this).isZero();\n    }\n\n    toNumber(): number {\n        try {\n            return toBN(this).toNumber();\n        } catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n\n    toBigInt(): bigint {\n        try {\n            return BigInt(this.toString());\n        } catch (e) { }\n\n        return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n            value: this.toString()\n        });\n    }\n\n    toString(): string {\n        // Lots of people expect this, which we do not support, so check (See: #889)\n        if (arguments.length > 0) {\n            if (arguments[0] === 10) {\n                if (!_warnedToStringRadix) {\n                    _warnedToStringRadix = true;\n                    logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n                }\n            } else if (arguments[0] === 16) {\n                logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, { });\n            } else {\n                logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, { });\n            }\n        }\n        return toBN(this).toString(10);\n    }\n\n    toHexString(): string {\n        return this._hex;\n    }\n\n    toJSON(key?: string): any {\n        return { type: \"BigNumber\", hex: this.toHexString() };\n    }\n\n    static from(value: any): BigNumber {\n        if (value instanceof BigNumber) { return value; }\n\n        if (typeof(value) === \"string\") {\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\n                return new BigNumber(_constructorGuard, toHex(value));\n            }\n\n            if (value.match(/^-?[0-9]+$/)) {\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n\n            return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n\n        if (typeof(value) === \"number\") {\n            if (value % 1) {\n                throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n                throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n\n            return BigNumber.from(String(value));\n        }\n\n        const anyValue = <any>value;\n\n        if (typeof(anyValue) === \"bigint\") {\n            return BigNumber.from(anyValue.toString());\n        }\n\n        if (isBytes(anyValue)) {\n            return BigNumber.from(hexlify(anyValue));\n        }\n\n        if (anyValue) {\n\n            // Hexable interface (takes priority)\n            if (anyValue.toHexString) {\n                const hex = anyValue.toHexString();\n                if (typeof(hex) === \"string\") {\n                    return BigNumber.from(hex);\n                }\n\n            } else {\n                // For now, handle legacy JSON-ified values (goes away in v6)\n                let hex = anyValue._hex;\n\n                // New-form JSON\n                if (hex == null && anyValue.type === \"BigNumber\") {\n                    hex = anyValue.hex;\n                }\n\n                if (typeof(hex) === \"string\") {\n                    if (isHexString(hex) || (hex[0] === \"-\" && isHexString(hex.substring(1)))) {\n                        return BigNumber.from(hex);\n                    }\n                }\n            }\n        }\n\n        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n\n    static isBigNumber(value: any): value is BigNumber {\n        return !!(value && value._isBigNumber);\n    }\n}\n\n// Normalize the hex string\nfunction toHex(value: string | BN): string {\n\n    // For BN, call on the hex string\n    if (typeof(value) !== \"string\") {\n        return toHex(value.toString(16));\n    }\n\n    // If negative, prepend the negative sign to the normalized positive value\n    if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1);\n\n        // Cannot have multiple negative signs (e.g. \"--0x04\")\n        if (value[0] === \"-\") { logger.throwArgumentError(\"invalid hex\", \"value\", value); }\n\n        // Call toHex on the positive component\n        value = toHex(value);\n\n        // Do not allow \"-0x00\"\n        if (value === \"0x00\") { return value; }\n\n        // Negate the value\n        return \"-\" + value;\n    }\n\n    // Add a \"0x\" prefix if missing\n    if (value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n\n    // Normalize zero\n    if (value === \"0x\") { return \"0x00\"; }\n\n    // Make the string even length\n    if (value.length % 2) { value = \"0x0\" + value.substring(2); }\n\n    // Trim to smallest even-length string\n    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n        value = \"0x\" + value.substring(4);\n    }\n\n    return value;\n}\n\nfunction toBigNumber(value: BN): BigNumber {\n    return BigNumber.from(toHex(value));\n}\n\nfunction toBN(value: BigNumberish): BN {\n    const hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n        return (new BN(\"-\" + hex.substring(3), 16));\n    }\n    return new BN(hex.substring(2), 16);\n}\n\nfunction throwFault(fault: string, operation: string, value?: any): never {\n    const params: any = { fault: fault, operation: operation };\n    if (value != null) { params.value = value; }\n\n    return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n\n// value should have no prefix\nexport function _base36To16(value: string): string {\n    return (new BN(value, 36)).toString(16);\n}\n\n// value should have no prefix\nexport function _base16To36(value: string): string {\n    return (new BN(value, 16)).toString(36);\n}\n","export const version = \"logger/5.7.0\";\n","\"use strict\";\n\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\n\nconst LogLevels: { [ name: string ]: number } = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\n\nimport { version } from \"./_version\";\n\nlet _globalLogger: Logger = null;\n\nfunction _checkNormalize(): string {\n    try {\n        const missing: Array<string> = [ ];\n\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                };\n            } catch(error) {\n                missing.push(form);\n            }\n        });\n\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\")\n        }\n    } catch (error) {\n        return error.message;\n    }\n\n    return null;\n}\n\nconst _normalizeError = _checkNormalize();\n\nexport enum LogLevel {\n    DEBUG    = \"DEBUG\",\n    INFO     = \"INFO\",\n    WARNING  = \"WARNING\",\n    ERROR    = \"ERROR\",\n    OFF      = \"OFF\"\n}\n\n\nexport enum ErrorCode {\n\n    ///////////////////\n    // Generic Errors\n\n    // Unknown Error\n    UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n\n    // Not Implemented\n    NOT_IMPLEMENTED = \"NOT_IMPLEMENTED\",\n\n    // Unsupported Operation\n    //   - operation\n    UNSUPPORTED_OPERATION = \"UNSUPPORTED_OPERATION\",\n\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    NETWORK_ERROR = \"NETWORK_ERROR\",\n\n    // Some sort of bad response from the server\n    SERVER_ERROR = \"SERVER_ERROR\",\n\n    // Timeout\n    TIMEOUT = \"TIMEOUT\",\n\n    ///////////////////\n    // Operational  Errors\n\n    // Buffer Overrun\n    BUFFER_OVERRUN = \"BUFFER_OVERRUN\",\n\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    NUMERIC_FAULT = \"NUMERIC_FAULT\",\n\n\n    ///////////////////\n    // Argument Errors\n\n    // Missing new operator to an object\n    //  - name: The name of the class\n    MISSING_NEW = \"MISSING_NEW\",\n\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    INVALID_ARGUMENT = \"INVALID_ARGUMENT\",\n\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    MISSING_ARGUMENT = \"MISSING_ARGUMENT\",\n\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    UNEXPECTED_ARGUMENT = \"UNEXPECTED_ARGUMENT\",\n\n\n    ///////////////////\n    // Blockchain Errors\n\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    CALL_EXCEPTION = \"CALL_EXCEPTION\",\n\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    INSUFFICIENT_FUNDS = \"INSUFFICIENT_FUNDS\",\n\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    NONCE_EXPIRED = \"NONCE_EXPIRED\",\n\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    REPLACEMENT_UNDERPRICED = \"REPLACEMENT_UNDERPRICED\",\n\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    UNPREDICTABLE_GAS_LIMIT = \"UNPREDICTABLE_GAS_LIMIT\",\n\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    TRANSACTION_REPLACED = \"TRANSACTION_REPLACED\",\n\n\n    ///////////////////\n    // Interaction Errors\n\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ACTION_REJECTED = \"ACTION_REJECTED\",\n};\n\nconst HEX = \"0123456789abcdef\";\n\nexport class Logger {\n    readonly version: string;\n\n    static errors = ErrorCode;\n\n    static levels = LogLevel;\n\n    constructor(version: string) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n\n    _log(logLevel: LogLevel, args: Array<any>): void {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) { return; }\n        console.log.apply(console, args);\n    }\n\n    debug(...args: Array<any>): void {\n        this._log(Logger.levels.DEBUG, args);\n    }\n\n    info(...args: Array<any>): void {\n        this._log(Logger.levels.INFO, args);\n    }\n\n    warn(...args: Array<any>): void {\n        this._log(Logger.levels.WARNING, args);\n    }\n\n    makeError(message: string, code?: ErrorCode, params?: any): Error {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, { });\n        }\n\n        if (!code) { code = Logger.errors.UNKNOWN_ERROR; }\n        if (!params) { params = {}; }\n\n        const messageDetails: Array<string> = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                      hex += HEX[value[i] >> 4];\n                      hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                } else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            } catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${ code }`);\n        messageDetails.push(`version=${ this.version }`);\n\n        const reason = message;\n\n        let url = \"\";\n\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n\n                switch (fault) {\n                    case \"overflow\": case \"underflow\": case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\": case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n\n        // @TODO: Any??\n        const error: any = new Error(message);\n        error.reason = reason;\n        error.code = code\n\n        Object.keys(params).forEach(function(key) {\n            error[key] = params[key];\n        });\n\n        return error;\n    }\n\n    throwError(message: string, code?: ErrorCode, params?: any): never {\n        throw this.makeError(message, code, params);\n    }\n\n    throwArgumentError(message: string, name: string, value: any): never {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n\n    assert(condition: any, message: string, code?: ErrorCode, params?: any): void {\n        if (!!condition) { return; }\n        this.throwError(message, code, params);\n    }\n\n    assertArgument(condition: any, message: string, name: string, value: any): void {\n        if (!!condition) { return; }\n        this.throwArgumentError(message, name, value);\n    }\n\n    checkNormalize(message?: string): void {\n        if (message == null) { message = \"platform missing String.prototype.normalize\"; }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n\n    checkSafeUint53(value: number, message?: string): void {\n        if (typeof(value) !== \"number\") { return; }\n\n        if (message == null) { message = \"value not safe\"; }\n\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n\n    checkArgumentCount(count: number, expectedCount: number, message?: string): void {\n        if (message) {\n            message = \": \" + message;\n        } else {\n            message = \"\";\n        }\n\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n\n    checkNew(target: any, kind: any): void {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n\n    checkAbstract(target: any, kind: any): void {\n        if (target === kind) {\n            this.throwError(\n                \"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { name: target.name, operation: \"new\" }\n            );\n        } else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n\n    static globalLogger(): Logger {\n        if (!_globalLogger) { _globalLogger = new Logger(version); }\n        return _globalLogger;\n    }\n\n    static setCensorship(censorship: boolean, permanent?: boolean): void {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n\n        if (_permanentCensorErrors) {\n            if (!censorship) { return; }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n\n    static setLogLevel(logLevel: LogLevel): void {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n\n    static from(version: string): Logger {\n        return new Logger(version);\n    }\n}\n","export const version = \"bytes/5.7.0\";\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n///////////////////////////////\n// Exported Types\n\nexport type Bytes = ArrayLike<number>;\n\nexport type BytesLike = Bytes | string;\n\nexport type DataOptions = {\n    allowMissingPrefix?: boolean;\n    hexPad?: \"left\" | \"right\" | null;\n};\n\nexport interface Hexable {\n    toHexString(): string;\n}\n\n\n/*\nexport interface HexString {\n    length: number;\n    substring: (start: number, end?: number) => string;\n\n    [index: number]: string;\n}\n*/\n\nexport type SignatureLike  = {\n    r: string;\n    s?: string;\n    _vs?: string,\n    recoveryParam?: number;\n    v?: number;\n} | BytesLike;\n\nexport interface Signature {\n    r: string;\n\n    s: string;\n    _vs: string,\n\n    recoveryParam: number;\n    v: number;\n\n    yParityAndS: string\n    compact: string;\n}\n\n///////////////////////////////\n\n\nfunction isHexable(value: any): value is Hexable {\n    return !!(value.toHexString);\n}\n\nfunction addSlice(array: Uint8Array): Uint8Array {\n    if (array.slice) { return array; }\n\n    array.slice = function() {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    }\n\n    return array;\n}\n\nexport function isBytesLike(value: any): value is BytesLike {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\n\nfunction isInteger(value: number) {\n    return (typeof(value) === \"number\" && value == value && (value % 1) === 0);\n}\n\nexport function isBytes(value: any): value is Bytes {\n    if (value == null) { return false; }\n\n    if (value.constructor === Uint8Array) { return true; }\n    if (typeof(value) === \"string\") { return false; }\n    if (!isInteger(value.length) || value.length < 0) { return false; }\n\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) { return false; }\n    }\n    return true;\n}\n\n\nexport function arrayify(value: BytesLike | Hexable | number, options?: DataOptions): Uint8Array {\n    if (!options) { options = { }; }\n\n    if (typeof(value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) { result.push(0); }\n\n        return addSlice(new Uint8Array(result));\n    }\n\n    if (options.allowMissingPrefix && typeof(value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n         value = \"0x\" + value;\n    }\n\n    if (isHexable(value)) { value = value.toHexString(); }\n\n    if (isHexString(value)) {\n        let hex = (<string>value).substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0\" + hex;\n            } else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            } else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n\n        return addSlice(new Uint8Array(result));\n    }\n\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\n\nexport function concat(items: ReadonlyArray<BytesLike>): Uint8Array {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n\n    const result = new Uint8Array(length);\n\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n\n    return addSlice(result);\n}\n\nexport function stripZeros(value: BytesLike): Uint8Array {\n    let result: Uint8Array = arrayify(value);\n\n    if (result.length === 0) { return result; }\n\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) { start++ }\n\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n\n    return result;\n}\n\nexport function zeroPad(value: BytesLike, length: number): Uint8Array {\n    value = arrayify(value);\n\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\n\n\nexport function isHexString(value: any, length?: number): boolean {\n    if (typeof(value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false\n    }\n    if (length && value.length !== 2 + 2 * length) { return false; }\n    return true;\n}\n\nconst HexCharacters: string = \"0123456789abcdef\";\n\nexport function hexlify(value: BytesLike | Hexable | number | bigint, options?: DataOptions): string {\n    if (!options) { options = { }; }\n\n    if (typeof(value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n\n        if (hex.length) {\n            if (hex.length % 2) { hex = \"0\" + hex; }\n            return \"0x\" + hex;\n        }\n\n        return \"0x00\";\n    }\n\n    if (typeof(value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) { return (\"0x0\" + value); }\n        return \"0x\" + value;\n    }\n\n    if (options.allowMissingPrefix && typeof(value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n         value = \"0x\" + value;\n    }\n\n    if (isHexable(value)) { return value.toHexString(); }\n\n    if (isHexString(value)) {\n        if ((<string>value).length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + (<string>value).substring(2);\n            } else if (options.hexPad === \"right\") {\n                value += \"0\";\n            } else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return (<string>value).toLowerCase();\n    }\n\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n             let v = value[i];\n             result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data: BytesLike) {\n    if (typeof(data) !== \"string\") {\n        data = hexlify(data);\n    } else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n\n    return (data.length - 2) / 2;\n}\n\nexport function hexDataSlice(data: BytesLike, offset: number, endOffset?: number): string {\n    if (typeof(data) !== \"string\") {\n        data = hexlify(data);\n    } else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data );\n    }\n\n    offset = 2 + 2 * offset;\n\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n\n    return \"0x\" + data.substring(offset);\n}\n\nexport function hexConcat(items: ReadonlyArray<BytesLike>): string {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\n\nexport function hexValue(value: BytesLike | Hexable | number | bigint): string {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") { return \"0x0\"; }\n    return trimmed;\n}\n\nexport function hexStripZeros(value: BytesLike): string {\n    if (typeof(value) !== \"string\") { value = hexlify(value); }\n\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") { offset++; }\n    return \"0x\" + value.substring(offset);\n}\n\nexport function hexZeroPad(value: BytesLike, length: number): string {\n    if (typeof(value) !== \"string\") {\n        value = hexlify(value);\n    } else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n\n    return value;\n}\n\nexport function splitSignature(signature: SignatureLike): Signature {\n\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n\n    if (isBytesLike(signature)) {\n        let bytes: Uint8Array = arrayify(signature);\n\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n\n        } else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        } else {\n\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n\n\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            } else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) { bytes[32] |= 0x80; }\n        result._vs = hexlify(bytes.slice(32, 64))\n\n    } else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1: 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            } else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            } else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            } else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            } else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        } else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            } else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v :(1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        } else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        } else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) { vs[0] |= 0x80; }\n        const _vs = hexlify(vs);\n\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        } else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n\n    return result;\n}\n\nexport function joinSignature(signature: SignatureLike): string {\n    signature = splitSignature(signature);\n\n    return hexlify(concat([\n         signature.r,\n         signature.s,\n         (signature.recoveryParam ? \"0x1c\": \"0x1b\")\n    ]));\n}\n\n","export const version = \"bignumber/5.7.0\";\n","\"use strict\";\n\nimport sha3 from \"js-sha3\";\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\n\nexport function keccak256(data: BytesLike): string {\n    return '0x' + sha3.keccak_256(arrayify(data));\n}\n","export const version = \"address/5.7.0\";\n","\"use strict\";\n\nimport { arrayify, BytesLike, concat, hexDataLength, hexDataSlice, isHexString, stripZeros } from \"@ethersproject/bytes\";\nimport { BigNumber, BigNumberish, _base16To36, _base36To16 } from \"@ethersproject/bignumber\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { encode } from \"@ethersproject/rlp\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction getChecksumAddress(address: string): string {\n    if (!isHexString(address, 20)) {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n\n    address = address.toLowerCase();\n\n    const chars = address.substring(2).split(\"\");\n\n    const expanded = new Uint8Array(40);\n    for (let i = 0; i < 40; i++) {\n        expanded[i] = chars[i].charCodeAt(0);\n    }\n\n    const hashed = arrayify(keccak256(expanded));\n\n    for (let i = 0; i < 40; i += 2) {\n        if ((hashed[i >> 1] >> 4) >= 8) {\n            chars[i] = chars[i].toUpperCase();\n        }\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\n            chars[i + 1] = chars[i + 1].toUpperCase();\n        }\n    }\n\n    return \"0x\" + chars.join(\"\");\n}\n\n// Shims for environments that are missing some required constants and functions\nconst MAX_SAFE_INTEGER: number = 0x1fffffffffffff;\n\nfunction log10(x: number): number {\n    if (Math.log10) { return Math.log10(x); }\n    return Math.log(x) / Math.LN10;\n}\n\n\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n\n// Create lookup table\nconst ibanLookup: { [character: string]: string } = { };\nfor (let i = 0; i < 10; i++) { ibanLookup[String(i)] = String(i); }\nfor (let i = 0; i < 26; i++) { ibanLookup[String.fromCharCode(65 + i)] = String(10 + i); }\n\n// How many decimal digits can we process? (for 64-bit float, this is 15)\nconst safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));\n\nfunction ibanChecksum(address: string): string {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\n\n    let expanded = address.split(\"\").map((c) => { return ibanLookup[c]; }).join(\"\");\n\n    // Javascript can handle integers safely up to 15 (decimal) digits\n    while (expanded.length >= safeDigits){\n        let block = expanded.substring(0, safeDigits);\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n\n    let checksum = String(98 - (parseInt(expanded, 10) % 97));\n    while (checksum.length < 2) { checksum = \"0\" + checksum; }\n\n    return checksum;\n};\n\nexport function getAddress(address: string): string {\n    let result = null;\n\n    if (typeof(address) !== \"string\") {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n\n        // Missing the 0x prefix\n        if (address.substring(0, 2) !== \"0x\") { address = \"0x\" + address; }\n\n        result = getChecksumAddress(address);\n\n        // It is a checksummed address with a bad checksum\n        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {\n            logger.throwArgumentError(\"bad address checksum\", \"address\", address);\n        }\n\n    // Maybe ICAP? (we only support direct mode)\n    } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n\n        // It is an ICAP address with a bad checksum\n        if (address.substring(2, 4) !== ibanChecksum(address)) {\n            logger.throwArgumentError(\"bad icap checksum\", \"address\", address);\n        }\n\n        result = _base36To16(address.substring(4));\n        while (result.length < 40) { result = \"0\" + result; }\n        result = getChecksumAddress(\"0x\" + result);\n\n    } else {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n\n    return result;\n}\n\nexport function isAddress(address: string): boolean {\n    try {\n        getAddress(address);\n        return true;\n    } catch (error) { }\n    return false;\n}\n\nexport function getIcapAddress(address: string): string {\n    let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();\n    while (base36.length < 30) { base36 = \"0\" + base36; }\n    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n}\n\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\nexport function getContractAddress(transaction: { from: string, nonce: BigNumberish }) {\n    let from: string = null;\n    try {\n        from = getAddress(transaction.from);\n    } catch (error) {\n        logger.throwArgumentError(\"missing from address\", \"transaction\", transaction);\n    }\n\n    const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));\n\n    return getAddress(hexDataSlice(keccak256(encode([ from, nonce ])), 12));\n}\n\nexport function getCreate2Address(from: string, salt: BytesLike, initCodeHash: BytesLike): string {\n    if (hexDataLength(salt) !== 32) {\n        logger.throwArgumentError(\"salt must be 32 bytes\", \"salt\", salt);\n    }\n    if (hexDataLength(initCodeHash) !== 32) {\n        logger.throwArgumentError(\"initCodeHash must be 32 bytes\", \"initCodeHash\", initCodeHash);\n    }\n    return getAddress(hexDataSlice(keccak256(concat([ \"0xff\", getAddress(from), salt, initCodeHash ])), 12))\n}\n","export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457,\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST,\n] as const\nexport type SupportedChainsType = (typeof SUPPORTED_CHAINS)[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  ROOTSTOCK = 'RBTC',\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA,\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070',\n}\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035',\n}\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88',\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E',\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e',\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573',\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D',\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2',\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e',\n}\n\n// optimism sepolia addresses\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4',\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8',\n}\n\n// arbitrum sepolia v3 addresses\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E',\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\n  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E',\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE',\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481',\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d',\n}\n\nconst ZORA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557',\n}\n\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064',\n}\n\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A',\n}\n\nconst BLAST_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66',\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n  [ChainId.ZORA]: ZORA_ADDRESSES,\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\n  [ChainId.BLAST]: BLAST_ADDRESSES,\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {}),\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {}),\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6',\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3',\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8',\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {}),\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'),\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd',\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\n  if (v1MixedRouteQuoterAddress) {\n    memo[chainId] = v1MixedRouteQuoterAddress\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  1: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  3: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  4: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  5: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  42: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  10: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  69: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  11155420: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  42161: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  421611: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n  421614: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\n\n  8453: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  56: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  137: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  43114: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { EKUBO_TICK_SIZE, EKUBO_TICK_SIZE_LOG, EKUBO_TICK_SPACING } from '../constants/misc'\n\nexport const getInitialPrice = (startingTick: number) => EKUBO_TICK_SIZE ** startingTick\n\nexport const getStartingTick = (initialPrice: number) =>\n  Math.floor(Math.log(initialPrice) / EKUBO_TICK_SIZE_LOG / EKUBO_TICK_SPACING) * EKUBO_TICK_SPACING\n","import { Percent } from '@uniswap/sdk-core'\n\nimport { getStartingTick } from '../utils/ekubo'\n\nexport const MAX_TEAM_ALLOCATION_HOLDERS_COUNT = 10\nexport const MAX_TEAM_ALLOCATION_TOTAL_SUPPLY_PERCENTAGE = new Percent(10, 100) // 10%\nexport const DECIMALS = 18\n\nexport enum Entrypoint {\n  CREATE_MEMECOIN = 'create_memecoin',\n  IS_MEMECOIN = 'is_memecoin',\n  AGGREGATE = 'aggregate',\n  NAME = 'name',\n  SYMBOL = 'symbol',\n  IS_LAUNCHED = 'is_launched',\n  GET_TEAM_ALLOCATION = 'get_team_allocation',\n  TOTAL_SUPPLY = 'total_supply',\n  OWNER = 'owner',\n  LOCKED_LIQUIDITY = 'locked_liquidity',\n  LAUNCH_ON_JEDISWAP = 'launch_on_jediswap',\n  LAUNCH_ON_EKUBO = 'launch_on_ekubo',\n  LAUNCH_ON_STARKDEFI = 'launch_on_starkdefi',\n  APPROVE = 'approve',\n  GET_REMAINING_TIME = 'get_remaining_time',\n  LAUNCHED_WITH_LIQUIDITY_PARAMETERS = 'launched_with_liquidity_parameters',\n  GET_LOCK_DETAILS = 'get_lock_details',\n  LAUNCHED_AT_BLOCK_NUMBER = 'launched_at_block_number',\n  GET_RESERVES = 'get_reserves',\n  LIQUIDITY_POSITION_DETAILS = 'liquidity_position_details',\n  WITHDRAW_FEES = 'withdraw_fees',\n  EXTEND_LOCK = 'extend_lock',\n  BALANCE_OF_CAMEL = 'balanceOf',\n  BALANCE_OF = 'balance_of',\n  TRANSFER = 'transfer',\n  GET_TOKEN_INFOS = 'get_token_info',\n}\n\nexport enum LiquidityType {\n  JEDISWAP_ERC20 = 'JEDISWAP_ERC20',\n  STARKDEFI_ERC20 = 'STARKDEFI_ERC20',\n  EKUBO_NFT = 'EKUBO_NFT',\n}\n\nexport const MIN_STARTING_MCAP = 5_000 // $5k\nexport const RECOMMENDED_STARTING_MCAP = 10_000 // $12k\n\nexport const MIN_HODL_LIMIT = new Percent(1, 200) // 0.5%\nexport const MAX_HODL_LIMIT = new Percent(1, 1) // 100%\nexport const RECOMMENDED_HODL_LIMIT = new Percent(1, 100) // 1%\n\nexport const TRANSFER_RESTRICTION_DELAY_STEP = 15 // 15m\nexport const MIN_TRANSFER_RESTRICTION_DELAY = 30 // 30m\nexport const MAX_TRANSFER_RESTRICTION_DELAY = 1440 // 24h\n\nexport const LIQUIDITY_LOCK_PERIOD_STEP = 1 // 1 month\nexport const MIN_LIQUIDITY_LOCK_PERIOD = 6 // 6 months\nexport const MAX_LIQUIDITY_LOCK_PERIOD = 25 // 2 years and 1 month\n\nexport const LIQUIDITY_LOCK_INCREASE_STEP = 1 // 1 month\nexport const MIN_LIQUIDITY_LOCK_INCREASE = 1 // 1 months\nexport const MAX_LIQUIDITY_LOCK_INCREASE = 25 // 2 years and 1 month\n\nexport const LIQUIDITY_LOCK_FOREVER_TIMESTAMP = 9999999999 // 20/11/2286\n\nexport const MIN_EKUBO_FEES = new Percent(0, 1) // 0%\nexport const MAX_EKUBO_FEES = new Percent(2, 100) // 2%\nexport const RECOMMENDED_EKUBO_FEES = new Percent(3, 1000) // 0.3%\n\n// Ekubo\n\nexport const EKUBO_TICK_SIZE = 1.000001\nconst EKUBO_MAX_PRICE = '0x100000000000000000000000000000000' // 2 ** 128\n\nexport const EKUBO_TICK_SPACING = 5982 // log(1 + 0.6%) / log(1.000001) => 0.6% is the tick spacing percentage\nexport const EKUBO_TICK_SIZE_LOG = Math.log(EKUBO_TICK_SIZE)\nexport const EKUBO_FEES_MULTIPLICATOR = EKUBO_MAX_PRICE\nexport const EKUBO_BOUND = getStartingTick(+EKUBO_MAX_PRICE)\n","import { Entrypoint } from './misc'\n\nexport enum AMM {\n  EKUBO = 'Ekubo',\n  JEDISWAP = 'Jediswap',\n  STARKDEFI = 'StarkDeFi',\n}\n\nexport const AMMS = {\n  [AMM.EKUBO]: {\n    description:\n      'Most efficient AMM ever, you can launch your token without having to provide liquidity and can collect fees.',\n    launchEntrypoint: Entrypoint.LAUNCH_ON_EKUBO,\n  },\n  [AMM.JEDISWAP]: {\n    description:\n      \"Widely supported AMM, team allocation will be free but you have to provide liquidity and can't collect fees.\",\n    launchEntrypoint: Entrypoint.LAUNCH_ON_JEDISWAP,\n  },\n  [AMM.STARKDEFI]: {\n    description: \"Team allocation will be free but you have to provide liquidity and can't collect fees.\",\n    launchEntrypoint: Entrypoint.LAUNCH_ON_STARKDEFI,\n  },\n}\n","/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// Utilities\n/**\n * @__NO_SIDE_EFFECTS__\n */\nexport function assertNumber(n: number) {\n  if (!Number.isSafeInteger(n)) throw new Error(`Wrong integer: ${n}`);\n}\nexport interface Coder<F, T> {\n  encode(from: F): T;\n  decode(to: T): F;\n}\n\nexport interface BytesCoder extends Coder<Uint8Array, string> {\n  encode: (data: Uint8Array) => string;\n  decode: (str: string) => Uint8Array;\n}\n\nfunction isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\n// TODO: some recusive type inference so it would check correct order of input/output inside rest?\n// like <string, number>, <number, bytes>, <bytes, float>\ntype Chain = [Coder<any, any>, ...Coder<any, any>[]];\n// Extract info from Coder type\ntype Input<F> = F extends Coder<infer T, any> ? T : never;\ntype Output<F> = F extends Coder<any, infer T> ? T : never;\n// Generic function for arrays\ntype First<T> = T extends [infer U, ...any[]] ? U : never;\ntype Last<T> = T extends [...any[], infer U] ? U : never;\ntype Tail<T> = T extends [any, ...infer U] ? U : never;\n\ntype AsChain<C extends Chain, Rest = Tail<C>> = {\n  // C[K] = Coder<Input<C[K]>, Input<Rest[k]>>\n  [K in keyof C]: Coder<Input<C[K]>, Input<K extends keyof Rest ? Rest[K] : any>>;\n};\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction chain<T extends Chain & AsChain<T>>(...args: T): Coder<Input<First<T>>, Output<Last<T>>> {\n  const id = (a: any) => a;\n  // Wrap call in closure so JIT can inline calls\n  const wrap = (a: any, b: any) => (c: any) => a(b(c));\n  // Construct chain of args[-1].encode(args[-2].encode([...]))\n  const encode = args.map((x) => x.encode).reduceRight(wrap, id);\n  // Construct chain of args[0].decode(args[1].decode(...))\n  const decode = args.map((x) => x.decode).reduce(wrap, id);\n  return { encode, decode };\n}\n\ntype Alphabet = string[] | string;\n\n/**\n * Encodes integer radix representation to array of strings using alphabet and back\n * @__NO_SIDE_EFFECTS__\n */\nfunction alphabet(alphabet: Alphabet): Coder<number[], string[]> {\n  return {\n    encode: (digits: number[]) => {\n      if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n        throw new Error('alphabet.encode input should be an array of numbers');\n      return digits.map((i) => {\n        assertNumber(i);\n        if (i < 0 || i >= alphabet.length)\n          throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n        return alphabet[i]!;\n      });\n    },\n    decode: (input: string[]) => {\n      if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n        throw new Error('alphabet.decode input should be array of strings');\n      return input.map((letter) => {\n        if (typeof letter !== 'string')\n          throw new Error(`alphabet.decode: not string element=${letter}`);\n        const index = alphabet.indexOf(letter);\n        if (index === -1) throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n        return index;\n      });\n    },\n  };\n}\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction join(separator = ''): Coder<string[], string> {\n  if (typeof separator !== 'string') throw new Error('join separator should be string');\n  return {\n    encode: (from) => {\n      if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n        throw new Error('join.encode input should be array of strings');\n      for (let i of from)\n        if (typeof i !== 'string') throw new Error(`join.encode: non-string input=${i}`);\n      return from.join(separator);\n    },\n    decode: (to) => {\n      if (typeof to !== 'string') throw new Error('join.decode input should be string');\n      return to.split(separator);\n    },\n  };\n}\n\n/**\n * Pad strings array so it has integer number of bits\n * @__NO_SIDE_EFFECTS__\n */\nfunction padding(bits: number, chr = '='): Coder<string[], string[]> {\n  assertNumber(bits);\n  if (typeof chr !== 'string') throw new Error('padding chr should be string');\n  return {\n    encode(data: string[]): string[] {\n      if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n        throw new Error('padding.encode input should be array of strings');\n      for (let i of data)\n        if (typeof i !== 'string') throw new Error(`padding.encode: non-string input=${i}`);\n      while ((data.length * bits) % 8) data.push(chr);\n      return data;\n    },\n    decode(input: string[]): string[] {\n      if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n        throw new Error('padding.encode input should be array of strings');\n      for (let i of input)\n        if (typeof i !== 'string') throw new Error(`padding.decode: non-string input=${i}`);\n      let end = input.length;\n      if ((end * bits) % 8)\n        throw new Error('Invalid padding: string should have whole number of bytes');\n      for (; end > 0 && input[end - 1] === chr; end--) {\n        if (!(((end - 1) * bits) % 8))\n          throw new Error('Invalid padding: string has too much padding');\n      }\n      return input.slice(0, end);\n    },\n  };\n}\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction normalize<T>(fn: (val: T) => T): Coder<T, T> {\n  if (typeof fn !== 'function') throw new Error('normalize fn should be function');\n  return { encode: (from: T) => from, decode: (to: T) => fn(to) };\n}\n\n/**\n * Slow: O(n^2) time complexity\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix(data: number[], from: number, to: number): number[] {\n  // base 1 is impossible\n  if (from < 2) throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n  if (to < 2) throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n  if (!Array.isArray(data)) throw new Error('convertRadix: data should be array');\n  if (!data.length) return [];\n  let pos = 0;\n  const res = [];\n  const digits = Array.from(data);\n  digits.forEach((d) => {\n    assertNumber(d);\n    if (d < 0 || d >= from) throw new Error(`Wrong integer: ${d}`);\n  });\n  while (true) {\n    let carry = 0;\n    let done = true;\n    for (let i = pos; i < digits.length; i++) {\n      const digit = digits[i]!;\n      const digitBase = from * carry + digit;\n      if (\n        !Number.isSafeInteger(digitBase) ||\n        (from * carry) / from !== carry ||\n        digitBase - digit !== from * carry\n      ) {\n        throw new Error('convertRadix: carry overflow');\n      }\n      carry = digitBase % to;\n      const rounded = Math.floor(digitBase / to);\n      digits[i] = rounded;\n      if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)\n        throw new Error('convertRadix: carry overflow');\n      if (!done) continue;\n      else if (!rounded) pos = i;\n      else done = false;\n    }\n    res.push(carry);\n    if (done) break;\n  }\n  for (let i = 0; i < data.length - 1 && data[i] === 0; i++) res.push(0);\n  return res.reverse();\n}\n\nconst gcd = /* @__NO_SIDE_EFFECTS__ */ (a: number, b: number): number => (!b ? a : gcd(b, a % b));\nconst radix2carry = /*@__NO_SIDE_EFFECTS__ */ (from: number, to: number) =>\n  from + (to - gcd(from, to));\n/**\n * Implemented with numbers, because BigInt is 5x slower\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix2(data: number[], from: number, to: number, padding: boolean): number[] {\n  if (!Array.isArray(data)) throw new Error('convertRadix2: data should be array');\n  if (from <= 0 || from > 32) throw new Error(`convertRadix2: wrong from=${from}`);\n  if (to <= 0 || to > 32) throw new Error(`convertRadix2: wrong to=${to}`);\n  if (radix2carry(from, to) > 32) {\n    throw new Error(\n      `convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`\n    );\n  }\n  let carry = 0;\n  let pos = 0; // bitwise position in current element\n  const mask = 2 ** to - 1;\n  const res: number[] = [];\n  for (const n of data) {\n    assertNumber(n);\n    if (n >= 2 ** from) throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n    carry = (carry << from) | n;\n    if (pos + from > 32) throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n    pos += from;\n    for (; pos >= to; pos -= to) res.push(((carry >> (pos - to)) & mask) >>> 0);\n    carry &= 2 ** pos - 1; // clean carry, otherwise it will cause overflow\n  }\n  carry = (carry << (to - pos)) & mask;\n  if (!padding && pos >= from) throw new Error('Excess padding');\n  if (!padding && carry) throw new Error(`Non-zero padding: ${carry}`);\n  if (padding && pos > 0) res.push(carry >>> 0);\n  return res;\n}\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix(num: number): Coder<Uint8Array, number[]> {\n  assertNumber(num);\n  return {\n    encode: (bytes: Uint8Array) => {\n      if (!isBytes(bytes)) throw new Error('radix.encode input should be Uint8Array');\n      return convertRadix(Array.from(bytes), 2 ** 8, num);\n    },\n    decode: (digits: number[]) => {\n      if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n        throw new Error('radix.decode input should be array of numbers');\n      return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n    },\n  };\n}\n\n/**\n * If both bases are power of same number (like `2**8 <-> 2**64`),\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix2(bits: number, revPadding = false): Coder<Uint8Array, number[]> {\n  assertNumber(bits);\n  if (bits <= 0 || bits > 32) throw new Error('radix2: bits should be in (0..32]');\n  if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n    throw new Error('radix2: carry overflow');\n  return {\n    encode: (bytes: Uint8Array) => {\n      if (!isBytes(bytes)) throw new Error('radix2.encode input should be Uint8Array');\n      return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n    },\n    decode: (digits: number[]) => {\n      if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n        throw new Error('radix2.decode input should be array of numbers');\n      return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n    },\n  };\n}\n\ntype ArgumentTypes<F extends Function> = F extends (...args: infer A) => any ? A : never;\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction unsafeWrapper<T extends (...args: any) => any>(fn: T) {\n  if (typeof fn !== 'function') throw new Error('unsafeWrapper fn should be function');\n  return function (...args: ArgumentTypes<T>): ReturnType<T> | void {\n    try {\n      return fn.apply(null, args);\n    } catch (e) {}\n  };\n}\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction checksum(\n  len: number,\n  fn: (data: Uint8Array) => Uint8Array\n): Coder<Uint8Array, Uint8Array> {\n  assertNumber(len);\n  if (typeof fn !== 'function') throw new Error('checksum fn should be function');\n  return {\n    encode(data: Uint8Array) {\n      if (!isBytes(data)) throw new Error('checksum.encode: input should be Uint8Array');\n      const checksum = fn(data).slice(0, len);\n      const res = new Uint8Array(data.length + len);\n      res.set(data);\n      res.set(checksum, data.length);\n      return res;\n    },\n    decode(data: Uint8Array) {\n      if (!isBytes(data)) throw new Error('checksum.decode: input should be Uint8Array');\n      const payload = data.slice(0, -len);\n      const newChecksum = fn(payload).slice(0, len);\n      const oldChecksum = data.slice(-len);\n      for (let i = 0; i < len; i++)\n        if (newChecksum[i] !== oldChecksum[i]) throw new Error('Invalid checksum');\n      return payload;\n    },\n  };\n}\n\n// prettier-ignore\nexport const utils = {\n  alphabet, chain, checksum, convertRadix, convertRadix2, radix, radix2, join, padding,\n};\n\n// RFC 4648 aka RFC 3548\n// ---------------------\nexport const base16: BytesCoder = /* @__PURE__ */ chain(\n  radix2(4),\n  alphabet('0123456789ABCDEF'),\n  join('')\n);\nexport const base32: BytesCoder = /* @__PURE__ */ chain(\n  radix2(5),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'),\n  padding(5),\n  join('')\n);\nexport const base32nopad: BytesCoder = /* @__PURE__ */ chain(\n  radix2(5),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'),\n  join('')\n);\nexport const base32hex: BytesCoder = /* @__PURE__ */ chain(\n  radix2(5),\n  alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'),\n  padding(5),\n  join('')\n);\nexport const base32hexnopad: BytesCoder = /* @__PURE__ */ chain(\n  radix2(5),\n  alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'),\n  join('')\n);\nexport const base32crockford: BytesCoder = /* @__PURE__ */ chain(\n  radix2(5),\n  alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'),\n  join(''),\n  normalize((s: string) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1'))\n);\nexport const base64: BytesCoder = /* @__PURE__ */ chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),\n  padding(6),\n  join('')\n);\nexport const base64nopad: BytesCoder = /* @__PURE__ */ chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),\n  join('')\n);\nexport const base64url: BytesCoder = /* @__PURE__ */ chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),\n  padding(6),\n  join('')\n);\nexport const base64urlnopad: BytesCoder = /* @__PURE__ */ chain(\n  radix2(6),\n  alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),\n  join('')\n);\n\n// base58 code\n// -----------\nconst genBase58 = (abc: string) => chain(radix(58), alphabet(abc), join(''));\n\nexport const base58: BytesCoder = /* @__PURE__ */ genBase58(\n  '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n);\nexport const base58flickr: BytesCoder = /* @__PURE__ */ genBase58(\n  '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n);\nexport const base58xrp: BytesCoder = /* @__PURE__ */ genBase58(\n  'rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz'\n);\n\n// xmr ver is done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\n// Block encoding significantly reduces quadratic complexity of base58.\n\n// Data len (index) -> encoded block len\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr: BytesCoder = {\n  encode(data: Uint8Array) {\n    let res = '';\n    for (let i = 0; i < data.length; i += 8) {\n      const block = data.subarray(i, i + 8);\n      res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length]!, '1');\n    }\n    return res;\n  },\n  decode(str: string) {\n    let res: number[] = [];\n    for (let i = 0; i < str.length; i += 11) {\n      const slice = str.slice(i, i + 11);\n      const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n      const block = base58.decode(slice);\n      for (let j = 0; j < block.length - blockLen; j++) {\n        if (block[j] !== 0) throw new Error('base58xmr: wrong padding');\n      }\n      res = res.concat(Array.from(block.slice(block.length - blockLen)));\n    }\n    return Uint8Array.from(res);\n  },\n};\n\nexport const createBase58check = (sha256: (data: Uint8Array) => Uint8Array): BytesCoder =>\n  chain(\n    checksum(4, (data) => sha256(sha256(data))),\n    base58\n  );\n// legacy export, bad name\nexport const base58check = createBase58check;\n\n// Bech32 code\n// -----------\nexport interface Bech32Decoded<Prefix extends string = string> {\n  prefix: Prefix;\n  words: number[];\n}\nexport interface Bech32DecodedWithArray<Prefix extends string = string> {\n  prefix: Prefix;\n  words: number[];\n  bytes: Uint8Array;\n}\n\nconst BECH_ALPHABET: Coder<number[], string> = /* @__PURE__ */ chain(\n  alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'),\n  join('')\n);\n\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bech32Polymod(pre: number): number {\n  const b = pre >> 25;\n  let chk = (pre & 0x1ffffff) << 5;\n  for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n    if (((b >> i) & 1) === 1) chk ^= POLYMOD_GENERATORS[i]!;\n  }\n  return chk;\n}\n\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bechChecksum(prefix: string, words: number[], encodingConst = 1): string {\n  const len = prefix.length;\n  let chk = 1;\n  for (let i = 0; i < len; i++) {\n    const c = prefix.charCodeAt(i);\n    if (c < 33 || c > 126) throw new Error(`Invalid prefix (${prefix})`);\n    chk = bech32Polymod(chk) ^ (c >> 5);\n  }\n  chk = bech32Polymod(chk);\n  for (let i = 0; i < len; i++) chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n  for (let v of words) chk = bech32Polymod(chk) ^ v;\n  for (let i = 0; i < 6; i++) chk = bech32Polymod(chk);\n  chk ^= encodingConst;\n  return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\n\nexport interface Bech32 {\n  encode<Prefix extends string>(\n    prefix: Prefix,\n    words: number[] | Uint8Array,\n    limit?: number | false\n  ): `${Lowercase<Prefix>}1${string}`;\n  decode<Prefix extends string>(\n    str: `${Prefix}1${string}`,\n    limit?: number | false\n  ): Bech32Decoded<Prefix>;\n  encodeFromBytes(prefix: string, bytes: Uint8Array): string;\n  decodeToBytes(str: string): Bech32DecodedWithArray;\n  decodeUnsafe(str: string, limit?: number | false): void | Bech32Decoded<string>;\n  fromWords(to: number[]): Uint8Array;\n  fromWordsUnsafe(to: number[]): void | Uint8Array;\n  toWords(from: Uint8Array): number[];\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction genBech32(encoding: 'bech32' | 'bech32m'): Bech32 {\n  const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n  const _words = radix2(5);\n  const fromWords = _words.decode;\n  const toWords = _words.encode;\n  const fromWordsUnsafe = unsafeWrapper(fromWords);\n\n  function encode<Prefix extends string>(\n    prefix: Prefix,\n    words: number[] | Uint8Array,\n    limit: number | false = 90\n  ): `${Lowercase<Prefix>}1${string}` {\n    if (typeof prefix !== 'string')\n      throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n    if (words instanceof Uint8Array) words = Array.from(words);\n    if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n      throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n    if (prefix.length === 0) throw new TypeError(`Invalid prefix length ${prefix.length}`);\n    const actualLength = prefix.length + 7 + words.length;\n    if (limit !== false && actualLength > limit)\n      throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n    const lowered = prefix.toLowerCase();\n    const sum = bechChecksum(lowered, words, ENCODING_CONST);\n    return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}` as `${Lowercase<Prefix>}1${string}`;\n  }\n\n  function decode<Prefix extends string>(\n    str: `${Prefix}1${string}`,\n    limit?: number | false\n  ): Bech32Decoded<Prefix>;\n  function decode(str: string, limit?: number | false): Bech32Decoded;\n  function decode(str: string, limit: number | false = 90): Bech32Decoded {\n    if (typeof str !== 'string')\n      throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n    if (str.length < 8 || (limit !== false && str.length > limit))\n      throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n    // don't allow mixed case\n    const lowered = str.toLowerCase();\n    if (str !== lowered && str !== str.toUpperCase())\n      throw new Error(`String must be lowercase or uppercase`);\n    const sepIndex = lowered.lastIndexOf('1');\n    if (sepIndex === 0 || sepIndex === -1)\n      throw new Error(`Letter \"1\" must be present between prefix and data only`);\n    const prefix = lowered.slice(0, sepIndex);\n    const data = lowered.slice(sepIndex + 1);\n    if (data.length < 6) throw new Error('Data must be at least 6 characters long');\n    const words = BECH_ALPHABET.decode(data).slice(0, -6);\n    const sum = bechChecksum(prefix, words, ENCODING_CONST);\n    if (!data.endsWith(sum)) throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n    return { prefix, words };\n  }\n\n  const decodeUnsafe = unsafeWrapper(decode);\n\n  function decodeToBytes(str: string): Bech32DecodedWithArray {\n    const { prefix, words } = decode(str, false);\n    return { prefix, words, bytes: fromWords(words) };\n  }\n\n  function encodeFromBytes(prefix: string, bytes: Uint8Array) {\n    return encode(prefix, toWords(bytes));\n  }\n\n  return {\n    encode,\n    decode,\n    encodeFromBytes,\n    decodeToBytes,\n    decodeUnsafe,\n    fromWords,\n    fromWordsUnsafe,\n    toWords,\n  };\n}\n\nexport const bech32: Bech32 = /* @__PURE__ */ genBech32('bech32');\nexport const bech32m: Bech32 = /* @__PURE__ */ genBech32('bech32m');\n\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\nexport const utf8: BytesCoder = {\n  encode: (data) => new TextDecoder().decode(data),\n  decode: (str) => new TextEncoder().encode(str),\n};\n\nexport const hex: BytesCoder = /* @__PURE__ */ chain(\n  radix2(4),\n  alphabet('0123456789abcdef'),\n  join(''),\n  normalize((s: string) => {\n    if (typeof s !== 'string' || s.length % 2)\n      throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n  })\n);\n\n// prettier-ignore\nconst CODERS = {\n  utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\ntype CoderType = keyof typeof CODERS;\nconst coderTypeError =\n  'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\n\nexport const bytesToString = (type: CoderType, bytes: Uint8Array): string => {\n  if (typeof type !== 'string' || !CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (!isBytes(bytes)) throw new TypeError('bytesToString() expects Uint8Array');\n  return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString; // as in python, but for bytes only\n\nexport const stringToBytes = (type: CoderType, str: string): Uint8Array => {\n  if (!CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (typeof str !== 'string') throw new TypeError('stringToBytes() expects string');\n  return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (u8a(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\nexport function equalBytes(b1: Uint8Array, b2: Uint8Array) {\n  // We don't care about timing attacks here\n  if (b1.length !== b2.length) return false;\n  for (let i = 0; i < b1.length; i++) if (b1[i] !== b2[i]) return false;\n  return true;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport const bitSet = (n: bigint, pos: number, value: boolean) => {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || val instanceof Uint8Array,\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n","import { keccak_256 } from '@noble/hashes/sha3';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { utf8ToBytes } from '@noble/hashes/utils';\nimport { Field, mod, validateField, invert } from '@noble/curves/abstract/modular';\nimport { poseidon } from '@noble/curves/abstract/poseidon';\nimport { weierstrass, DER } from '@noble/curves/abstract/weierstrass';\nimport * as u from '@noble/curves/abstract/utils';\nimport { getHash } from '@noble/curves/_shortw_utils';\nconst CURVE_ORDER = BigInt('3618502788666131213697322783095070105526743751716087489154079457884512865583');\nexport const MAX_VALUE = BigInt('0x800000000000000000000000000000000000000000000000000000000000000');\nconst nBitLength = 252;\nfunction bits2int(bytes) {\n    while (bytes[0] === 0)\n        bytes = bytes.subarray(1);\n    const delta = bytes.length * 8 - nBitLength;\n    const num = u.bytesToNumberBE(bytes);\n    return delta > 0 ? num >> BigInt(delta) : num;\n}\nfunction hex0xToBytes(hex) {\n    if (typeof hex === 'string') {\n        hex = strip0x(hex);\n        if (hex.length & 1)\n            hex = '0' + hex;\n    }\n    return u.hexToBytes(hex);\n}\nconst curve = weierstrass({\n    a: BigInt(1),\n    b: BigInt('3141592653589793238462643383279502884197169399375105820974944592307816406665'),\n    Fp: Field(BigInt('0x800000000000011000000000000000000000000000000000000000000000001')),\n    n: CURVE_ORDER,\n    nBitLength,\n    Gx: BigInt('874739451078007766457464989774322083649278607533249481151382481072868806602'),\n    Gy: BigInt('152666792071518830868575557812948353041420400780739481342941381225525861407'),\n    h: BigInt(1),\n    lowS: false,\n    ...getHash(sha256),\n    bits2int,\n    bits2int_modN: (bytes) => {\n        const hex = u.bytesToNumberBE(bytes).toString(16);\n        if (hex.length === 63)\n            bytes = hex0xToBytes(hex + '0');\n        return mod(bits2int(bytes), CURVE_ORDER);\n    },\n});\nexport const _starkCurve = curve;\nfunction ensureBytes(hex) {\n    return u.ensureBytes('', typeof hex === 'string' ? hex0xToBytes(hex) : hex);\n}\nfunction normPrivKey(privKey) {\n    return u.bytesToHex(ensureBytes(privKey)).padStart(64, '0');\n}\nexport function getPublicKey(privKey, isCompressed = false) {\n    return curve.getPublicKey(normPrivKey(privKey), isCompressed);\n}\nexport function getSharedSecret(privKeyA, pubKeyB) {\n    return curve.getSharedSecret(normPrivKey(privKeyA), pubKeyB);\n}\nfunction checkSignature(signature) {\n    const { r, s } = signature;\n    if (r < 0n || r >= MAX_VALUE)\n        throw new Error(`Signature.r should be [1, ${MAX_VALUE})`);\n    const w = invert(s, CURVE_ORDER);\n    if (w < 0n || w >= MAX_VALUE)\n        throw new Error(`inv(Signature.s) should be [1, ${MAX_VALUE})`);\n}\nfunction checkMessage(msgHash) {\n    const bytes = ensureBytes(msgHash);\n    const num = u.bytesToNumberBE(bytes);\n    if (num >= MAX_VALUE)\n        throw new Error(`msgHash should be [0, ${MAX_VALUE})`);\n    return bytes;\n}\nexport function sign(msgHash, privKey, opts) {\n    const sig = curve.sign(checkMessage(msgHash), normPrivKey(privKey), opts);\n    checkSignature(sig);\n    return sig;\n}\nexport function verify(signature, msgHash, pubKey) {\n    if (!(signature instanceof Signature)) {\n        const bytes = ensureBytes(signature);\n        try {\n            signature = Signature.fromDER(bytes);\n        }\n        catch (derError) {\n            if (!(derError instanceof DER.Err))\n                throw derError;\n            signature = Signature.fromCompact(bytes);\n        }\n    }\n    checkSignature(signature);\n    return curve.verify(signature, checkMessage(msgHash), ensureBytes(pubKey));\n}\nconst { CURVE, ProjectivePoint, Signature, utils } = curve;\nexport { CURVE, ProjectivePoint, Signature, utils };\nfunction extractX(bytes) {\n    const hex = u.bytesToHex(bytes.subarray(1));\n    const stripped = hex.replace(/^0+/gm, '');\n    return `0x${stripped}`;\n}\nfunction strip0x(hex) {\n    return hex.replace(/^0x/i, '');\n}\nexport function grindKey(seed) {\n    const _seed = ensureBytes(seed);\n    const sha256mask = 2n ** 256n;\n    const limit = sha256mask - mod(sha256mask, CURVE_ORDER);\n    for (let i = 0;; i++) {\n        const key = sha256Num(u.concatBytes(_seed, u.numberToVarBytesBE(BigInt(i))));\n        if (key < limit)\n            return mod(key, CURVE_ORDER).toString(16);\n        if (i === 100000)\n            throw new Error('grindKey is broken: tried 100k vals');\n    }\n}\nexport function getStarkKey(privateKey) {\n    return extractX(getPublicKey(privateKey, true));\n}\nexport function ethSigToPrivate(signature) {\n    signature = strip0x(signature);\n    if (signature.length !== 130)\n        throw new Error('Wrong ethereum signature');\n    return grindKey(signature.substring(0, 64));\n}\nconst MASK_31 = 2n ** 31n - 1n;\nconst int31 = (n) => Number(n & MASK_31);\nexport function getAccountPath(layer, application, ethereumAddress, index) {\n    const layerNum = int31(sha256Num(layer));\n    const applicationNum = int31(sha256Num(application));\n    const eth = u.hexToNumber(strip0x(ethereumAddress));\n    return `m/2645'/${layerNum}'/${applicationNum}'/${int31(eth)}'/${int31(eth >> 31n)}'/${index}`;\n}\nconst PEDERSEN_POINTS = [\n    new ProjectivePoint(2089986280348253421170679821480865132823066470938446095505822317253594081284n, 1713931329540660377023406109199410414810705867260802078187082345529207694986n, 1n),\n    new ProjectivePoint(996781205833008774514500082376783249102396023663454813447423147977397232763n, 1668503676786377725805489344771023921079126552019160156920634619255970485781n, 1n),\n    new ProjectivePoint(2251563274489750535117886426533222435294046428347329203627021249169616184184n, 1798716007562728905295480679789526322175868328062420237419143593021674992973n, 1n),\n    new ProjectivePoint(2138414695194151160943305727036575959195309218611738193261179310511854807447n, 113410276730064486255102093846540133784865286929052426931474106396135072156n, 1n),\n    new ProjectivePoint(2379962749567351885752724891227938183011949129833673362440656643086021394946n, 776496453633298175483985398648758586525933812536653089401905292063708816422n, 1n),\n];\nfunction pedersenPrecompute(p1, p2) {\n    const out = [];\n    let p = p1;\n    for (let i = 0; i < 248; i++) {\n        out.push(p);\n        p = p.double();\n    }\n    p = p2;\n    for (let i = 0; i < 4; i++) {\n        out.push(p);\n        p = p.double();\n    }\n    return out;\n}\nconst PEDERSEN_POINTS1 = pedersenPrecompute(PEDERSEN_POINTS[1], PEDERSEN_POINTS[2]);\nconst PEDERSEN_POINTS2 = pedersenPrecompute(PEDERSEN_POINTS[3], PEDERSEN_POINTS[4]);\nfunction pedersenArg(arg) {\n    let value;\n    if (typeof arg === 'bigint') {\n        value = arg;\n    }\n    else if (typeof arg === 'number') {\n        if (!Number.isSafeInteger(arg))\n            throw new Error(`Invalid pedersenArg: ${arg}`);\n        value = BigInt(arg);\n    }\n    else {\n        value = u.bytesToNumberBE(ensureBytes(arg));\n    }\n    if (!(0n <= value && value < curve.CURVE.Fp.ORDER))\n        throw new Error(`PedersenArg should be 0 <= value < CURVE.P: ${value}`);\n    return value;\n}\nfunction pedersenSingle(point, value, constants) {\n    let x = pedersenArg(value);\n    for (let j = 0; j < 252; j++) {\n        const pt = constants[j];\n        if (pt.equals(point))\n            throw new Error('Same point');\n        if ((x & 1n) !== 0n)\n            point = point.add(pt);\n        x >>= 1n;\n    }\n    return point;\n}\nexport function pedersen(x, y) {\n    let point = PEDERSEN_POINTS[0];\n    point = pedersenSingle(point, x, PEDERSEN_POINTS1);\n    point = pedersenSingle(point, y, PEDERSEN_POINTS2);\n    return extractX(point.toRawBytes(true));\n}\nexport const computeHashOnElements = (data, fn = pedersen) => [0, ...data, data.length].reduce((x, y) => fn(x, y));\nconst MASK_250 = u.bitMask(250);\nexport const keccak = (data) => u.bytesToNumberBE(keccak_256(data)) & MASK_250;\nconst sha256Num = (data) => u.bytesToNumberBE(sha256(data));\nexport const Fp251 = Field(BigInt('3618502788666131213697322783095070105623107215331596699973092056135872020481'));\nfunction poseidonRoundConstant(Fp, name, idx) {\n    const val = Fp.fromBytes(sha256(utf8ToBytes(`${name}${idx}`)));\n    return Fp.create(val);\n}\nexport function _poseidonMDS(Fp, name, m, attempt = 0) {\n    const x_values = [];\n    const y_values = [];\n    for (let i = 0; i < m; i++) {\n        x_values.push(poseidonRoundConstant(Fp, `${name}x`, attempt * m + i));\n        y_values.push(poseidonRoundConstant(Fp, `${name}y`, attempt * m + i));\n    }\n    if (new Set([...x_values, ...y_values]).size !== 2 * m)\n        throw new Error('X and Y values are not distinct');\n    return x_values.map((x) => y_values.map((y) => Fp.inv(Fp.sub(x, y))));\n}\nconst MDS_SMALL = [\n    [3, 1, 1],\n    [1, -1, 1],\n    [1, 1, -2],\n].map((i) => i.map(BigInt));\nexport function poseidonBasic(opts, mds) {\n    validateField(opts.Fp);\n    if (!Number.isSafeInteger(opts.rate) || !Number.isSafeInteger(opts.capacity))\n        throw new Error(`Wrong poseidon opts: ${opts}`);\n    const m = opts.rate + opts.capacity;\n    const rounds = opts.roundsFull + opts.roundsPartial;\n    const roundConstants = [];\n    for (let i = 0; i < rounds; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++)\n            row.push(poseidonRoundConstant(opts.Fp, 'Hades', m * i + j));\n        roundConstants.push(row);\n    }\n    const res = poseidon({\n        ...opts,\n        t: m,\n        sboxPower: 3,\n        reversePartialPowIdx: true,\n        mds,\n        roundConstants,\n    });\n    res.m = m;\n    res.rate = opts.rate;\n    res.capacity = opts.capacity;\n    return res;\n}\nexport function poseidonCreate(opts, mdsAttempt = 0) {\n    const m = opts.rate + opts.capacity;\n    if (!Number.isSafeInteger(mdsAttempt))\n        throw new Error(`Wrong mdsAttempt=${mdsAttempt}`);\n    return poseidonBasic(opts, _poseidonMDS(opts.Fp, 'HadesMDS', m, mdsAttempt));\n}\nexport const poseidonSmall = poseidonBasic({ Fp: Fp251, rate: 2, capacity: 1, roundsFull: 8, roundsPartial: 83 }, MDS_SMALL);\nexport function poseidonHash(x, y, fn = poseidonSmall) {\n    return fn([x, y, 2n])[0];\n}\nexport function poseidonHashFunc(x, y, fn = poseidonSmall) {\n    return u.numberToVarBytesBE(poseidonHash(u.bytesToNumberBE(x), u.bytesToNumberBE(y), fn));\n}\nexport function poseidonHashSingle(x, fn = poseidonSmall) {\n    return fn([x, 0n, 1n])[0];\n}\nexport function poseidonHashMany(values, fn = poseidonSmall) {\n    const { m, rate } = fn;\n    if (!Array.isArray(values))\n        throw new Error('bigint array expected in values');\n    const padded = Array.from(values);\n    padded.push(1n);\n    while (padded.length % rate !== 0)\n        padded.push(0n);\n    let state = new Array(m).fill(0n);\n    for (let i = 0; i < padded.length; i += rate) {\n        for (let j = 0; j < rate; j++)\n            state[j] += padded[i + j];\n        state = fn(state);\n    }\n    return state[0];\n}\n","function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\n// copied from utils\nfunction isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!isBytes(b)) throw new Error('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number) => l;\nconst rotr32L = (h: number, _l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\nfunction isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\n// Other libraries would silently corrupt the data instead of throwing an error,\n// when they don't support it.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!isBytes(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!isBytes(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    if (!isBytes(a)) throw new Error('Uint8Array expected');\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapXOFConstructorWithOpts,\n  HashXOF,\n} from './utils.js';\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA]: [number[], number[], bigint[]] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h: number, l: number, s: number) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    exists(this, false);\n    bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapXOFConstructorWithOpts<HashXOF<Keccak>, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n","import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Poseidon Hash: https://eprint.iacr.org/2019/458.pdf, https://www.poseidon-hash.info\nimport { IField, FpPow, validateField } from './modular.js';\n// We don't provide any constants, since different implementations use different constants.\n// For reference constants see './test/poseidon.test.js'.\nexport type PoseidonOpts = {\n  Fp: IField<bigint>;\n  t: number;\n  roundsFull: number;\n  roundsPartial: number;\n  sboxPower?: number;\n  reversePartialPowIdx?: boolean; // Hack for stark\n  mds: bigint[][];\n  roundConstants: bigint[][];\n};\n\nexport function validateOpts(opts: PoseidonOpts) {\n  const { Fp, mds, reversePartialPowIdx: rev, roundConstants: rc } = opts;\n  const { roundsFull, roundsPartial, sboxPower, t } = opts;\n\n  validateField(Fp);\n  for (const i of ['t', 'roundsFull', 'roundsPartial'] as const) {\n    if (typeof opts[i] !== 'number' || !Number.isSafeInteger(opts[i]))\n      throw new Error(`Poseidon: invalid param ${i}=${opts[i]} (${typeof opts[i]})`);\n  }\n\n  // MDS is TxT matrix\n  if (!Array.isArray(mds) || mds.length !== t) throw new Error('Poseidon: wrong MDS matrix');\n  const _mds = mds.map((mdsRow) => {\n    if (!Array.isArray(mdsRow) || mdsRow.length !== t)\n      throw new Error(`Poseidon MDS matrix row: ${mdsRow}`);\n    return mdsRow.map((i) => {\n      if (typeof i !== 'bigint') throw new Error(`Poseidon MDS matrix value=${i}`);\n      return Fp.create(i);\n    });\n  });\n\n  if (rev !== undefined && typeof rev !== 'boolean')\n    throw new Error(`Poseidon: invalid param reversePartialPowIdx=${rev}`);\n\n  if (roundsFull % 2 !== 0) throw new Error(`Poseidon roundsFull is not even: ${roundsFull}`);\n  const rounds = roundsFull + roundsPartial;\n\n  if (!Array.isArray(rc) || rc.length !== rounds)\n    throw new Error('Poseidon: wrong round constants');\n  const roundConstants = rc.map((rc) => {\n    if (!Array.isArray(rc) || rc.length !== t)\n      throw new Error(`Poseidon wrong round constants: ${rc}`);\n    return rc.map((i) => {\n      if (typeof i !== 'bigint' || !Fp.isValid(i))\n        throw new Error(`Poseidon wrong round constant=${i}`);\n      return Fp.create(i);\n    });\n  });\n\n  if (!sboxPower || ![3, 5, 7].includes(sboxPower))\n    throw new Error(`Poseidon wrong sboxPower=${sboxPower}`);\n  const _sboxPower = BigInt(sboxPower);\n  let sboxFn = (n: bigint) => FpPow(Fp, n, _sboxPower);\n  // Unwrapped sbox power for common cases (195->142μs)\n  if (sboxPower === 3) sboxFn = (n: bigint) => Fp.mul(Fp.sqrN(n), n);\n  else if (sboxPower === 5) sboxFn = (n: bigint) => Fp.mul(Fp.sqrN(Fp.sqrN(n)), n);\n\n  return Object.freeze({ ...opts, rounds, sboxFn, roundConstants, mds: _mds });\n}\n\nexport function splitConstants(rc: bigint[], t: number) {\n  if (typeof t !== 'number') throw new Error('poseidonSplitConstants: wrong t');\n  if (!Array.isArray(rc) || rc.length % t) throw new Error('poseidonSplitConstants: wrong rc');\n  const res = [];\n  let tmp = [];\n  for (let i = 0; i < rc.length; i++) {\n    tmp.push(rc[i]);\n    if (tmp.length === t) {\n      res.push(tmp);\n      tmp = [];\n    }\n  }\n  return res;\n}\n\nexport function poseidon(opts: PoseidonOpts) {\n  const _opts = validateOpts(opts);\n  const { Fp, mds, roundConstants, rounds, roundsPartial, sboxFn, t } = _opts;\n  const halfRoundsFull = _opts.roundsFull / 2;\n  const partialIdx = _opts.reversePartialPowIdx ? t - 1 : 0;\n  const poseidonRound = (values: bigint[], isFull: boolean, idx: number) => {\n    values = values.map((i, j) => Fp.add(i, roundConstants[idx][j]));\n\n    if (isFull) values = values.map((i) => sboxFn(i));\n    else values[partialIdx] = sboxFn(values[partialIdx]);\n    // Matrix multiplication\n    values = mds.map((i) => i.reduce((acc, i, j) => Fp.add(acc, Fp.mulN(i, values[j])), Fp.ZERO));\n    return values;\n  };\n  const poseidonHash = function poseidonHash(values: bigint[]) {\n    if (!Array.isArray(values) || values.length !== t)\n      throw new Error(`Poseidon: wrong values (expected array of bigints with length ${t})`);\n    values = values.map((i) => {\n      if (typeof i !== 'bigint') throw new Error(`Poseidon: wrong value=${i} (${typeof i})`);\n      return Fp.create(i);\n    });\n    let round = 0;\n    // Apply r_f/2 full rounds.\n    for (let i = 0; i < halfRoundsFull; i++) values = poseidonRound(values, true, round++);\n    // Apply r_p partial rounds.\n    for (let i = 0; i < roundsPartial; i++) values = poseidonRound(values, false, round++);\n    // Apply r_f/2 full rounds.\n    for (let i = 0; i < halfRoundsFull; i++) values = poseidonRound(values, true, round++);\n\n    if (round !== rounds)\n      throw new Error(`Poseidon: wrong number of rounds: last round=${round}, total=${rounds}`);\n    return values;\n  };\n  // For verification in tests\n  poseidonHash.roundConstants = roundConstants;\n  return poseidonHash;\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n","// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","/**\n * Test whether a string contains an integer number\n */\nexport function isInteger(value: string): boolean {\n  return INTEGER_REGEX.test(value)\n}\n\nconst INTEGER_REGEX = /^-?[0-9]+$/\n\n/**\n * Test whether a string contains a number\n * http://stackoverflow.com/questions/13340717/json-numbers-regular-expression\n */\nexport function isNumber(value: string): boolean {\n  return NUMBER_REGEX.test(value)\n}\n\nconst NUMBER_REGEX = /^-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?$/\n\n/**\n * Test whether a string can be safely represented with a number\n * without information loss.\n *\n * When approx is true, floating point numbers that lose a few digits but\n * are still approximately equal in value are considered safe too.\n * Integer numbers must still be exactly equal.\n */\nexport function isSafeNumber(\n  value: string,\n  config?: {\n    approx: boolean\n  }\n): boolean {\n  const num = parseFloat(value)\n  const str = String(num)\n\n  const v = extractSignificantDigits(value)\n  const s = extractSignificantDigits(str)\n\n  if (v === s) {\n    return true\n  }\n\n  if (config?.approx === true) {\n    // A value is approximately equal when:\n    // 1. it is a floating point number, not an integer\n    // 2. it has at least 14 digits\n    // 3. the first 14 digits are equal\n    const requiredDigits = 14\n    if (\n      !isInteger(value) &&\n      s.length >= requiredDigits &&\n      v.startsWith(s.substring(0, requiredDigits))\n    ) {\n      return true\n    }\n  }\n\n  return false\n}\n\nexport enum UnsafeNumberReason {\n  underflow = 'underflow',\n  overflow = 'overflow',\n  truncate_integer = 'truncate_integer',\n  truncate_float = 'truncate_float'\n}\n\n/**\n * When the provided value is an unsafe number, describe what the reason is:\n * overflow, underflow, truncate_integer, or truncate_float.\n * Returns undefined when the value is safe.\n */\nexport function getUnsafeNumberReason(value: string): UnsafeNumberReason | undefined {\n  if (isSafeNumber(value, { approx: false })) {\n    return undefined\n  }\n\n  if (isInteger(value)) {\n    return UnsafeNumberReason.truncate_integer\n  }\n\n  const num = parseFloat(value)\n  if (!isFinite(num)) {\n    return UnsafeNumberReason.overflow\n  }\n\n  if (num === 0) {\n    return UnsafeNumberReason.underflow\n  }\n\n  return UnsafeNumberReason.truncate_float\n}\n\n/**\n * Convert a string into a number when it is safe to do so.\n * Throws an error otherwise, explaining the reason.\n */\nexport function toSafeNumberOrThrow(\n  value: string,\n  config?: {\n    approx: boolean\n  }\n): number {\n  const number = parseFloat(value)\n\n  const unsafeReason = getUnsafeNumberReason(value)\n  if (\n    config?.approx === true\n      ? unsafeReason && unsafeReason !== UnsafeNumberReason.truncate_float\n      : unsafeReason\n  ) {\n    const unsafeReasonText = unsafeReason.replace(/_\\w+$/, '')\n    throw new Error(\n      'Cannot safely convert to number: ' +\n        `the value '${value}' would ${unsafeReasonText} and become ${number}`\n    )\n  }\n\n  return number\n}\n\n/**\n * Get the significant digits of a number.\n *\n * For example:\n *   '2.34' returns '234'\n *   '-77' returns '77'\n *   '0.003400' returns '34'\n *   '120.5e+30' returns '1205'\n **/\nexport function extractSignificantDigits(value: string): string {\n  return (\n    value\n      // from \"-0.250e+30\" to \"-0.250\"\n      .replace(EXPONENTIAL_PART_REGEX, '')\n\n      // from \"-0.250\" to \"-0250\"\n      .replace(DOT_REGEX, '')\n\n      // from \"-0250\" to \"-025\"\n      .replace(TRAILING_ZEROS_REGEX, '')\n\n      // from \"-025\" to \"25\"\n      .replace(LEADING_MINUS_AND_ZEROS_REGEX, '')\n  )\n}\n\nconst EXPONENTIAL_PART_REGEX = /[eE][+-]?\\d+$/\nconst LEADING_MINUS_AND_ZEROS_REGEX = /^-?(0*)?/\nconst DOT_REGEX = /\\./\nconst TRAILING_ZEROS_REGEX = /0+$/\n","import {\n  extractSignificantDigits,\n  getUnsafeNumberReason,\n  isInteger,\n  isNumber,\n  UnsafeNumberReason\n} from './utils.js'\n\n/**\n * A lossless number. Stores its numeric value as string\n */\nexport class LosslessNumber {\n  // numeric value as string\n  value: string\n\n  // type information\n  isLosslessNumber = true\n\n  constructor(value: string) {\n    if (!isNumber(value)) {\n      throw new Error('Invalid number (value: \"' + value + '\")')\n    }\n\n    this.value = value\n  }\n\n  /**\n   * Get the value of the LosslessNumber as number or bigint.\n   *\n   * - a number is returned for safe numbers and decimal values that only lose some insignificant digits\n   * - a bigint is returned for big integer numbers\n   * - an Error is thrown for values that will overflow or underflow\n   *\n   * Note that you can implement your own strategy for conversion by just getting the value as string\n   * via .toString(), and using util functions like isInteger, isSafeNumber, getUnsafeNumberReason,\n   * and toSafeNumberOrThrow to convert it to a numeric value.\n   */\n  valueOf(): number | bigint {\n    const unsafeReason = getUnsafeNumberReason(this.value)\n\n    // safe or truncate_float\n    if (unsafeReason === undefined || unsafeReason === UnsafeNumberReason.truncate_float) {\n      return parseFloat(this.value)\n    }\n\n    // truncate_integer\n    if (isInteger(this.value)) {\n      return BigInt(this.value)\n    }\n\n    // overflow or underflow\n    throw new Error(\n      'Cannot safely convert to number: ' +\n        `the value '${this.value}' would ${unsafeReason} and become ${parseFloat(this.value)}`\n    )\n  }\n\n  /**\n   * Get the value of the LosslessNumber as string.\n   */\n  toString(): string {\n    return this.value\n  }\n\n  // Note: we do NOT implement a .toJSON() method, and you should not implement\n  // or use that, it cannot safely turn the numeric value in the string into\n  // stringified JSON since it has to be parsed into a number first.\n}\n\n/**\n * Test whether a value is a LosslessNumber\n */\nexport function isLosslessNumber(value: unknown): value is LosslessNumber {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return (value && typeof value === 'object' && value.isLosslessNumber === true) || false\n}\n\n/**\n * Convert a number into a LosslessNumber if this is possible in a safe way\n * If the value has too many digits, or is NaN or Infinity, an error will be thrown\n */\nexport function toLosslessNumber(value: number): LosslessNumber {\n  if (extractSignificantDigits(value + '').length > 15) {\n    throw new Error(\n      'Invalid number: contains more than 15 digits and is most likely truncated and unsafe by itself ' +\n        `(value: ${value})`\n    )\n  }\n\n  if (isNaN(value)) {\n    throw new Error('Invalid number: NaN')\n  }\n\n  if (!isFinite(value)) {\n    throw new Error('Invalid number: ' + value)\n  }\n\n  return new LosslessNumber(String(value))\n}\n","import { LosslessNumber } from './LosslessNumber.js'\nimport { isInteger } from './utils.js'\n\nexport function parseLosslessNumber(value: string): LosslessNumber {\n  return new LosslessNumber(value)\n}\n\nexport function parseNumberAndBigInt(value: string): number | bigint {\n  return isInteger(value) ? BigInt(value) : parseFloat(value)\n}\n","import { isLosslessNumber } from './LosslessNumber.js'\nimport type { GenericObject, Reviver } from './types'\n\n/**\n * Revive a json object.\n * Applies the reviver function recursively on all values in the JSON object.\n * @param json   A JSON Object, Array, or value\n * @param reviver\n *              A reviver function invoked with arguments `key` and `value`,\n *              which must return a replacement value. The function context\n *              (`this`) is the Object or Array that contains the currently\n *              handled value.\n */\nexport function revive(json: unknown, reviver: Reviver): unknown {\n  return reviveValue({ '': json }, '', json, reviver)\n}\n\n/**\n * Revive a value\n */\nfunction reviveValue(\n  context: GenericObject<unknown> | Array<unknown>,\n  key: string,\n  value: unknown,\n  reviver: Reviver\n): unknown {\n  if (Array.isArray(value)) {\n    return reviver.call(context, key, reviveArray(value, reviver))\n  } else if (value && typeof value === 'object' && !isLosslessNumber(value)) {\n    // note the special case for LosslessNumber,\n    // we don't want to iterate over the internals of a LosslessNumber\n    return reviver.call(\n      context,\n      key,\n      reviveObject(value as unknown as GenericObject<unknown>, reviver)\n    )\n  } else {\n    return reviver.call(context, key, value)\n  }\n}\n\n/**\n * Revive the properties of an object\n */\nfunction reviveObject(object: GenericObject<unknown>, reviver: Reviver) {\n  Object.keys(object).forEach((key) => {\n    const value = reviveValue(object, key, object[key], reviver)\n    if (value !== undefined) {\n      object[key] = value\n    } else {\n      delete object[key]\n    }\n  })\n\n  return object\n}\n\n/**\n * Revive the properties of an Array\n */\nfunction reviveArray(array: Array<unknown>, reviver: Reviver): Array<unknown> {\n  for (let i = 0; i < array.length; i++) {\n    array[i] = reviveValue(array, i + '', array[i], reviver)\n  }\n\n  return array\n}\n","import { parseLosslessNumber } from './numberParsers.js'\nimport { revive } from './revive.js'\nimport type { NumberParser, Reviver } from './types'\nimport { GenericObject, JavaScriptValue } from './types'\n\n/**\n * The LosslessJSON.parse() method parses a string as JSON, optionally transforming\n * the value produced by parsing.\n *\n * The parser is based on the parser of Tan Li Hou shared in\n * https://lihautan.com/json-parser-with-javascript/\n *\n * @param text\n * The string to parse as JSON. See the JSON object for a description of JSON syntax.\n *\n * @param [reviver]\n * If a function, prescribes how the value originally produced by parsing is\n * transformed, before being returned.\n *\n * @param [parseNumber=parseLosslessNumber]\n * Pass a custom number parser. Input is a string, and the output can be unknown\n * numeric value: number, bigint, LosslessNumber, or a custom BigNumber library.\n *\n * @returns Returns the Object corresponding to the given JSON text.\n *\n * @throws Throws a SyntaxError exception if the string to parse is not valid JSON.\n */\nexport function parse(\n  text: string,\n  reviver?: Reviver,\n  parseNumber: NumberParser = parseLosslessNumber\n): JavaScriptValue {\n  let i = 0\n  const value = parseValue()\n  expectValue(value)\n  expectEndOfInput()\n\n  return reviver ? revive(value, reviver) : value\n\n  function parseObject(): GenericObject<unknown> | undefined {\n    if (text.charCodeAt(i) === codeOpeningBrace) {\n      i++\n      skipWhitespace()\n\n      const object: GenericObject<unknown> = {}\n      let initial = true\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBrace) {\n        if (!initial) {\n          eatComma()\n          skipWhitespace()\n        } else {\n          initial = false\n        }\n\n        const start = i\n\n        const key = parseString()\n        if (key === undefined) {\n          throwObjectKeyExpected()\n        }\n\n        skipWhitespace()\n        eatColon()\n        const value = parseValue()\n\n        if (value === undefined) {\n          throwObjectValueExpected()\n        }\n\n        // TODO: test deep equal instead of strict equal\n        if (Object.prototype.hasOwnProperty.call(object, key) && !isDeepEqual(value, object[key])) {\n          // Note that we could also test `if(key in object) {...}`\n          // or `if (object[key] !== 'undefined') {...}`, but that is slower.\n          throwDuplicateKey(key, start + 1)\n        }\n\n        object[key] = value\n      }\n\n      if (text.charCodeAt(i) !== codeClosingBrace) {\n        throwObjectKeyOrEndExpected()\n      }\n      i++\n\n      return object\n    }\n  }\n\n  function parseArray(): Array<unknown> | unknown {\n    if (text.charCodeAt(i) === codeOpeningBracket) {\n      i++\n      skipWhitespace()\n\n      const array = []\n      let initial = true\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBracket) {\n        if (!initial) {\n          eatComma()\n        } else {\n          initial = false\n        }\n\n        const value = parseValue()\n        expectArrayItem(value)\n        array.push(value)\n      }\n\n      if (text.charCodeAt(i) !== codeClosingBracket) {\n        throwArrayItemOrEndExpected()\n      }\n      i++\n\n      return array\n    }\n  }\n\n  function parseValue(): unknown {\n    skipWhitespace()\n\n    const value =\n      parseString() ??\n      parseNumeric() ??\n      parseObject() ??\n      parseArray() ??\n      parseKeyword('true', true) ??\n      parseKeyword('false', false) ??\n      parseKeyword('null', null)\n\n    skipWhitespace()\n\n    return value\n  }\n\n  function parseKeyword(name: string, value: unknown): unknown | undefined {\n    if (text.slice(i, i + name.length) === name) {\n      i += name.length\n      return value\n    }\n  }\n\n  function skipWhitespace() {\n    while (isWhitespace(text.charCodeAt(i))) {\n      i++\n    }\n  }\n\n  function parseString() {\n    if (text.charCodeAt(i) === codeDoubleQuote) {\n      i++\n      let result = ''\n      while (i < text.length && text.charCodeAt(i) !== codeDoubleQuote) {\n        if (text.charCodeAt(i) === codeBackslash) {\n          const char = text[i + 1]\n          const escapeChar = escapeCharacters[char]\n          if (escapeChar !== undefined) {\n            result += escapeChar\n            i++\n          } else if (char === 'u') {\n            if (\n              isHex(text.charCodeAt(i + 2)) &&\n              isHex(text.charCodeAt(i + 3)) &&\n              isHex(text.charCodeAt(i + 4)) &&\n              isHex(text.charCodeAt(i + 5))\n            ) {\n              result += String.fromCharCode(parseInt(text.slice(i + 2, i + 6), 16))\n              i += 5\n            } else {\n              throwInvalidUnicodeCharacter(i)\n            }\n          } else {\n            throwInvalidEscapeCharacter(i)\n          }\n        } else {\n          if (isValidStringCharacter(text.charCodeAt(i))) {\n            result += text[i]\n          } else {\n            throwInvalidCharacter(text[i])\n          }\n        }\n        i++\n      }\n      expectEndOfString()\n      i++\n      return result\n    }\n  }\n\n  function parseNumeric() {\n    const start = i\n    if (text.charCodeAt(i) === codeMinus) {\n      i++\n      expectDigit(start)\n    }\n\n    if (text.charCodeAt(i) === codeZero) {\n      i++\n    } else if (isNonZeroDigit(text.charCodeAt(i))) {\n      i++\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (text.charCodeAt(i) === codeDot) {\n      i++\n      expectDigit(start)\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (text.charCodeAt(i) === codeLowercaseE || text.charCodeAt(i) === codeUppercaseE) {\n      i++\n      if (text.charCodeAt(i) === codeMinus || text.charCodeAt(i) === codePlus) {\n        i++\n      }\n      expectDigit(start)\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (i > start) {\n      return parseNumber(text.slice(start, i))\n    }\n  }\n\n  function eatComma() {\n    if (text.charCodeAt(i) !== codeComma) {\n      throw new SyntaxError(`Comma ',' expected after value ${gotAt()}`)\n    }\n    i++\n  }\n\n  function eatColon() {\n    if (text.charCodeAt(i) !== codeColon) {\n      throw new SyntaxError(`Colon ':' expected after property name ${gotAt()}`)\n    }\n    i++\n  }\n\n  function expectValue(value: unknown) {\n    if (value === undefined) {\n      throw new SyntaxError(`JSON value expected ${gotAt()}`)\n    }\n  }\n\n  function expectArrayItem(value: unknown) {\n    if (value === undefined) {\n      throw new SyntaxError(`Array item expected ${gotAt()}`)\n    }\n  }\n\n  function expectEndOfInput() {\n    if (i < text.length) {\n      throw new SyntaxError(`Expected end of input ${gotAt()}`)\n    }\n  }\n\n  function expectDigit(start: number) {\n    if (!isDigit(text.charCodeAt(i))) {\n      const numSoFar = text.slice(start, i)\n      throw new SyntaxError(`Invalid number '${numSoFar}', expecting a digit ${gotAt()}`)\n    }\n  }\n\n  function expectEndOfString() {\n    if (text.charCodeAt(i) !== codeDoubleQuote) {\n      throw new SyntaxError(`End of string '\"' expected ${gotAt()}`)\n    }\n  }\n\n  function throwObjectKeyExpected() {\n    throw new SyntaxError(`Quoted object key expected ${gotAt()}`)\n  }\n\n  function throwDuplicateKey(key: string, pos: number) {\n    throw new SyntaxError(`Duplicate key '${key}' encountered at position ${pos}`)\n  }\n\n  function throwObjectKeyOrEndExpected() {\n    throw new SyntaxError(`Quoted object key or end of object '}' expected ${gotAt()}`)\n  }\n\n  function throwArrayItemOrEndExpected() {\n    throw new SyntaxError(`Array item or end of array ']' expected ${gotAt()}`)\n  }\n\n  function throwInvalidCharacter(char: string) {\n    throw new SyntaxError(`Invalid character '${char}' ${pos()}`)\n  }\n\n  function throwInvalidEscapeCharacter(start: number) {\n    const chars = text.slice(start, start + 2)\n    throw new SyntaxError(`Invalid escape character '${chars}' ${pos()}`)\n  }\n\n  function throwObjectValueExpected() {\n    throw new SyntaxError(`Object value expected after ':' ${pos()}`)\n  }\n\n  function throwInvalidUnicodeCharacter(start: number) {\n    let end = start + 2\n    while (/\\w/.test(text[end])) {\n      end++\n    }\n    const chars = text.slice(start, end)\n    throw new SyntaxError(`Invalid unicode character '${chars}' ${pos()}`)\n  }\n\n  // zero based character position\n  function pos(): string {\n    return `at position ${i}`\n  }\n\n  function got(): string {\n    return i < text.length ? `but got '${text[i]}'` : 'but reached end of input'\n  }\n\n  function gotAt(): string {\n    return got() + ' ' + pos()\n  }\n}\n\nfunction isWhitespace(code: number): boolean {\n  return code === codeSpace || code === codeNewline || code === codeTab || code === codeReturn\n}\n\nfunction isHex(code: number): boolean {\n  return (\n    (code >= codeZero && code <= codeNine) ||\n    (code >= codeUppercaseA && code <= codeUppercaseF) ||\n    (code >= codeLowercaseA && code <= codeLowercaseF)\n  )\n}\n\nfunction isDigit(code: number): boolean {\n  return code >= codeZero && code <= codeNine\n}\n\nfunction isNonZeroDigit(code: number): boolean {\n  return code >= codeOne && code <= codeNine\n}\n\nexport function isValidStringCharacter(code: number): boolean {\n  return code >= 0x20 && code <= 0x10ffff\n}\n\nexport function isDeepEqual(a: unknown, b: unknown): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.length === b.length && a.every((item, index) => isDeepEqual(item, b[index]))\n  }\n\n  if (isObject(a) && isObject(b)) {\n    const keys = [...new Set([...Object.keys(a), ...Object.keys(b)])]\n    return keys.every((key) => isDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\nfunction isObject(value: unknown): value is Record<string, unknown> {\n  return typeof value === 'object' && value !== null\n}\n\n// map with all escape characters\nconst escapeCharacters: GenericObject<string> = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n}\n\nconst codeBackslash = 0x5c // \"\\\"\nconst codeOpeningBrace = 0x7b // \"{\"\nconst codeClosingBrace = 0x7d // \"}\"\nconst codeOpeningBracket = 0x5b // \"[\"\nconst codeClosingBracket = 0x5d // \"]\"\nconst codeSpace = 0x20 // \" \"\nconst codeNewline = 0xa // \"\\n\"\nconst codeTab = 0x9 // \"\\t\"\nconst codeReturn = 0xd // \"\\r\"\nconst codeDoubleQuote = 0x0022 // \"\nconst codePlus = 0x2b // \"+\"\nconst codeMinus = 0x2d // \"-\"\nconst codeZero = 0x30\nconst codeOne = 0x31\nconst codeNine = 0x39\nconst codeComma = 0x2c // \",\"\nconst codeDot = 0x2e // \".\" (dot, period)\nconst codeColon = 0x3a // \":\"\nexport const codeUppercaseA = 0x41 // \"A\"\nexport const codeLowercaseA = 0x61 // \"a\"\nexport const codeUppercaseE = 0x45 // \"E\"\nexport const codeLowercaseE = 0x65 // \"e\"\nexport const codeUppercaseF = 0x46 // \"F\"\nexport const codeLowercaseF = 0x66 // \"f\"\n","import type { GenericObject, Replacer, NumberStringifier, JavaScriptValue } from './types'\nimport { isNumber } from './utils.js'\n\n/**\n * The LosslessJSON.stringify() method converts a JavaScript value to a JSON string,\n * optionally replacing values if a replacer function is specified, or\n * optionally including only the specified properties if a replacer array is specified.\n *\n * @param value\n * The value to convert to a JSON string.\n *\n * @param [replacer]\n * A function that alters the behavior of the stringification process,\n * or an array of String and Number objects that serve as a whitelist for\n * selecting the properties of the value object to be included in the JSON string.\n * If this value is null or not provided, all properties of the object are\n * included in the resulting JSON string.\n *\n * @param [space]\n * A String or Number object that's used to insert white space into the output\n * JSON string for readability purposes. If this is a Number, it indicates the\n * number of space characters to use as white space; this number is capped at 10\n * if it's larger than that. Values less than 1 indicate that no space should be\n * used. If this is a String, the string (or the first 10 characters of the string,\n * if it's longer than that) is used as white space. If this parameter is not\n * provided (or is null), no white space is used.\n *\n * @param [numberStringifiers]\n * An optional list with additional number stringifiers, for example to serialize\n * a BigNumber. The output of the function must be valid stringified JSON.\n * When `undefined` is returned, the property will be deleted from the object.\n * The difference with using a `replacer` is that the output of a `replacer`\n * must be JSON and will be stringified afterwards, whereas the output of the\n * `numberStringifiers` is already stringified JSON.\n *\n * @returns Returns the string representation of the JSON object.\n */\nexport function stringify(\n  value: JavaScriptValue,\n  replacer?: Replacer,\n  space?: number | string,\n  numberStringifiers?: NumberStringifier[]\n): string | undefined {\n  const resolvedSpace = resolveSpace(space)\n\n  const replacedValue =\n    typeof replacer === 'function' ? replacer.call({ '': value }, '', value) : value\n\n  return stringifyValue(replacedValue, '')\n\n  /**\n   * Stringify a value\n   */\n  function stringifyValue(value: unknown, indent: string): string | undefined {\n    if (Array.isArray(numberStringifiers)) {\n      const stringifier = numberStringifiers.find((item) => item.test(value))\n      if (stringifier) {\n        const str = stringifier.stringify(value)\n        if (typeof str !== 'string' || !isNumber(str)) {\n          throw new Error(\n            'Invalid JSON number: ' +\n              'output of a number stringifier must be a string containing a JSON number ' +\n              `(output: ${str})`\n          )\n        }\n        return str\n      }\n    }\n\n    // boolean, null, number, string, or date\n    if (\n      typeof value === 'boolean' ||\n      typeof value === 'number' ||\n      typeof value === 'string' ||\n      value === null ||\n      value instanceof Date ||\n      value instanceof Boolean ||\n      value instanceof Number ||\n      value instanceof String\n    ) {\n      return JSON.stringify(value)\n    }\n\n    // lossless number, the secret ingredient :)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    if (value && value.isLosslessNumber) {\n      return value.toString()\n    }\n\n    // BigInt\n    if (typeof value === 'bigint') {\n      return value.toString()\n    }\n\n    // Array\n    if (Array.isArray(value)) {\n      return stringifyArray(value, indent)\n    }\n\n    // Object (test lastly!)\n    if (value && typeof value === 'object') {\n      return stringifyObject(value as GenericObject<unknown>, indent)\n    }\n\n    return undefined\n  }\n\n  /**\n   * Stringify an array\n   */\n  function stringifyArray(array: Array<unknown>, indent: string): string {\n    if (array.length === 0) {\n      return '[]'\n    }\n\n    const childIndent = resolvedSpace ? indent + resolvedSpace : undefined\n    let str = resolvedSpace ? '[\\n' : '['\n\n    for (let i = 0; i < array.length; i++) {\n      const item =\n        typeof replacer === 'function' ? replacer.call(array, String(i), array[i]) : array[i]\n\n      if (resolvedSpace) {\n        str += childIndent\n      }\n\n      if (typeof item !== 'undefined' && typeof item !== 'function') {\n        str += stringifyValue(item, childIndent)\n      } else {\n        str += 'null'\n      }\n\n      if (i < array.length - 1) {\n        str += resolvedSpace ? ',\\n' : ','\n      }\n    }\n\n    str += resolvedSpace ? '\\n' + indent + ']' : ']'\n    return str\n  }\n\n  /**\n   * Stringify an object\n   */\n  function stringifyObject(object: GenericObject<unknown>, indent: string): string {\n    if (typeof object.toJSON === 'function') {\n      return stringify(object.toJSON(), replacer, space, undefined)\n    }\n\n    const keys: string[] = Array.isArray(replacer) ? replacer.map(String) : Object.keys(object)\n\n    if (keys.length === 0) {\n      return '{}'\n    }\n\n    const childIndent = resolvedSpace ? indent + resolvedSpace : undefined\n    let first = true\n    let str = resolvedSpace ? '{\\n' : '{'\n\n    keys.forEach((key) => {\n      const value =\n        typeof replacer === 'function' ? replacer.call(object, key, object[key]) : object[key]\n\n      if (includeProperty(key, value)) {\n        if (first) {\n          first = false\n        } else {\n          str += resolvedSpace ? ',\\n' : ','\n        }\n\n        const keyStr = JSON.stringify(key)\n        str += resolvedSpace ? childIndent + keyStr + ': ' : keyStr + ':'\n\n        str += stringifyValue(value, childIndent)\n      }\n    })\n\n    str += resolvedSpace ? '\\n' + indent + '}' : '}'\n    return str\n  }\n\n  /**\n   * Test whether to include a property in a stringified object or not.\n   */\n  function includeProperty(key: string, value: unknown): boolean {\n    return typeof value !== 'undefined' && typeof value !== 'function' && typeof value !== 'symbol'\n  }\n}\n\n/**\n * Resolve a JSON stringify space:\n * replace a number with a string containing that number of spaces\n */\nfunction resolveSpace(space: number | string | undefined): string | undefined {\n  if (typeof space === 'number') {\n    return ' '.repeat(space)\n  }\n\n  if (typeof space === 'string' && space !== '') {\n    return space\n  }\n\n  return undefined\n}\n","\n/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED$1               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN$1             = 2;\n\n/*============================================================================*/\n\n\nfunction zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH$1    = 3;\nconst MAX_MATCH$1    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES$1  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS$1      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES$1       = 30;\n/* number of distance codes */\n\nconst BL_CODES$1      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE$1     = 2 * L_CODES$1 + 1;\n/* maximum heap size */\n\nconst MAX_BITS$1      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES$1 + 2) * 2);\nzero$1(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES$1 * 2);\nzero$1(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero$1(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);\nzero$1(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES$1);\nzero$1(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES$1);\nzero$1(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Tracev((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Tracev((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) => {\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n\n  const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS$1; bits++) {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = code;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS$1 + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES$1; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES$1; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.sym_next = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) => {\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) => {\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let sx = 0;         /* running index in sym_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.sym_next !== 0) {\n    do {\n      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;\n      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;\n      lc = s.pending_buf[s.sym_buf + sx++];\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and sym_buf is ok: */\n      //Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");\n\n    } while (sx < s.sym_next);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE$1;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) => {\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"block list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"allow list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* block_mask is the bit mask of block-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let block_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"block-listed\") bytes. */\n  for (n = 0; n <= 31; n++, block_mask >>>= 1) {\n    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"allow-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS$1; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"block-listed\" or \"allow-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init$1 = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  bi_windup(s);        /* align on byte boundary */\n  put_short(s, stored_len);\n  put_short(s, ~stored_len);\n  if (stored_len) {\n    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);\n  }\n  s.pending += stored_len;\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align$1 = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and write out the encoded block.\n */\nconst _tr_flush_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN$1) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->sym_next / 3));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block$1(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally$1 = (s, dist, lc) => {\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist;\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;\n  s.pending_buf[s.sym_buf + s.sym_next++] = lc;\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n  return (s.sym_next === s.sym_end);\n};\n\nvar _tr_init_1  = _tr_init$1;\nvar _tr_stored_block_1 = _tr_stored_block$1;\nvar _tr_flush_block_1  = _tr_flush_block$1;\nvar _tr_tally_1 = _tr_tally$1;\nvar _tr_align_1 = _tr_align$1;\n\nvar trees = {\n\t_tr_init: _tr_init_1,\n\t_tr_stored_block: _tr_stored_block_1,\n\t_tr_flush_block: _tr_flush_block_1,\n\t_tr_tally: _tr_tally_1,\n\t_tr_align: _tr_align_1\n};\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nvar adler32_1 = adler32;\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nvar crc32_1 = crc32;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar messages = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar constants$2 = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;\n\n\n\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,\n  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,\n  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,\n  Z_UNKNOWN,\n  Z_DEFLATED: Z_DEFLATED$2\n} = constants$2;\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS$1 = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */\n//#ifdef GZIP\nconst GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */\n//#endif\nconst EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */\nconst NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */\nconst COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */\nconst HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */\nconst BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */\nconst FINISH_STATE  = 666;    /* stream complete */\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = messages[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) * 2) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */\nconst slide_hash = (s) => {\n  let n, m;\n  let p;\n  let wsize = s.w_size;\n\n  n = s.hash_size;\n  p = n;\n  do {\n    m = s.head[--p];\n    s.head[p] = (m >= wsize ? m - wsize : 0);\n  } while (--n);\n  n = wsize;\n//#ifndef FASTEST\n  p = n;\n  do {\n    m = s.prev[--p];\n    s.prev[p] = (m >= wsize ? m - wsize : 0);\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */\n  } while (--n);\n//#endif\n};\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out  += len;\n  s.pending_out  += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending      -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32_1(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32_1(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let n, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n      if (s.insert > s.strstart) {\n        s.insert = s.strstart;\n      }\n      slide_hash(s);\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */\n  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n\n  /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */\n  let len, left, have, last = 0;\n  let used = s.strm.avail_in;\n  do {\n    /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */\n    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */\n    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    if (s.strm.avail_out < have) {         /* need room for header */\n      break;\n    }\n      /* maximum stored block length that will fit in avail_out: */\n    have = s.strm.avail_out - have;\n    left = s.strstart - s.block_start;  /* bytes left in window */\n    if (len > left + s.strm.avail_in) {\n      len = left + s.strm.avail_in;   /* limit len to the input */\n    }\n    if (len > have) {\n      len = have;             /* limit len to the output */\n    }\n\n    /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */\n    if (len < min_block && ((len === 0 && flush !== Z_FINISH$3) ||\n                        flush === Z_NO_FLUSH$2 ||\n                        len !== left + s.strm.avail_in)) {\n      break;\n    }\n\n    /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */\n    last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;\n    _tr_stored_block(s, 0, 0, last);\n\n    /* Replace the lengths in the dummy stored block with len. */\n    s.pending_buf[s.pending - 4] = len;\n    s.pending_buf[s.pending - 3] = len >> 8;\n    s.pending_buf[s.pending - 2] = ~len;\n    s.pending_buf[s.pending - 1] = ~len >> 8;\n\n    /* Write the stored block header bytes. */\n    flush_pending(s.strm);\n\n//#ifdef ZLIB_DEBUG\n//    /* Update debugging counts for the data about to be copied. */\n//    s->compressed_len += len << 3;\n//    s->bits_sent += len << 3;\n//#endif\n\n    /* Copy uncompressed bytes from the window to next_out. */\n    if (left) {\n      if (left > len) {\n        left = len;\n      }\n      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n      s.strm.next_out += left;\n      s.strm.avail_out -= left;\n      s.strm.total_out += left;\n      s.block_start += left;\n      len -= left;\n    }\n\n    /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */\n    if (len) {\n      read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n      s.strm.next_out += len;\n      s.strm.avail_out -= len;\n      s.strm.total_out += len;\n    }\n  } while (last === 0);\n\n  /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */\n  used -= s.strm.avail_in;    /* number of input bytes directly copied */\n  if (used) {\n    /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */\n    if (used >= s.w_size) {  /* supplant the previous history */\n      s.matches = 2;     /* clear hash */\n      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n      s.strstart = s.w_size;\n      s.insert = s.strstart;\n    }\n    else {\n      if (s.window_size - s.strstart <= used) {\n        /* Slide the window down. */\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) {\n          s.matches++;   /* add a pending slide_hash() */\n        }\n        if (s.insert > s.strstart) {\n          s.insert = s.strstart;\n        }\n      }\n      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n      s.strstart += used;\n      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n    }\n    s.block_start = s.strstart;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* If the last block was written to next_out, then done. */\n  if (last) {\n    return BS_FINISH_DONE;\n  }\n\n  /* If flushing and all input has been consumed, then done. */\n  if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 &&\n    s.strm.avail_in === 0 && s.strstart === s.block_start) {\n    return BS_BLOCK_DONE;\n  }\n\n  /* Fill the window with any remaining input. */\n  have = s.window_size - s.strstart;\n  if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n    /* Slide the window down. */\n    s.block_start -= s.w_size;\n    s.strstart -= s.w_size;\n    //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n    if (s.matches < 2) {\n      s.matches++;       /* add a pending slide_hash() */\n    }\n    have += s.w_size;      /* more space now */\n    if (s.insert > s.strstart) {\n      s.insert = s.strstart;\n    }\n  }\n  if (have > s.strm.avail_in) {\n    have = s.strm.avail_in;\n  }\n  if (have) {\n    read_buf(s.strm, s.window, s.strstart, have);\n    s.strstart += have;\n    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */\n  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    /* maximum stored block length that will fit in pending: */\n  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;\n  min_block = have > s.w_size ? s.w_size : have;\n  left = s.strstart - s.block_start;\n  if (left >= min_block ||\n     ((left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 &&\n     s.strm.avail_in === 0 && left <= have)) {\n    len = left > have ? have : left;\n    last = flush === Z_FINISH$3 && s.strm.avail_in === 0 &&\n         len === left ? 1 : 0;\n    _tr_stored_block(s, s.block_start, len, last);\n    s.block_start += len;\n    flush_pending(s.strm);\n  }\n\n  /* We've done all we can with the available input and output. */\n  return last ? BS_FINISH_STARTED : BS_NEED_MORE;\n};\n\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH$2) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED$2; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.sym_buf = 0;        /* buffer for distances and literals/lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.sym_next = 0;      /* running index in sym_buf */\n  this.sym_end = 0;       /* symbol table full when sym_next reaches this */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */\nconst deflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const s = strm.state;\n  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&\n//#ifdef GZIP\n                                s.status !== GZIP_STATE &&\n//#endif\n                                s.status !== EXTRA_STATE &&\n                                s.status !== NAME_STATE &&\n                                s.status !== COMMENT_STATE &&\n                                s.status !== HCRC_STATE &&\n                                s.status !== BUSY_STATE &&\n                                s.status !== FINISH_STATE)) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status =\n//#ifdef GZIP\n    s.wrap === 2 ? GZIP_STATE :\n//#endif\n    s.wrap ? INIT_STATE : BUSY_STATE;\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = -2;\n  _tr_init(s);\n  return Z_OK$3;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK$3) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {\n    return Z_STREAM_ERROR$2;\n  }\n  strm.state.gzhead = head;\n  return Z_OK$3;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR$2;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION$1) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n  s.status = INIT_STATE;     /* to pass state test in deflateReset() */\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->sym_buf = s->pending_buf + s->lit_bufsize;\n  s.sym_buf = s.lit_bufsize;\n\n  //s->sym_end = (s->lit_bufsize - 1) * 3;\n  s.sym_end = (s.lit_bufsize - 1) * 3;\n  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);\n};\n\n\n/* ========================================================================= */\nconst deflate$2 = (strm, flush) => {\n\n  if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (strm.avail_in !== 0 && !strm.input) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);\n  }\n\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH$3) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* Write the header */\n  if (s.status === INIT_STATE && s.wrap === 0) {\n    s.status = BUSY_STATE;\n  }\n  if (s.status === INIT_STATE) {\n    /* zlib header */\n    let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;\n    let level_flags = -1;\n\n    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n      level_flags = 0;\n    } else if (s.level < 6) {\n      level_flags = 1;\n    } else if (s.level === 6) {\n      level_flags = 2;\n    } else {\n      level_flags = 3;\n    }\n    header |= (level_flags << 6);\n    if (s.strstart !== 0) { header |= PRESET_DICT; }\n    header += 31 - (header % 31);\n\n    putShortMSB(s, header);\n\n    /* Save the adler32 of the preset dictionary: */\n    if (s.strstart !== 0) {\n      putShortMSB(s, strm.adler >>> 16);\n      putShortMSB(s, strm.adler & 0xffff);\n    }\n    strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#ifdef GZIP\n  if (s.status === GZIP_STATE) {\n    /* gzip header */\n    strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n    put_byte(s, 31);\n    put_byte(s, 139);\n    put_byte(s, 8);\n    if (!s.gzhead) { // s->gzhead == Z_NULL\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, OS_CODE);\n      s.status = BUSY_STATE;\n\n      /* Compression must start with an empty pending buffer */\n      flush_pending(strm);\n      if (s.pending !== 0) {\n        s.last_flush = -1;\n        return Z_OK$3;\n      }\n    }\n    else {\n      put_byte(s, (s.gzhead.text ? 1 : 0) +\n                  (s.gzhead.hcrc ? 2 : 0) +\n                  (!s.gzhead.extra ? 0 : 4) +\n                  (!s.gzhead.name ? 0 : 8) +\n                  (!s.gzhead.comment ? 0 : 16)\n      );\n      put_byte(s, s.gzhead.time & 0xff);\n      put_byte(s, (s.gzhead.time >> 8) & 0xff);\n      put_byte(s, (s.gzhead.time >> 16) & 0xff);\n      put_byte(s, (s.gzhead.time >> 24) & 0xff);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, s.gzhead.os & 0xff);\n      if (s.gzhead.extra && s.gzhead.extra.length) {\n        put_byte(s, s.gzhead.extra.length & 0xff);\n        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n      }\n      if (s.gzhead.hcrc) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);\n      }\n      s.gzindex = 0;\n      s.status = EXTRA_STATE;\n    }\n  }\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n      while (s.pending + left > s.pending_buf_size) {\n        let copy = s.pending_buf_size - s.pending;\n        // zmemcpy(s.pending_buf + s.pending,\n        //    s.gzhead.extra + s.gzindex, copy);\n        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n        s.pending = s.pending_buf_size;\n        //--- HCRC_UPDATE(beg) ---//\n        if (s.gzhead.hcrc && s.pending > beg) {\n          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n        }\n        //---//\n        s.gzindex += copy;\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n        beg = 0;\n        left -= copy;\n      }\n      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n      let gzhead_extra = new Uint8Array(s.gzhead.extra);\n      // zmemcpy(s->pending_buf + s->pending,\n      //     s->gzhead->extra + s->gzindex, left);\n      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n      s.pending += left;\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = NAME_STATE;\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = COMMENT_STATE;\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n    }\n    s.status = HCRC_STATE;\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n      }\n      put_byte(s, strm.adler & 0xff);\n      put_byte(s, (strm.adler >> 8) & 0xff);\n      strm.adler = 0; //crc32(0L, Z_NULL, 0);\n    }\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#endif\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {\n    let bstate = s.level === 0 ? deflate_stored(s, flush) :\n                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :\n                 s.strategy === Z_RLE ? deflate_rle(s, flush) :\n                 configuration_table[s.level].func(s, flush);\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK$3;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH$1) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK$3;\n      }\n    }\n  }\n\n  if (flush !== Z_FINISH$3) { return Z_OK$3; }\n  if (s.wrap <= 0) { return Z_STREAM_END$3; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const status = strm.state.status;\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK$3;\n};\n\n\nvar deflateInit_1 = deflateInit;\nvar deflateInit2_1 = deflateInit2;\nvar deflateReset_1 = deflateReset;\nvar deflateResetKeep_1 = deflateResetKeep;\nvar deflateSetHeader_1 = deflateSetHeader;\nvar deflate_2$1 = deflate$2;\nvar deflateEnd_1 = deflateEnd;\nvar deflateSetDictionary_1 = deflateSetDictionary;\nvar deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\nvar deflate_1$2 = {\n\tdeflateInit: deflateInit_1,\n\tdeflateInit2: deflateInit2_1,\n\tdeflateReset: deflateReset_1,\n\tdeflateResetKeep: deflateResetKeep_1,\n\tdeflateSetHeader: deflateSetHeader_1,\n\tdeflate: deflate_2$1,\n\tdeflateEnd: deflateEnd_1,\n\tdeflateSetDictionary: deflateSetDictionary_1,\n\tdeflateInfo: deflateInfo\n};\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nvar assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nvar flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\nvar common = {\n\tassign: assign,\n\tflattenChunks: flattenChunks\n};\n\n// String encode/decode helpers\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nvar string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nvar buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\nvar strings = {\n\tstring2buf: string2buf,\n\tbuf2string: buf2string,\n\tutf8border: utf8border\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nvar zstream = ZStream;\n\nconst toString$1 = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,\n  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED: Z_DEFLATED$1\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate$1(options) {\n  this.options = common.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED$1,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  let status = deflate_1$2.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK$2) {\n    throw new Error(messages[status]);\n  }\n\n  if (opt.header) {\n    deflate_1$2.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = deflate_1$2.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK$2) {\n      throw new Error(messages[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString$1.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = deflate_1$2.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END$2) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = deflate_1$2.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK$2;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK$2) {\n    this.result = common.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate$1(input, options) {\n  const deflator = new Deflate$1(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate$1(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip$1(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate$1(input, options);\n}\n\n\nvar Deflate_1$1 = Deflate$1;\nvar deflate_2 = deflate$1;\nvar deflateRaw_1$1 = deflateRaw$1;\nvar gzip_1$1 = gzip$1;\nvar constants$1 = constants$2;\n\nvar deflate_1$1 = {\n\tDeflate: Deflate_1$1,\n\tdeflate: deflate_2,\n\tdeflateRaw: deflateRaw_1$1,\n\tgzip: gzip_1$1,\n\tconstants: constants$1\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD$1 = 16209;       /* got a data error -- remain here until reset */\nconst TYPE$1 = 16191;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nvar inffast = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD$1;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD$1;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD$1;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE$1;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD$1;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS$1 = 852;\nconst ENOUGH_DISTS$1 = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES$1 = 0;\nconst LENS$1 = 1;\nconst DISTS$1 = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n//  let shoextra;    /* extra bits table to use */\n  let match;                  /* use base and extra for symbol >= match */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES$1 || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES$1) {\n    base = extra = work;    /* dummy value--not used */\n    match = 20;\n\n  } else if (type === LENS$1) {\n    base = lbase;\n    extra = lext;\n    match = 257;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    match = 0;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] + 1 < match) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] >= match) {\n      here_op = extra[work[sym] - match];\n      here_val = base[work[sym] - match];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nvar inftrees = inflate_table;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n\n\n\n\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,\n  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,\n  Z_DEFLATED\n} = constants$2;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 16180;       /* i: waiting for magic header */\nconst    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 16182;       /* i: waiting for modification time (gzip) */\nconst    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 16184;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 16186;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 16188;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 16189;    /* i: waiting for dictionary check value */\nconst    DICT = 16190;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 16193;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 16196;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 16197;   /* i: waiting for code length code lengths */\nconst        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 16199;      /* i: same as LEN below, but only first time in */\nconst            LEN = 16200;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 16201;    /* i: waiting for length extra bits */\nconst            DIST = 16202;      /* i: waiting for distance code */\nconst            DISTEXT = 16203;   /* i: waiting for distance extra bits */\nconst            MATCH = 16204;     /* o: waiting for output space to copy string */\nconst            LIT = 16205;       /* o: waiting for output space to write literal */\nconst    CHECK = 16206;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 16208;      /* finished check, done -- remain here until reset */\nconst    BAD = 16209;       /* got a data error -- remain here until reset */\nconst    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.strm = null;           /* pointer back to this zlib stream */\n  this.mode = 0;              /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,\n                                 bit 2 true to validate check value */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib), or\n                                 -1 if raw or no header yet */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const state = strm.state;\n  if (!state || state.strm !== strm ||\n    state.mode < HEAD || state.mode > SYNC) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.flags = -1;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK$1;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 5;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR$1;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR$1; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.strm = strm;\n  state.window = null/*Z_NULL*/;\n  state.mode = HEAD;     /* to pass state test in inflateReset2() */\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK$1) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate$2 = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (inflateStateCheck(strm) || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK$1;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          if (state.wbits === 0) {\n            state.wbits = 15;\n          }\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        if (len > 15 || len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        state.flags = 0;               /* indicate zlib header */\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32_1(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if ((state.flags & 0x0200) && (state.wrap & 4)) {\n              state.check = crc32_1(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT$1;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inffast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if ((state.wrap & 4) && _out) {\n            strm.adler = state.check =\n                /*UPDATE_CHECK(state.check, put - _out, _out);*/\n                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END$1;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR$1;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR$1;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR$1;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH$1))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if ((state.wrap & 4) && _out) {\n    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (inflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK$1;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK$1;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32_1(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR$1;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR$1;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK$1;\n};\n\n\nvar inflateReset_1 = inflateReset;\nvar inflateReset2_1 = inflateReset2;\nvar inflateResetKeep_1 = inflateResetKeep;\nvar inflateInit_1 = inflateInit;\nvar inflateInit2_1 = inflateInit2;\nvar inflate_2$1 = inflate$2;\nvar inflateEnd_1 = inflateEnd;\nvar inflateGetHeader_1 = inflateGetHeader;\nvar inflateSetDictionary_1 = inflateSetDictionary;\nvar inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCodesUsed = inflateCodesUsed;\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\nmodule.exports.inflateValidate = inflateValidate;\n*/\n\nvar inflate_1$2 = {\n\tinflateReset: inflateReset_1,\n\tinflateReset2: inflateReset2_1,\n\tinflateResetKeep: inflateResetKeep_1,\n\tinflateInit: inflateInit_1,\n\tinflateInit2: inflateInit2_1,\n\tinflate: inflate_2$1,\n\tinflateEnd: inflateEnd_1,\n\tinflateGetHeader: inflateGetHeader_1,\n\tinflateSetDictionary: inflateSetDictionary_1,\n\tinflateInfo: inflateInfo\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nvar gzheader = GZheader;\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate$1(options) {\n  this.options = common.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  let status  = inflate_1$2.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(messages[status]);\n  }\n\n  this.header = new gzheader();\n\n  inflate_1$2.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(messages[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = inflate_1$2.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = inflate_1$2.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = inflate_1$2.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      inflate_1$2.inflateReset(strm);\n      status = inflate_1$2.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = inflate_1$2.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = common.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate$1(input, options) {\n  const inflator = new Inflate$1(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || messages[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate$1(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nvar Inflate_1$1 = Inflate$1;\nvar inflate_2 = inflate$1;\nvar inflateRaw_1$1 = inflateRaw$1;\nvar ungzip$1 = inflate$1;\nvar constants = constants$2;\n\nvar inflate_1$1 = {\n\tInflate: Inflate_1$1,\n\tinflate: inflate_2,\n\tinflateRaw: inflateRaw_1$1,\n\tungzip: ungzip$1,\n\tconstants: constants\n};\n\nconst { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;\n\nconst { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;\n\n\n\nvar Deflate_1 = Deflate;\nvar deflate_1 = deflate;\nvar deflateRaw_1 = deflateRaw;\nvar gzip_1 = gzip;\nvar Inflate_1 = Inflate;\nvar inflate_1 = inflate;\nvar inflateRaw_1 = inflateRaw;\nvar ungzip_1 = ungzip;\nvar constants_1 = constants$2;\n\nvar pako = {\n\tDeflate: Deflate_1,\n\tdeflate: deflate_1,\n\tdeflateRaw: deflateRaw_1,\n\tgzip: gzip_1,\n\tInflate: Inflate_1,\n\tinflate: inflate_1,\n\tinflateRaw: inflateRaw_1,\n\tungzip: ungzip_1,\n\tconstants: constants_1\n};\n\nexport { Deflate_1 as Deflate, Inflate_1 as Inflate, constants_1 as constants, pako as default, deflate_1 as deflate, deflateRaw_1 as deflateRaw, gzip_1 as gzip, inflate_1 as inflate, inflateRaw_1 as inflateRaw, ungzip_1 as ungzip };\n","export { IS_BROWSER } from './utils/encode';\n\n/**\n * Cairo Felt support storing max 31 character\n */\nexport const TEXT_TO_FELT_MAX_LEN = 31;\n\nexport const HEX_STR_TRANSACTION_VERSION_1 = '0x1';\nexport const HEX_STR_TRANSACTION_VERSION_2 = '0x2';\nexport const BN_TRANSACTION_VERSION_1 = 1n;\nexport const BN_TRANSACTION_VERSION_2 = 2n;\nexport const BN_FEE_TRANSACTION_VERSION_1 = 2n ** 128n + BN_TRANSACTION_VERSION_1;\nexport const BN_FEE_TRANSACTION_VERSION_2 = 2n ** 128n + BN_TRANSACTION_VERSION_2;\n\nexport const ZERO = 0n;\nexport const MASK_250 = 2n ** 250n - 1n; // 2 ** 250 - 1\nexport const MASK_251 = 2n ** 251n;\nexport const API_VERSION = ZERO;\n\nexport enum BaseUrl {\n  SN_MAIN = 'https://alpha-mainnet.starknet.io',\n  SN_GOERLI = 'https://alpha4.starknet.io',\n}\n\nexport enum NetworkName {\n  SN_MAIN = 'SN_MAIN',\n  SN_GOERLI = 'SN_GOERLI',\n}\n\nexport enum StarknetChainId {\n  SN_MAIN = '0x534e5f4d41494e', // encodeShortString('SN_MAIN'),\n  SN_GOERLI = '0x534e5f474f45524c49', // encodeShortString('SN_GOERLI')\n}\n\nexport enum TransactionHashPrefix {\n  DECLARE = '0x6465636c617265', // encodeShortString('declare'),\n  DEPLOY = '0x6465706c6f79', // encodeShortString('deploy'),\n  DEPLOY_ACCOUNT = '0x6465706c6f795f6163636f756e74', // encodeShortString('deploy_account'),\n  INVOKE = '0x696e766f6b65', // encodeShortString('invoke'),\n  L1_HANDLER = '0x6c315f68616e646c6572', // encodeShortString('l1_handler'),\n}\n\nexport const UDC = {\n  ADDRESS: '0x041a78e741e5af2fec34b695679bc6891742439f7afb8484ecd7766661ad02bf',\n  ENTRYPOINT: 'deployContract',\n};\n\nexport const RPC_GOERLI_NODES = [\n  'https://starknet-testnet.public.blastapi.io/rpc/v0.5',\n  'https://limited-rpc.nethermind.io/goerli-juno/v0_5',\n];\n\nexport const RPC_MAINNET_NODES = [\n  'https://starknet-mainnet.public.blastapi.io/rpc/v0.5',\n  'https://limited-rpc.nethermind.io/mainnet-juno/v0_5',\n];\n","import { base64 } from '@scure/base';\n\n/* eslint-disable no-param-reassign */\nexport const IS_BROWSER = typeof window !== 'undefined';\n\nconst STRING_ZERO = '0';\n\n/**\n * Some functions recreated from https://github.com/pedrouid/enc-utils/blob/master/src/index.ts\n * enc-utils is not a dependency to avoid using `Buffer` which only works in node and not browsers\n */\n\n/**\n * Convert array buffer to string\n *\n * *[internal usage]*\n */\nexport function arrayBufferToString(array: ArrayBuffer): string {\n  return new Uint8Array(array).reduce((data, byte) => data + String.fromCharCode(byte), '');\n}\n\n/**\n * Convert utf8-string to Uint8Array\n *\n * *[internal usage]*\n */\nexport function utf8ToArray(str: string): Uint8Array {\n  return new TextEncoder().encode(str);\n}\n\n/**\n * Convert utf8-string to Uint8Array\n *\n * @deprecated equivalent to 'utf8ToArray', alias will be removed\n */\nexport function stringToArrayBuffer(str: string): Uint8Array {\n  return utf8ToArray(str);\n}\n\n/**\n * Convert string to array buffer (browser and node compatible)\n */\nexport function atobUniversal(a: string): Uint8Array {\n  return base64.decode(a);\n}\n\n/**\n * Convert array buffer to string (browser and node compatible)\n */\nexport function btoaUniversal(b: ArrayBuffer): string {\n  return base64.encode(new Uint8Array(b));\n}\n\n/**\n * Convert array buffer to hex-string\n * @returns format: hex-string\n */\nexport function buf2hex(buffer: Uint8Array) {\n  return buffer.reduce((r, x) => r + x.toString(16).padStart(2, '0'), '');\n}\n\n/**\n * Remove hex prefix '0x' from hex-string\n * @param hex hex-string\n * @returns format: base16-string\n */\nexport function removeHexPrefix(hex: string): string {\n  return hex.replace(/^0x/i, '');\n}\n\n/**\n * Add hex prefix '0x' to base16-string\n * @param hex base16-string\n * @returns format: hex-string\n */\nexport function addHexPrefix(hex: string): string {\n  return `0x${removeHexPrefix(hex)}`;\n}\n\n/**\n * Prepend or append to string\n *\n * *[internal usage]*\n */\nfunction padString(str: string, length: number, left: boolean, padding = STRING_ZERO): string {\n  const diff = length - str.length;\n  let result = str;\n  if (diff > 0) {\n    const pad = padding.repeat(diff);\n    result = left ? pad + str : str + pad;\n  }\n  return result;\n}\n\n/**\n * Prepend string (default with '0')\n */\nexport function padLeft(str: string, length: number, padding = STRING_ZERO): string {\n  return padString(str, length, true, padding);\n}\n\n/**\n * Calculate byte length of string\n *\n * *[no internal usage]*\n */\nexport function calcByteLength(str: string, byteSize = 8): number {\n  const { length } = str;\n  const remainder = length % byteSize;\n  return remainder ? ((length - remainder) / byteSize) * byteSize + byteSize : length;\n}\n\n/**\n * Prepend '0' to string bytes\n *\n * *[no internal usage]*\n */\nexport function sanitizeBytes(str: string, byteSize = 8, padding = STRING_ZERO): string {\n  return padLeft(str, calcByteLength(str, byteSize), padding);\n}\n\n/**\n * Prepend '0' to hex-string bytes\n *\n * *[no internal usage]*\n * @param hex hex-string\n * @returns format: hex-string\n */\nexport function sanitizeHex(hex: string): string {\n  hex = removeHexPrefix(hex);\n  hex = sanitizeBytes(hex, 2);\n  if (hex) {\n    hex = addHexPrefix(hex);\n  }\n  return hex;\n}\n\n/**\n * String transformation util\n *\n * Pascal case to screaming snake case\n */\nexport const pascalToSnake = (text: string) =>\n  /[a-z]/.test(text)\n    ? text\n        .split(/(?=[A-Z])/)\n        .join('_')\n        .toUpperCase()\n    : text;\n","export * from './account';\nexport * from './calldata';\nexport * from './contract';\nexport * from './lib';\nexport * from './provider';\nexport * from './signer';\nexport * from './typedData';\nexport * from './cairoEnum';\n\nexport * as RPC from './api/rpc';\nexport {\n  CallL1Handler,\n  DeployedContractItem,\n  ExecutionResources,\n  FunctionInvocation,\n  GetContractAddressesResponse,\n  GetTransactionStatusResponse,\n  SequencerIdentifier,\n} from './api/sequencer';\nexport * as Sequencer from './api/sequencer';\n","import { BigNumberish, BlockIdentifier } from './lib';\nimport { DeclareTransactionReceiptResponse, EstimateFeeResponse } from './provider';\n\nexport interface EstimateFee extends EstimateFeeResponse {\n  suggestedMaxFee: bigint;\n}\n\nexport type EstimateFeeBulk = Array<EstimateFee>;\n\nexport type AccountInvocationsFactoryDetails = {\n  versions: bigint[];\n  nonce?: BigNumberish;\n  blockIdentifier?: BlockIdentifier;\n};\n\nexport interface EstimateFeeDetails {\n  nonce?: BigNumberish;\n  blockIdentifier?: BlockIdentifier;\n  skipValidate?: boolean;\n}\n\nexport interface DeployContractResponse {\n  contract_address: string;\n  transaction_hash: string;\n}\n\nexport type MultiDeployContractResponse = {\n  contract_address: Array<string>;\n  transaction_hash: string;\n};\n\nexport type DeployContractUDCResponse = {\n  contract_address: string;\n  transaction_hash: string;\n  address: string;\n  deployer: string;\n  unique: string;\n  classHash: string;\n  calldata_len: string;\n  calldata: Array<string>;\n  salt: string;\n};\n\nexport type DeclareDeployUDCResponse = {\n  declare: {\n    class_hash: BigNumberish;\n  } & Partial<DeclareTransactionReceiptResponse>;\n  deploy: DeployContractUDCResponse;\n};\n\nexport type SimulateTransactionDetails = {\n  nonce?: BigNumberish;\n  blockIdentifier?: BlockIdentifier;\n  skipValidate?: boolean;\n  skipExecute?: boolean;\n};\n\nexport enum SIMULATION_FLAG {\n  SKIP_VALIDATE = 'SKIP_VALIDATE',\n  SKIP_EXECUTE = 'SKIP_EXECUTE',\n}\n","export enum ValidateType {\n  DEPLOY = 'DEPLOY',\n  CALL = 'CALL',\n  INVOKE = 'INVOKE',\n}\n\nexport enum Uint {\n  u8 = 'core::integer::u8',\n  u16 = 'core::integer::u16',\n  u32 = 'core::integer::u32',\n  u64 = 'core::integer::u64',\n  u128 = 'core::integer::u128',\n  u256 = 'core::integer::u256', // This one is struct\n}\n\nexport enum Litteral {\n  ClassHash = 'core::starknet::class_hash::ClassHash',\n  ContractAddress = 'core::starknet::contract_address::ContractAddress',\n}\n","import { LegacyCompiledContract, LegacyContractClass } from './legacy';\nimport { CompiledSierra, SierraContractClass } from './sierra';\n\n// Final types\n/**\n * format produced after compressing compiled contract\n * CompressedCompiledContract\n */\nexport type ContractClass = LegacyContractClass | SierraContractClass;\n\n/**\n * format produced after compile .cairo to .json\n */\nexport type CompiledContract = LegacyCompiledContract | CompiledSierra;\n\n/**\n * Compressed or decompressed Cairo0 or Cairo1 Contract\n */\nexport type CairoContract = ContractClass | CompiledContract;\n\n// Basic elements\nexport enum EntryPointType {\n  EXTERNAL = 'EXTERNAL',\n  L1_HANDLER = 'L1_HANDLER',\n  CONSTRUCTOR = 'CONSTRUCTOR',\n}\n\nexport * from './abi';\nexport * from './legacy';\nexport * from './sierra';\n","import { StarknetChainId } from '../../constants';\nimport { weierstrass } from '../../utils/ec';\nimport { CairoEnum } from '../cairoEnum';\nimport { CompiledContract, CompiledSierraCasm, ContractClass } from './contract';\n\nexport type WeierstrassSignatureType = weierstrass.SignatureType;\nexport type ArraySignatureType = string[];\nexport type Signature = ArraySignatureType | WeierstrassSignatureType;\n\nexport type BigNumberish = string | number | bigint;\n\n/**\n * Compiled calldata ready to be sent\n * decimal-string array\n */\nexport type Calldata = string[] & { readonly __compiled__?: boolean };\n\n/**\n * Represents an integer in the range [0, 2^256)\n */\nexport interface Uint256 {\n  // The low 128 bits of the value\n  low: BigNumberish;\n  // The high 128 bits of the value\n  high: BigNumberish;\n}\n\n/**\n * BigNumberish array\n * use CallData.compile() to convert to Calldata\n */\nexport type RawCalldata = BigNumberish[];\n\n/**\n * Hexadecimal-string array\n */\nexport type HexCalldata = string[];\n\nexport type AllowArray<T> = T | T[];\n\nexport type OptionalPayload<T> = { payload: T } | T;\n\nexport type RawArgs = RawArgsObject | RawArgsArray;\n\nexport type RawArgsObject = {\n  [inputName: string]: MultiType | MultiType[] | RawArgs;\n};\n\nexport type RawArgsArray = Array<MultiType | MultiType[] | RawArgs>;\n\nexport type MultiType = BigNumberish | Uint256 | object | boolean | CairoEnum;\n\nexport type UniversalDeployerContractPayload = {\n  classHash: BigNumberish;\n  salt?: string;\n  unique?: boolean;\n  constructorCalldata?: RawArgs;\n};\n\nexport type DeployAccountContractPayload = {\n  classHash: string;\n  constructorCalldata?: RawArgs;\n  addressSalt?: BigNumberish;\n  contractAddress?: string;\n};\n\nexport type DeployAccountContractTransaction = Omit<\n  DeployAccountContractPayload,\n  'contractAddress'\n> & {\n  signature?: Signature;\n};\n\nexport type DeclareContractPayload = {\n  contract: CompiledContract | string;\n  classHash?: string;\n  casm?: CompiledSierraCasm;\n  compiledClassHash?: string;\n};\n\nexport type CompleteDeclareContractPayload = {\n  contract: CompiledContract | string;\n  classHash: string;\n  casm?: CompiledSierraCasm;\n  compiledClassHash?: string;\n};\n\nexport type DeclareAndDeployContractPayload = Omit<UniversalDeployerContractPayload, 'classHash'> &\n  DeclareContractPayload;\n\nexport type DeclareContractTransaction = {\n  contract: ContractClass;\n  senderAddress: string;\n  signature?: Signature;\n  compiledClassHash?: string;\n};\n\nexport type CallDetails = {\n  contractAddress: string;\n  calldata?: RawArgs | Calldata;\n  entrypoint?: string; // TODO: check if required\n};\n\nexport type Invocation = CallDetails & { signature?: Signature };\n\nexport type Call = CallDetails & { entrypoint: string };\n\nexport type CairoVersion = '0' | '1' | undefined;\nexport type CompilerVersion = '0' | '1' | '2' | undefined;\n\nexport type InvocationsDetails = {\n  nonce?: BigNumberish;\n  maxFee?: BigNumberish;\n  version?: BigNumberish;\n};\n\n/**\n * Contain all additional details params\n */\nexport type Details = {\n  nonce: BigNumberish;\n  maxFee: BigNumberish;\n  version: BigNumberish;\n  chainId: StarknetChainId;\n};\n\nexport type InvocationsDetailsWithNonce = InvocationsDetails & {\n  nonce: BigNumberish;\n};\n\nexport enum TransactionType {\n  DECLARE = 'DECLARE',\n  DEPLOY = 'DEPLOY',\n  DEPLOY_ACCOUNT = 'DEPLOY_ACCOUNT',\n  INVOKE = 'INVOKE_FUNCTION',\n}\n\n/**\n * new statuses are defined by props: finality_status and execution_status\n * to be #deprecated\n */\nexport enum TransactionStatus {\n  NOT_RECEIVED = 'NOT_RECEIVED',\n  RECEIVED = 'RECEIVED',\n  ACCEPTED_ON_L2 = 'ACCEPTED_ON_L2',\n  ACCEPTED_ON_L1 = 'ACCEPTED_ON_L1',\n  REJECTED = 'REJECTED',\n  REVERTED = 'REVERTED',\n}\n\nexport enum TransactionFinalityStatus {\n  NOT_RECEIVED = 'NOT_RECEIVED',\n  RECEIVED = 'RECEIVED',\n  ACCEPTED_ON_L2 = 'ACCEPTED_ON_L2',\n  ACCEPTED_ON_L1 = 'ACCEPTED_ON_L1',\n}\n\nexport enum TransactionExecutionStatus {\n  REJECTED = 'REJECTED',\n  REVERTED = 'REVERTED',\n  SUCCEEDED = 'SUCCEEDED',\n}\n\nexport enum BlockStatus {\n  PENDING = 'PENDING',\n  ACCEPTED_ON_L1 = 'ACCEPTED_ON_L1',\n  ACCEPTED_ON_L2 = 'ACCEPTED_ON_L2',\n  REJECTED = 'REJECTED',\n}\n\nexport enum BlockTag {\n  pending = 'pending',\n  latest = 'latest',\n}\n\nexport type BlockNumber = BlockTag | null | number;\n\n/**\n * hex string and BN are detected as block hashes\n * decimal string and number are detected as block numbers\n * null appends nothing to the request url\n */\nexport type BlockIdentifier = BlockNumber | BigNumberish;\n\n/**\n * items used by AccountInvocations\n */\nexport type AccountInvocationItem = (\n  | ({ type: TransactionType.DECLARE } & DeclareContractTransaction)\n  | ({ type: TransactionType.DEPLOY_ACCOUNT } & DeployAccountContractTransaction)\n  | ({ type: TransactionType.INVOKE } & Invocation)\n) &\n  InvocationsDetailsWithNonce;\n\n/**\n * Complete invocations array with account details (internal type from account -> provider)\n */\nexport type AccountInvocations = AccountInvocationItem[];\n\n/**\n * Invocations array user provide to bulk method (simulate)\n */\nexport type Invocations = Array<\n  | ({ type: TransactionType.DECLARE } & OptionalPayload<DeclareContractPayload>)\n  | ({ type: TransactionType.DEPLOY } & OptionalPayload<\n      AllowArray<UniversalDeployerContractPayload>\n    >)\n  | ({ type: TransactionType.DEPLOY_ACCOUNT } & OptionalPayload<DeployAccountContractPayload>)\n  | ({ type: TransactionType.INVOKE } & OptionalPayload<AllowArray<Call>>)\n>;\n\nexport type Tupled = { element: any; type: string };\n\nexport type Args = {\n  [inputName: string]: BigNumberish | BigNumberish[] | ParsedStruct | ParsedStruct[];\n};\nexport type ParsedStruct = {\n  [key: string]: BigNumberish | BigNumberish[] | ParsedStruct | Uint256;\n};\n\nexport type waitForTransactionOptions = {\n  retryInterval?: number;\n  successStates?: Array<TransactionFinalityStatus | TransactionExecutionStatus>;\n  errorStates?: Array<TransactionFinalityStatus | TransactionExecutionStatus>;\n};\n\nexport type getSimulateTransactionOptions = {\n  blockIdentifier?: BlockIdentifier;\n  skipValidate?: boolean;\n  skipExecute?: boolean;\n  skipFeeCharge?: boolean;\n};\n\nexport type getContractVersionOptions = {\n  blockIdentifier?: BlockIdentifier;\n  compiler?: boolean;\n};\n\nexport type getEstimateFeeBulkOptions = {\n  blockIdentifier?: BlockIdentifier;\n  skipValidate?: boolean;\n};\n\nexport interface CallStruct {\n  to: string;\n  selector: string;\n  calldata: string[];\n}\n\n/**\n * Represent Contract version\n */\nexport type ContractVersion = {\n  /** version of the cairo language */\n  cairo: CairoVersion;\n  /** version of the cairo compiler used to compile the contract */\n  compiler: CompilerVersion;\n};\n\nexport * from './contract';\n","export * as JRPC from './jsonrpc';\nexport * from './rpcspec';\n","export type RequestBody = {\n  id: number | string;\n  jsonrpc: '2.0';\n  method: string;\n  params?: {};\n};\n\nexport type ResponseBody = {\n  id: number | string;\n  jsonrpc: '2.0';\n} & (SuccessResponseBody | ErrorResponseBody);\n\nexport type SuccessResponseBody = {\n  result: unknown;\n};\n\nexport type ErrorResponseBody = {\n  error: Error;\n};\n\nexport type Error = {\n  code: number;\n  message: string;\n  data?: unknown;\n};\n","export interface FAILED_TO_RECEIVE_TXN {\n  code: 1;\n  message: 'Failed to write transaction';\n}\n\nexport interface NO_TRACE_AVAILABLE {\n  code: 10;\n  message: 'No trace available for transaction';\n  data: {\n    status: 'RECEIVED' | 'REJECTED';\n  };\n}\n\nexport interface CONTRACT_NOT_FOUND {\n  code: 20;\n  message: 'Contract not found';\n}\n\nexport interface INVALID_MESSAGE_SELECTOR {\n  code: 21;\n  message: 'Invalid message selector';\n}\n\nexport interface INVALID_CALL_DATA {\n  code: 22;\n  message: 'Invalid call data';\n}\n\nexport interface BLOCK_NOT_FOUND {\n  code: 24;\n  message: 'Block not found';\n}\n\nexport interface INVALID_TXN_HASH {\n  code: 25;\n  message: 'Invalid transaction hash';\n}\n\nexport interface INVALID_BLOCK_HASH {\n  code: 26;\n  message: 'Invalid block hash';\n}\n\nexport interface INVALID_TXN_INDEX {\n  code: 27;\n  message: 'Invalid transaction index in a block';\n}\n\nexport interface CLASS_HASH_NOT_FOUND {\n  code: 28;\n  message: 'Class hash not found';\n}\n\nexport interface TXN_HASH_NOT_FOUND {\n  code: 29;\n  message: 'Transaction hash not found';\n}\n\nexport interface PAGE_SIZE_TOO_BIG {\n  code: 31;\n  message: 'Requested page size is too big';\n}\n\nexport interface NO_BLOCKS {\n  code: 32;\n  message: 'There are no blocks';\n}\n\nexport interface INVALID_CONTINUATION_TOKEN {\n  code: 33;\n  message: 'The supplied continuation token is invalid or unknown';\n}\n\nexport interface TOO_MANY_KEYS_IN_FILTER {\n  code: 34;\n  message: 'Too many keys provided in a filter';\n}\n\nexport interface CONTRACT_ERROR {\n  code: 40;\n  message: 'Contract error';\n  data: {\n    revert_error: string;\n  };\n}\n\nexport interface CLASS_ALREADY_DECLARED {\n  code: 51;\n  message: 'Class already declared';\n}\n\nexport interface INVALID_TRANSACTION_NONCE {\n  code: 52;\n  message: 'Invalid transaction nonce';\n}\n\nexport interface INSUFFICIENT_MAX_FEE {\n  code: 53;\n  message: 'Max fee is smaller than the minimal transaction cost (validation plus fee transfer)';\n}\n\nexport interface INSUFFICIENT_ACCOUNT_BALANCE {\n  code: 54;\n  message: \"Account balance is smaller than the transaction's max_fee\";\n}\n\nexport interface VALIDATION_FAILURE {\n  code: 55;\n  message: 'Account validation failed';\n}\n\nexport interface COMPILATION_FAILED {\n  code: 56;\n  message: 'Compilation failed';\n}\n\nexport interface CONTRACT_CLASS_SIZE_IS_TOO_LARGE {\n  code: 57;\n  message: 'Contract class size it too large';\n}\n\nexport interface NON_ACCOUNT {\n  code: 58;\n  message: 'Sender address in not an account contract';\n}\n\nexport interface DUPLICATE_TX {\n  code: 59;\n  message: 'A transaction with the same hash already exists in the mempool';\n}\n\nexport interface COMPILED_CLASS_HASH_MISMATCH {\n  code: 60;\n  message: 'the compiled class hash did not match the one supplied in the transaction';\n}\n\nexport interface UNSUPPORTED_TX_VERSION {\n  code: 61;\n  message: 'the transaction version is not supported';\n}\n\nexport interface UNSUPPORTED_CONTRACT_CLASS_VERSION {\n  code: 62;\n  message: 'the contract class version is not supported';\n}\n\nexport interface UNEXPECTED_ERROR {\n  code: 63;\n  message: 'An unexpected error occurred';\n  data: string;\n}\n","/**\n * PRIMITIVES\n */\n\n/**\n * A field element. represented by at most 63 hex digits\n * @pattern ^0x(0|[a-fA-F1-9]{1}[a-fA-F0-9]{0,62})$\n */\nexport type FELT = string;\n/**\n * an ethereum address represented as 40 hex digits\n * @pattern ^0x[a-fA-F0-9]{40}$\n */\nexport type ETH_ADDRESS = string;\n/**\n * A storage key. Represented as up to 62 hex digits, 3 bits, and 5 leading zeroes.\n * @pattern ^0x0[0-7]{1}[a-fA-F0-9]{0,62}$\n */\nexport type STORAGE_KEY = string;\nexport type ADDRESS = FELT;\nexport type NUM_AS_HEX = string;\nexport type SIGNATURE = Array<FELT>;\nexport type BLOCK_NUMBER = number;\nexport type BLOCK_HASH = FELT;\nexport type TXN_HASH = FELT;\nexport type CHAIN_ID = NUM_AS_HEX;\nexport type STRUCT_ABI_TYPE = 'struct';\nexport type EVENT_ABI_TYPE = 'event';\nexport type FUNCTION_ABI_TYPE = 'function' | 'l1_handler' | 'constructor';\n// Represents the type of an entry point.\nexport type ENTRY_POINT_TYPE = 'EXTERNAL' | 'L1_HANDLER' | 'CONSTRUCTOR';\n// Represents the type of a function call.\nexport type CALL_TYPE = 'DELEGATE' | 'LIBRARY_CALL' | 'CALL';\n// Represents the status of the transaction\nexport type TXN_STATUS = 'RECEIVED' | 'REJECTED' | 'ACCEPTED_ON_L2' | 'ACCEPTED_ON_L1';\n// Flags that indicate how to simulate a given transaction. By default, the sequencer behavior is replicated locally (enough funds are expected to be in the account, and the fee will be deducted from the balance before the simulation of the next transaction). To skip the fee charge, use the SKIP_FEE_CHARGE flag.\nexport type SIMULATION_FLAG = 'SKIP_VALIDATE' | 'SKIP_FEE_CHARGE';\n// Data availability mode\nexport type DA_MODE = 'L1' | 'L2';\nexport type TXN_TYPE = 'DECLARE' | 'DEPLOY' | 'DEPLOY_ACCOUNT' | 'INVOKE' | 'L1_HANDLER';\nexport type TXN_FINALITY_STATUS = 'ACCEPTED_ON_L2' | 'ACCEPTED_ON_L1';\nexport type TXN_EXECUTION_STATUS = 'SUCCEEDED' | 'REVERTED';\nexport type BLOCK_STATUS = 'PENDING' | 'ACCEPTED_ON_L2' | 'ACCEPTED_ON_L1' | 'REJECTED';\nexport type BLOCK_TAG = 'latest' | 'pending';\n\n/**\n * READ API\n */\n\nexport type EVENTS_CHUNK = {\n  // Returns matching events\n  events: EMITTED_EVENT[];\n  // Use this token in a subsequent query to obtain the next page. Should not appear if there are no more pages.\n  continuation_token?: string;\n};\n\nexport type RESULT_PAGE_REQUEST = {\n  // The token returned from the previous query. If no token is provided the first page is returned.\n  continuation_token?: string;\n  // Chunk size\n  chunk_size: number;\n};\n\nexport type EMITTED_EVENT = EVENT & {\n  block_hash: BLOCK_HASH;\n  block_number: BLOCK_NUMBER;\n  transaction_hash: TXN_HASH;\n};\n\nexport type EVENT = {\n  from_address: ADDRESS;\n} & EVENT_CONTENT;\n\nexport type EVENT_CONTENT = {\n  keys: FELT[];\n  data: FELT[];\n};\n\nexport type EVENT_FILTER = {\n  from_block?: BLOCK_ID;\n  to_block?: BLOCK_ID;\n  address?: ADDRESS;\n  keys?: FELT[][];\n};\n\nexport type BLOCK_ID =\n  | {\n      block_hash?: BLOCK_HASH;\n      block_number?: BLOCK_NUMBER;\n    }\n  | BLOCK_TAG;\n\nexport type SYNC_STATUS = {\n  starting_block_hash: BLOCK_HASH;\n  starting_block_num: BLOCK_NUMBER;\n  current_block_hash: BLOCK_HASH;\n  current_block_num: BLOCK_NUMBER;\n  highest_block_hash: BLOCK_HASH;\n  highest_block_num: BLOCK_NUMBER;\n};\n\nexport type NEW_CLASSES = {\n  class_hash: FELT;\n  compiled_class_hash: FELT;\n};\n\nexport type REPLACED_CLASS = {\n  class_hash: FELT;\n  contract_address: FELT;\n};\n\nexport type NONCE_UPDATE = {\n  contract_address: ADDRESS;\n  nonce: FELT;\n};\n\nexport type STATE_DIFF = {\n  storage_diffs: CONTRACT_STORAGE_DIFF_ITEM[];\n  deprecated_declared_classes: FELT[];\n  declared_classes: NEW_CLASSES[];\n  deployed_contracts: DEPLOYED_CONTRACT_ITEM[];\n  replaced_classes: REPLACED_CLASS[];\n  nonces: NONCE_UPDATE[];\n};\n\nexport type PENDING_STATE_UPDATE = {\n  old_root: FELT;\n  state_diff: STATE_DIFF;\n};\n\nexport type STATE_UPDATE = {\n  block_hash: BLOCK_HASH;\n  old_root: FELT;\n  new_root: FELT;\n  state_diff: STATE_DIFF;\n};\n\nexport type BLOCK_BODY_WITH_TX_HASHES = {\n  transactions: TXN_HASH[];\n};\n\nexport type BLOCK_BODY_WITH_TXS = {\n  transactions: {\n    transaction: TXN;\n    transaction_hash: TXN_HASH;\n  }[];\n};\n\nexport type BLOCK_HEADER = {\n  block_hash: BLOCK_HASH;\n  parent_hash: BLOCK_HASH;\n  block_number: BLOCK_NUMBER;\n  new_root: FELT;\n  timestamp: number;\n  sequencer_address: FELT;\n  l1_gas_price: RESOURCE_PRICE;\n  starknet_version: string;\n};\n\nexport type PENDING_BLOCK_HEADER = {\n  parent_hash: BLOCK_HASH;\n  timestamp: number;\n  sequencer_address: FELT;\n  l1_gas_price: RESOURCE_PRICE;\n  starknet_version: string;\n};\n\nexport type BLOCK_WITH_TX_HASHES = { status: BLOCK_STATUS } & BLOCK_HEADER &\n  BLOCK_BODY_WITH_TX_HASHES;\n\nexport type BLOCK_WITH_TXS = { status: BLOCK_STATUS } & BLOCK_HEADER & BLOCK_BODY_WITH_TXS;\n\nexport type PENDING_BLOCK_WITH_TX_HASHES = BLOCK_BODY_WITH_TX_HASHES & PENDING_BLOCK_HEADER;\n\nexport type PENDING_BLOCK_WITH_TXS = BLOCK_BODY_WITH_TXS & PENDING_BLOCK_HEADER;\n\nexport type DEPLOYED_CONTRACT_ITEM = {\n  address: FELT;\n  class_hash: FELT;\n};\n\nexport type CONTRACT_STORAGE_DIFF_ITEM = {\n  // The contract address for which the storage changed (in FELT format)\n  address: string;\n  // The changes in the storage of the contract\n  storage_entries: StorageDiffItem[];\n};\n\nexport type StorageDiffItem = {\n  // The key of the changed value (in FELT format)\n  key: string;\n  // The new value applied to the given address (in FELT format)\n  value: string;\n};\n\nexport type TXN = INVOKE_TXN | L1_HANDLER_TXN | DECLARE_TXN | DEPLOY_TXN | DEPLOY_ACCOUNT_TXN;\n\nexport type DECLARE_TXN = DECLARE_TXN_V0 | DECLARE_TXN_V1 | DECLARE_TXN_V2;\n\nexport type DECLARE_TXN_V0 = {\n  type: 'DECLARE';\n  sender_address: ADDRESS;\n  max_fee: FELT;\n  version: '0x0';\n  signature: SIGNATURE;\n  class_hash: FELT;\n};\n\nexport type DECLARE_TXN_V1 = {\n  type: 'DECLARE';\n  sender_address: ADDRESS;\n  max_fee: FELT;\n  version: '0x1';\n  signature: SIGNATURE;\n  nonce: FELT;\n  class_hash: FELT;\n};\n\nexport type DECLARE_TXN_V2 = {\n  type: 'DECLARE';\n  sender_address: ADDRESS;\n  compiled_class_hash: FELT;\n  max_fee: FELT;\n  version: '0x2';\n  signature: SIGNATURE;\n  nonce: FELT;\n  class_hash: FELT;\n};\n\nexport type BROADCASTED_TXN =\n  | BROADCASTED_INVOKE_TXN\n  | BROADCASTED_DECLARE_TXN\n  | BROADCASTED_DEPLOY_ACCOUNT_TXN;\n\nexport type BROADCASTED_INVOKE_TXN = INVOKE_TXN_V0 | INVOKE_TXN_V1;\n\nexport type BROADCASTED_DEPLOY_ACCOUNT_TXN = DEPLOY_ACCOUNT_TXN;\n\nexport type BROADCASTED_DECLARE_TXN = BROADCASTED_DECLARE_TXN_V1 | BROADCASTED_DECLARE_TXN_V2;\n\nexport type BROADCASTED_DECLARE_TXN_V1 = {\n  type: 'DECLARE';\n  sender_address: ADDRESS;\n  max_fee: FELT;\n  version: NUM_AS_HEX;\n  signature: SIGNATURE;\n  nonce: FELT;\n  contract_class: DEPRECATED_CONTRACT_CLASS;\n};\n\nexport type BROADCASTED_DECLARE_TXN_V2 = {\n  type: 'DECLARE';\n  sender_address: ADDRESS;\n  compiled_class_hash: FELT;\n  max_fee: FELT;\n  version: NUM_AS_HEX;\n  signature: SIGNATURE;\n  nonce: FELT;\n  contract_class: CONTRACT_CLASS;\n};\n\nexport type DEPLOY_ACCOUNT_TXN = DEPLOY_ACCOUNT_TXN_V1;\n\nexport type DEPLOY_ACCOUNT_TXN_V1 = {\n  type: 'DEPLOY_ACCOUNT';\n  max_fee: FELT;\n  version: NUM_AS_HEX;\n  signature: SIGNATURE;\n  nonce: FELT;\n  contract_address_salt: FELT;\n  constructor_calldata: FELT[];\n  class_hash: FELT;\n};\n\nexport type DEPLOY_TXN = {\n  type: 'DEPLOY';\n  version: NUM_AS_HEX;\n  contract_address_salt: FELT;\n  constructor_calldata: FELT[];\n  class_hash: FELT;\n};\n\nexport type INVOKE_TXN = INVOKE_TXN_V0 | INVOKE_TXN_V1;\n\nexport type INVOKE_TXN_V0 = {\n  type: 'INVOKE';\n  max_fee: FELT;\n  version: '0x0';\n  signature: SIGNATURE;\n  contract_address: ADDRESS;\n  entry_point_selector: FELT;\n  calldata: FELT[];\n};\n\nexport type INVOKE_TXN_V1 = {\n  type: 'INVOKE';\n  sender_address: ADDRESS;\n  calldata: FELT[];\n  max_fee: FELT;\n  version: NUM_AS_HEX;\n  signature: SIGNATURE;\n  nonce: FELT;\n};\n\nexport type L1_HANDLER_TXN = {\n  version: NUM_AS_HEX;\n  type: 'L1_HANDLER';\n  nonce: NUM_AS_HEX;\n} & FUNCTION_CALL;\n\nexport type COMMON_RECEIPT_PROPERTIES = {\n  transaction_hash: TXN_HASH;\n  actual_fee: FELT;\n  execution_status: TXN_EXECUTION_STATUS;\n  finality_status: TXN_FINALITY_STATUS;\n  block_hash: BLOCK_HASH;\n  block_number: BLOCK_NUMBER;\n  messages_sent: MSG_TO_L1[];\n  revert_reason: string;\n  events: EVENT[];\n  execution_resources: EXECUTION_RESOURCES;\n};\n\nexport type PENDING_COMMON_RECEIPT_PROPERTIES = {\n  transaction_hash: TXN_HASH;\n  actual_fee: FELT;\n  type: TXN_TYPE;\n  messages_sent: MSG_TO_L1[];\n  events: EVENT[];\n  revert_reason: string;\n  finality_status: 'ACCEPTED_ON_L2';\n  execution_status: TXN_EXECUTION_STATUS;\n  execution_resources: EXECUTION_RESOURCES;\n};\n\nexport type INVOKE_TXN_RECEIPT = {\n  type: 'INVOKE';\n} & COMMON_RECEIPT_PROPERTIES;\n\nexport type PENDING_INVOKE_TXN_RECEIPT = {\n  type: 'INVOKE';\n} & PENDING_COMMON_RECEIPT_PROPERTIES;\n\nexport type DECLARE_TXN_RECEIPT = {\n  type: 'DECLARE';\n} & COMMON_RECEIPT_PROPERTIES;\n\nexport type PENDING_DECLARE_TXN_RECEIPT = {\n  type: 'DECLARE';\n} & PENDING_COMMON_RECEIPT_PROPERTIES;\n\nexport type DEPLOY_ACCOUNT_TXN_RECEIPT = {\n  type: 'DEPLOY_ACCOUNT';\n  contract_address: FELT;\n} & COMMON_RECEIPT_PROPERTIES;\n\nexport type PENDING_DEPLOY_ACCOUNT_TXN_RECEIPT = {\n  type: 'DEPLOY_ACCOUNT';\n  contract_address: FELT;\n} & PENDING_COMMON_RECEIPT_PROPERTIES;\n\nexport type DEPLOY_TXN_RECEIPT = {\n  type: 'DEPLOY';\n  contract_address: FELT;\n} & COMMON_RECEIPT_PROPERTIES;\n\nexport type L1_HANDLER_TXN_RECEIPT = {\n  type: 'L1_HANDLER';\n  message_hash: NUM_AS_HEX;\n} & COMMON_RECEIPT_PROPERTIES;\n\nexport type PENDING_L1_HANDLER_TXN_RECEIPT = {\n  type: 'L1_HANDLER';\n  message_hash: NUM_AS_HEX;\n} & PENDING_COMMON_RECEIPT_PROPERTIES;\n\nexport type TXN_RECEIPT =\n  | INVOKE_TXN_RECEIPT\n  | L1_HANDLER_TXN_RECEIPT\n  | DECLARE_TXN_RECEIPT\n  | DEPLOY_TXN_RECEIPT\n  | DEPLOY_ACCOUNT_TXN_RECEIPT;\n\nexport type PENDING_TXN_RECEIPT =\n  | PENDING_INVOKE_TXN_RECEIPT\n  | PENDING_L1_HANDLER_TXN_RECEIPT\n  | PENDING_DECLARE_TXN_RECEIPT\n  | PENDING_DEPLOY_ACCOUNT_TXN_RECEIPT;\n\nexport type MSG_TO_L1 = {\n  from_address: FELT;\n  to_address: FELT;\n  payload: FELT[];\n};\n\nexport type MSG_FROM_L1 = {\n  from_address: ETH_ADDRESS;\n  to_address: ADDRESS;\n  entry_point_selector: FELT;\n  payload: FELT[];\n};\n\nexport type FUNCTION_CALL = {\n  contract_address: ADDRESS;\n  entry_point_selector: FELT;\n  calldata: FELT[];\n};\n\nexport type CONTRACT_CLASS = {\n  sierra_program: FELT[];\n  contract_class_version: string;\n  entry_points_by_type: {\n    CONSTRUCTOR: SIERRA_ENTRY_POINT[];\n    EXTERNAL: SIERRA_ENTRY_POINT[];\n    L1_HANDLER: SIERRA_ENTRY_POINT[];\n  };\n  abi: string;\n};\n\nexport type DEPRECATED_CONTRACT_CLASS = {\n  program: string;\n  entry_points_by_type: {\n    CONSTRUCTOR: DEPRECATED_CAIRO_ENTRY_POINT[];\n    EXTERNAL: DEPRECATED_CAIRO_ENTRY_POINT[];\n    L1_HANDLER: DEPRECATED_CAIRO_ENTRY_POINT[];\n  };\n  abi: CONTRACT_ABI;\n};\n\nexport type DEPRECATED_CAIRO_ENTRY_POINT = {\n  offset: NUM_AS_HEX | number;\n  selector: FELT;\n};\n\nexport type SIERRA_ENTRY_POINT = {\n  selector: FELT;\n  function_idx: number;\n};\n\nexport type CONTRACT_ABI = CONTRACT_ABI_ENTRY[];\n\nexport type CONTRACT_ABI_ENTRY = {\n  selector: FELT;\n  input: string;\n  output: string;\n};\n\nexport type STRUCT_ABI_ENTRY = {\n  type: STRUCT_ABI_TYPE;\n  name: string;\n  size: number;\n  members: STRUCT_MEMBER[];\n};\n\nexport type STRUCT_MEMBER = TYPED_PARAMETER & {\n  offset: number;\n};\n\nexport type EVENT_ABI_ENTRY = {\n  type: EVENT_ABI_TYPE;\n  name: string;\n  keys: TYPED_PARAMETER[];\n  data: TYPED_PARAMETER[];\n};\n\nexport type FUNCTION_STATE_MUTABILITY = 'view';\n\nexport type FUNCTION_ABI_ENTRY = {\n  type: FUNCTION_ABI_TYPE;\n  name: string;\n  inputs: TYPED_PARAMETER[];\n  outputs: TYPED_PARAMETER[];\n  stateMutability: FUNCTION_STATE_MUTABILITY;\n};\n\nexport type TYPED_PARAMETER = {\n  name: string;\n  type: string;\n};\n\nexport type FEE_ESTIMATE = {\n  gas_consumed: NUM_AS_HEX;\n  gas_price: NUM_AS_HEX;\n  overall_fee: NUM_AS_HEX;\n};\n\nexport type RESOURCE_LIMITS = {\n  max_amount: NUM_AS_HEX;\n  max_price_per_unit: NUM_AS_HEX;\n};\n\nexport type RESOURCE_PRICE = {\n  price_in_strk?: NUM_AS_HEX;\n  price_in_wei: NUM_AS_HEX;\n};\n\nexport type EXECUTION_RESOURCES = {\n  steps: NUM_AS_HEX;\n  memory_holes: NUM_AS_HEX;\n  range_check_builtin_applications: NUM_AS_HEX;\n  pedersen_builtin_applications: NUM_AS_HEX;\n  poseidon_builtin_applications: NUM_AS_HEX;\n  ec_op_builtin_applications: NUM_AS_HEX;\n  ecdsa_builtin_applications: NUM_AS_HEX;\n  bitwise_builtin_applications: NUM_AS_HEX;\n  keccak_builtin_applications: NUM_AS_HEX;\n};\n\n/**\n * TRACE API\n */\n\n// Represents a transaction trace including the execution details.\nexport type TRANSACTION_TRACE = {\n  invoke_tx_trace?: INVOKE_TXN_TRACE;\n  declare_tx_trace?: DECLARE_TXN_TRACE;\n  deploy_account_tx_trace?: DEPLOY_ACCOUNT_TXN_TRACE;\n  l1_handler_tx_trace?: L1_HANDLER_TXN_TRACE;\n};\n\n// Represents a transaction trace for an invoke transaction.\nexport type INVOKE_TXN_TRACE = {\n  type: 'INVOKE';\n  execute_invocation: FUNCTION_INVOCATION | { revert_reason: string };\n  validate_invocation?: FUNCTION_INVOCATION;\n  fee_transfer_invocation?: FUNCTION_INVOCATION;\n  state_diff?: STATE_DIFF;\n};\n\n// Represents a transaction trace for a declare transaction.\nexport type DECLARE_TXN_TRACE = {\n  type: 'DECLARE';\n  validate_invocation?: FUNCTION_INVOCATION;\n  fee_transfer_invocation?: FUNCTION_INVOCATION;\n  state_diff?: STATE_DIFF;\n};\n\n// Represents a transaction trace for a deploy account transaction.\nexport type DEPLOY_ACCOUNT_TXN_TRACE = {\n  type: 'DEPLOY_ACCOUNT';\n  constructor_invocation: FUNCTION_INVOCATION;\n  validate_invocation?: FUNCTION_INVOCATION;\n  fee_transfer_invocation?: FUNCTION_INVOCATION;\n  state_diff?: STATE_DIFF;\n};\n\n// Represents a transaction trace for an L1 handler transaction.\nexport type L1_HANDLER_TXN_TRACE = {\n  type: 'L1_HANDLER';\n  function_invocation: FUNCTION_INVOCATION;\n  state_diff?: STATE_DIFF;\n};\n\n// Represents a nested function call.\nexport type NESTED_CALL = FUNCTION_INVOCATION;\n\n// Represents a function invocation along with its execution details.\nexport type FUNCTION_INVOCATION = {\n  function_call: FUNCTION_CALL;\n  caller_address: string;\n  class_hash: string;\n  entry_point_type: ENTRY_POINT_TYPE;\n  call_type: CALL_TYPE;\n  result: string[];\n  calls: NESTED_CALL[];\n  events: ORDERED_EVENT[];\n  messages: ORDERED_MESSAGE[];\n};\n\n// Represents an ordered event alongside its order within the transaction.\nexport type ORDERED_EVENT = {\n  order: number;\n  event: EVENT;\n};\n\n// Represents an ordered message alongside its order within the transaction.\nexport type ORDERED_MESSAGE = {\n  order: number;\n  message: MSG_TO_L1;\n};\n","/**\n * Types that are not in spec but required for UX\n */\nimport {\n  ADDRESS,\n  BLOCK_HASH,\n  BLOCK_NUMBER,\n  BLOCK_WITH_TXS,\n  BLOCK_WITH_TX_HASHES,\n  BROADCASTED_TXN,\n  CHAIN_ID,\n  CONTRACT_CLASS,\n  CONTRACT_STORAGE_DIFF_ITEM,\n  DEPRECATED_CONTRACT_CLASS,\n  EVENTS_CHUNK,\n  EVENT_FILTER,\n  FEE_ESTIMATE,\n  FELT,\n  MSG_FROM_L1,\n  NONCE_UPDATE,\n  PENDING_BLOCK_WITH_TXS,\n  PENDING_BLOCK_WITH_TX_HASHES,\n  PENDING_STATE_UPDATE,\n  PENDING_TXN_RECEIPT,\n  REPLACED_CLASS,\n  RESULT_PAGE_REQUEST,\n  SIMULATION_FLAG,\n  STATE_UPDATE,\n  SYNC_STATUS,\n  TRANSACTION_TRACE,\n  TXN,\n  TXN_EXECUTION_STATUS,\n  TXN_HASH,\n  TXN_RECEIPT,\n  TXN_STATUS,\n} from './components';\n\n// METHOD RESPONSES\n// response starknet_getClass\nexport type ContractClass = CONTRACT_CLASS | DEPRECATED_CONTRACT_CLASS;\n// response starknet_simulateTransactions\nexport type SimulateTransactionResponse = {\n  transaction_trace: TRANSACTION_TRACE;\n  fee_estimation: FEE_ESTIMATE;\n}[];\n// response starknet_estimateFee\nexport type FeeEstimate = FEE_ESTIMATE;\n// response starknet_getTransactionByHash, starknet_getTransactionByBlockIdAndIndex\nexport type TransactionWithHash = TXN & { transaction_hash: TXN_HASH };\n// response starknet_blockHashAndNumber\nexport type BlockHashAndNumber = { block_hash: BLOCK_HASH; block_number: BLOCK_NUMBER };\n// response starknet_getBlockWithTxs\nexport type BlockWithTxs = BLOCK_WITH_TXS | PENDING_BLOCK_WITH_TXS;\n// response starknet_getBlockWithTxHashes\nexport type BlockWithTxHashes = BLOCK_WITH_TX_HASHES | PENDING_BLOCK_WITH_TX_HASHES;\n// response starknet_getStateUpdate\nexport type StateUpdate = STATE_UPDATE | PENDING_STATE_UPDATE;\n// response starknet_traceBlockTransactions\nexport type BlockTransactionsTraces = { transaction_hash: FELT; trace_root: TRANSACTION_TRACE }[];\n// response starknet_syncing\nexport type Syncing = false | SYNC_STATUS;\n// response starknet_getEvents\nexport type Events = EVENTS_CHUNK;\n// response starknet_addInvokeTransaction\nexport type InvokedTransaction = { transaction_hash: TXN_HASH };\n// response starknet_addDeclareTransaction\nexport type DeclaredTransaction = { transaction_hash: TXN_HASH; class_hash: FELT };\n// response starknet_addDeployAccountTransaction\nexport type DeployedAccountTransaction = { transaction_hash: TXN_HASH; contract_address: FELT };\n\n// Nice Components names\nexport type ContractAddress = ADDRESS;\nexport type Felt = FELT;\nexport type Nonce = FELT;\nexport type TransactionHash = TXN_HASH;\nexport type TransactionTrace = TRANSACTION_TRACE;\nexport type BlockHash = BLOCK_HASH;\nexport type TransactionReceipt = TXN_RECEIPT | PENDING_TXN_RECEIPT;\nexport type EventFilter = EVENT_FILTER & RESULT_PAGE_REQUEST;\nexport type SimulationFlags = Array<SIMULATION_FLAG>;\nexport type L1Message = MSG_FROM_L1;\nexport type BaseTransaction = BROADCASTED_TXN;\nexport type ChainId = CHAIN_ID;\nexport type Transaction = TXN;\nexport type TransactionStatus = {\n  finality_status: TXN_STATUS;\n  execution_status?: TXN_EXECUTION_STATUS;\n};\n\n// Diff Than Seq\nexport type StorageDiffs = Array<CONTRACT_STORAGE_DIFF_ITEM>;\nexport type DeprecatedDeclaredClasses = Array<FELT>;\nexport type NonceUpdates = NONCE_UPDATE[];\nexport type ReplacedClasses = REPLACED_CLASS[];\n\n// Enums Derived From Spec Types (require manual check for changes)\nexport enum ETransactionType {\n  DECLARE = 'DECLARE',\n  DEPLOY = 'DEPLOY',\n  DEPLOY_ACCOUNT = 'DEPLOY_ACCOUNT',\n  INVOKE = 'INVOKE',\n  L1_HANDLER = 'L1_HANDLER',\n}\n\nexport enum ESimulationFlag {\n  SKIP_VALIDATE = 'SKIP_VALIDATE',\n  SKIP_FEE_CHARGE = 'SKIP_FEE_CHARGE',\n}\n\nexport enum ETransactionStatus {\n  RECEIVED = 'RECEIVED',\n  REJECTED = 'REJECTED',\n  ACCEPTED_ON_L2 = 'ACCEPTED_ON_L2',\n  ACCEPTED_ON_L1 = 'ACCEPTED_ON_L1',\n}\n\nexport enum ETransactionFinalityStatus {\n  ACCEPTED_ON_L2 = 'ACCEPTED_ON_L2',\n  ACCEPTED_ON_L1 = 'ACCEPTED_ON_L1',\n}\nexport enum ETransactionExecutionStatus {\n  SUCCEEDED = 'SUCCEEDED',\n  REVERTED = 'REVERTED',\n}\n\nexport enum EBlockTag {\n  LATEST = 'latest',\n  PENDING = 'pending',\n}\n\nexport enum EDataAvailabilityMode {\n  L1 = 'L1',\n  L2 = 'L2',\n}\n","import {\n  Abi,\n  AllowArray,\n  BigNumberish,\n  BlockIdentifier,\n  BlockNumber,\n  BlockStatus,\n  ByteCode,\n  CairoAssembly,\n  CompiledContract,\n  ContractClass,\n  EntryPointType,\n  RawCalldata,\n  TransactionExecutionStatus,\n  TransactionFinalityStatus,\n  TransactionStatus,\n  TransactionType,\n} from '../lib';\n\n// #region | originally not included in the namespace\nexport type GetTransactionStatusResponse = {\n  tx_status: TransactionStatus;\n  execution_status: TransactionExecutionStatus;\n  finality_status: TransactionFinalityStatus;\n  block_hash?: string;\n  tx_failure_reason?: {\n    code: string;\n    error_message: string;\n  };\n  tx_revert_reason?: string;\n};\n\nexport type GetContractAddressesResponse = {\n  Starknet: string;\n  GpsStatementVerifier: string;\n};\n\nexport type FunctionInvocation = {\n  caller_address: string;\n  contract_address: string;\n  calldata: RawCalldata;\n  call_type?: string;\n  class_hash?: string;\n  selector?: string;\n  entry_point_type?: EntryPointType.EXTERNAL; // TODO: check this\n  result: Array<any>;\n  execution_resources: ExecutionResources;\n  internal_calls: Array<FunctionInvocation>;\n  events: Array<any>;\n  messages: Array<any>;\n};\n\nexport type ExecutionResources = {\n  n_steps: number;\n  builtin_instance_counter: {\n    pedersen_builtin: number;\n    range_check_builtin: number;\n    bitwise_builtin: number;\n    output_builtin: number;\n    ecdsa_builtin: number;\n    ec_op_builtin?: number;\n  };\n  n_memory_holes: number;\n};\n\nexport type CallL1Handler = {\n  from_address: string;\n  to_address: string;\n  entry_point_selector: string;\n  payload: Array<string>;\n};\n\nexport type DeployedContractItem = {\n  address: string;\n  class_hash: string;\n};\n\nexport type SequencerIdentifier = { blockHash: string } | { blockNumber: BlockNumber };\n// #endregion\n\nexport type TransactionTraceResponse = {\n  validate_invocation?: FunctionInvocation;\n  function_invocation?: FunctionInvocation;\n  fee_transfer_invocation?: FunctionInvocation;\n  constructor_invocation?: FunctionInvocation;\n  signature: string[];\n};\n\nexport type DeclareTransaction = {\n  type: TransactionType.DECLARE;\n  sender_address: string;\n  contract_class: ContractClass;\n  signature?: string[];\n  nonce: BigNumberish;\n  max_fee?: BigNumberish;\n  version?: BigNumberish;\n  compiled_class_hash?: string; // v2 declare\n};\n\nexport type DeployTransaction = {\n  type: TransactionType.DEPLOY;\n  contract_definition: ContractClass;\n  contract_address_salt: BigNumberish;\n  constructor_calldata: string[];\n  nonce?: BigNumberish;\n};\n\nexport type DeployAccountTransaction = {\n  type: TransactionType.DEPLOY_ACCOUNT;\n  class_hash: string;\n  contract_address_salt: BigNumberish;\n  constructor_calldata: string[];\n  signature?: string[];\n  max_fee?: BigNumberish;\n  version?: BigNumberish;\n  nonce?: BigNumberish;\n};\n\nexport type InvokeFunctionTransaction = {\n  type: TransactionType.INVOKE;\n  sender_address: string;\n  signature?: string[];\n  entry_point_type?: EntryPointType.EXTERNAL; // TODO: check this\n  calldata?: RawCalldata;\n  nonce: BigNumberish;\n  max_fee?: BigNumberish;\n  version?: BigNumberish;\n};\n\nexport type Transaction =\n  | DeclareTransaction\n  | DeployTransaction\n  | InvokeFunctionTransaction\n  | DeployAccountTransaction;\n\nexport type AddTransactionResponse = {\n  transaction_hash: string;\n  code?: 'TRANSACTION_RECEIVED';\n  address?: string;\n  class_hash?: string;\n};\n\nexport type GetCodeResponse = {\n  bytecode: ByteCode;\n  abi: Abi;\n};\n\nexport interface InvokeFunctionTransactionResponse extends InvokeFunctionTransaction {\n  transaction_hash: string;\n  entry_point_selector: string;\n}\n\nexport type TransactionResponse =\n  | DeclareTransaction\n  | DeployTransaction\n  | InvokeFunctionTransactionResponse;\n\nexport type SuccessfulTransactionResponse = {\n  execution_status: TransactionExecutionStatus.SUCCEEDED;\n  finality_status: TransactionFinalityStatus;\n  status: TransactionStatus;\n  block_hash: string;\n  block_number: BlockNumber;\n  transaction_index: number;\n  transaction: TransactionResponse;\n};\n\nexport type RevertedTransactionResponse = {\n  execution_status: TransactionExecutionStatus.REVERTED;\n  finality_status: TransactionFinalityStatus;\n  status: TransactionStatus;\n  block_hash: string;\n  block_number: BlockNumber;\n  transaction_index: number;\n  transaction: TransactionResponse;\n  revert_error: string;\n};\n\nexport type FailedTransactionResponse = {\n  status: TransactionStatus.REJECTED;\n  transaction_failure_reason: {\n    code: string;\n    error_message: string;\n  };\n  transaction: TransactionResponse;\n};\n\nexport type GetTransactionResponse =\n  | SuccessfulTransactionResponse\n  | RevertedTransactionResponse\n  | FailedTransactionResponse;\n\nexport type TransactionReceiptResponse =\n  | SuccessfulTransactionReceiptResponse\n  | RevertedTransactionReceiptResponse\n  | RejectedTransactionReceiptResponse;\n\nexport type SuccessfulTransactionReceiptResponse = {\n  execution_status: TransactionExecutionStatus.SUCCEEDED;\n  finality_status: TransactionFinalityStatus;\n  status: TransactionStatus;\n  actual_fee: string;\n  block_hash: string;\n  block_number: BlockNumber;\n  transaction_hash: string;\n  transaction_index: number;\n  l2_to_l1_messages: string[];\n  events: string[];\n  execution_resources?: ExecutionResources; // INVOKE ONLY\n};\n\nexport type RevertedTransactionReceiptResponse = {\n  execution_status: TransactionExecutionStatus.REVERTED;\n  finality_status: TransactionFinalityStatus;\n  status: TransactionStatus.REVERTED;\n  actual_fee: string;\n  block_hash: string;\n  block_number: BlockNumber;\n  transaction_hash: string;\n  transaction_index: number;\n  l2_to_l1_messages: string[];\n  events: string[];\n  revert_error: string;\n};\n\nexport type RejectedTransactionReceiptResponse = {\n  execution_status: TransactionExecutionStatus.REJECTED;\n  finality_status: TransactionFinalityStatus;\n  status: TransactionStatus.REJECTED;\n  transaction_hash: string;\n  l2_to_l1_messages: string[];\n  events: string[];\n  transaction_failure_reason: {\n    code: string;\n    error_message: string;\n  };\n};\n\nexport type GetBlockResponse = {\n  block_number: number;\n  state_root: string;\n  block_hash: string;\n  transactions: {\n    [txHash: string]: TransactionResponse;\n  };\n  timestamp: number;\n  transaction_receipts: {\n    [txHash: string]: {\n      block_hash: string;\n      transaction_hash: string;\n      l2_to_l1_messages: {\n        to_address: string;\n        payload: string[];\n        from_address: string;\n      }[];\n      block_number: BlockNumber;\n      status: TransactionStatus;\n      transaction_index: number;\n    };\n  };\n  parent_block_hash: string;\n  status: BlockStatus;\n  gas_price: string;\n  sequencer_address: string;\n  starknet_version: string;\n};\n\nexport type CallContractTransaction = {\n  calldata?: RawCalldata;\n  max_fee?: BigNumberish;\n  version?: BigNumberish;\n  entry_point_selector: string;\n} & (\n  | {\n      sender_address: string;\n      signature: string[];\n    }\n  | {\n      contract_address: string;\n      signature?: never;\n    }\n);\n\nexport type CallContractResponse = {\n  result: string[];\n};\n\nexport type InvokeEstimateFee = Omit<InvokeFunctionTransaction, 'max_fee' | 'entry_point_type'>;\nexport type DeclareEstimateFee = Omit<DeclareTransaction, 'max_fee'>;\nexport type DeployAccountEstimateFee = Omit<DeployAccountTransaction, 'max_fee'>;\nexport type DeployEstimateFee = DeployTransaction;\n\nexport type SimulateTransactionResponse = {\n  trace: TransactionTraceResponse; // diff with OPENRPC \"transaction_trace\"\n  fee_estimation: EstimateFeeResponse;\n};\n\nexport type AccountTransactionItem =\n  | InvokeEstimateFee\n  | DeclareEstimateFee\n  | DeployEstimateFee\n  | DeployAccountEstimateFee;\n\n/**\n * Transaction filled with account data\n */\nexport type AccountTransaction = AllowArray<AccountTransactionItem>;\n\n// Support 0.9.1 changes in a backward-compatible way\nexport type EstimateFeeResponse =\n  | {\n      overall_fee: number;\n      gas_price: number;\n      gas_usage: number;\n      uint: string;\n    }\n  | {\n      amount: bigint;\n      unit: string;\n    };\n\nexport type EstimateFeeResponseBulk = AllowArray<EstimateFeeResponse>;\n\nexport type BlockTransactionTracesResponse = {\n  traces: Array<TransactionTraceResponse & { transaction_hash: string }>;\n};\n\nexport type Storage = string;\n\nexport type StateUpdateResponse = {\n  block_hash: string;\n  new_root: string;\n  old_root: string;\n  state_diff: {\n    storage_diffs: StorageDiffs;\n    nonces: Nonces;\n    deployed_contracts: Array<DeployedContractItem>;\n    old_declared_contracts: OldDeclaredContracts;\n    declared_classes: DeclaredClasses;\n    replaced_classes: ReplacedClasses; // no definition is it array of string\n  };\n};\n\nexport type StorageDiffs = { [address: string]: Array<StateDiffItem> };\n\nexport type StateDiffItem = { key: string; value: string };\n\nexport type Nonces = { [address: string]: Nonce };\n\nexport type Nonce = string;\n\nexport type DeployedContracts = DeployedContractItem[];\n\nexport type OldDeclaredContracts = string[];\n\nexport type DeclaredClasses = DeclaredClass[];\n\nexport type DeclaredClass = { class_hash: string; compiled_class_hash: string };\n\nexport type ReplacedClasses = string[]; // no definition is it array of string ?\n\nexport type Endpoints = {\n  get_contract_addresses: {\n    QUERY: never;\n    REQUEST: never;\n    RESPONSE: GetContractAddressesResponse;\n  };\n  add_transaction: {\n    QUERY: never;\n    REQUEST: Transaction;\n    RESPONSE: AddTransactionResponse;\n  };\n  get_transaction: {\n    QUERY: {\n      transactionHash: string;\n    };\n    REQUEST: never;\n    RESPONSE: GetTransactionResponse;\n  };\n  get_transaction_status: {\n    QUERY: {\n      transactionHash: string;\n    };\n    REQUEST: never;\n    RESPONSE: GetTransactionStatusResponse;\n  };\n  get_transaction_trace: {\n    QUERY: {\n      transactionHash: string;\n    };\n    REQUEST: never;\n    RESPONSE: TransactionTraceResponse;\n  };\n  get_transaction_receipt: {\n    QUERY: {\n      transactionHash: string;\n    };\n    REQUEST: never;\n    RESPONSE: TransactionReceiptResponse;\n  };\n  get_nonce: {\n    QUERY: {\n      contractAddress: string;\n      blockIdentifier: BlockIdentifier;\n    };\n    REQUEST: never;\n    RESPONSE: Nonce;\n  };\n  get_storage_at: {\n    QUERY: {\n      contractAddress: string;\n      key: BigNumberish;\n      blockIdentifier: BlockIdentifier;\n    };\n    REQUEST: never;\n    RESPONSE: Storage;\n  };\n  get_code: {\n    QUERY: {\n      contractAddress: string;\n      blockIdentifier: BlockIdentifier;\n    };\n    REQUEST: never;\n    RESPONSE: GetCodeResponse;\n  };\n  get_block: {\n    QUERY: {\n      blockIdentifier: BlockIdentifier;\n    };\n    REQUEST: never;\n    RESPONSE: GetBlockResponse;\n  };\n  call_contract: {\n    QUERY: {\n      blockIdentifier: BlockIdentifier;\n    };\n    REQUEST: CallContractTransaction;\n    RESPONSE: CallContractResponse;\n  };\n  estimate_fee: {\n    QUERY: {\n      blockIdentifier: BlockIdentifier;\n      skipValidate: boolean;\n    };\n    REQUEST: AccountTransactionItem;\n    RESPONSE: EstimateFeeResponse;\n  };\n  get_class_by_hash: {\n    QUERY: {\n      classHash: string;\n      blockIdentifier?: BlockIdentifier;\n    };\n    REQUEST: never;\n    RESPONSE: CompiledContract;\n  };\n  get_class_hash_at: {\n    QUERY: {\n      contractAddress: string;\n      blockIdentifier?: BlockIdentifier;\n    };\n    REQUEST: never;\n    RESPONSE: string;\n  };\n  get_state_update: {\n    QUERY: {\n      blockHash?: string;\n      blockNumber?: BlockNumber;\n    };\n    REQUEST: never;\n    RESPONSE: StateUpdateResponse;\n  };\n  get_full_contract: {\n    QUERY: {\n      contractAddress: string;\n      blockIdentifier?: BlockIdentifier;\n    };\n    REQUEST: never;\n    RESPONSE: CompiledContract;\n  };\n  estimate_message_fee: {\n    QUERY: any;\n    REQUEST: any;\n    RESPONSE: EstimateFeeResponse;\n  };\n  simulate_transaction: {\n    QUERY: {\n      blockIdentifier: BlockIdentifier;\n      skipValidate: boolean;\n    };\n    REQUEST: AccountTransaction;\n    RESPONSE: SimulateTransactionResponse;\n  };\n  estimate_fee_bulk: {\n    QUERY: {\n      blockIdentifier: BlockIdentifier;\n      skipValidate: boolean;\n    };\n    REQUEST: AccountTransaction;\n    RESPONSE: EstimateFeeResponseBulk;\n  };\n  get_block_traces: {\n    QUERY: {\n      blockHash?: string;\n      blockNumber?: BlockNumber;\n    };\n    REQUEST: never;\n    RESPONSE: BlockTransactionTracesResponse;\n  };\n  get_compiled_class_by_class_hash: {\n    QUERY: {\n      classHash: string;\n      blockIdentifier?: BlockIdentifier;\n    };\n    REQUEST: any;\n    RESPONSE: CairoAssembly;\n  };\n};\n","export default function assert(condition: any, message?: string): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failure');\n  }\n}\n","import { hexToBytes as hexToBytesNoble } from '@noble/curves/abstract/utils';\n\nimport { BigNumberish } from '../types';\nimport assert from './assert';\nimport { addHexPrefix, removeHexPrefix } from './encode';\n\n/** @deprecated prefer importing from 'types' over 'num' */\nexport type { BigNumberish };\n\n/**\n * Test if string is hex-string\n * @param hex hex-string\n */\nexport function isHex(hex: string): boolean {\n  return /^0x[0-9a-f]*$/i.test(hex);\n}\n\n/**\n * Convert BigNumberish to bigint\n */\nexport function toBigInt(value: BigNumberish): bigint {\n  return BigInt(value);\n}\n\n/**\n * Test if value is bigint\n */\nexport function isBigInt(value: any): value is bigint {\n  return typeof value === 'bigint';\n}\n\n/**\n * Convert BigNumberish to hex-string\n * @returns format: hex-string\n */\nexport function toHex(number: BigNumberish): string {\n  return addHexPrefix(toBigInt(number).toString(16));\n}\n\n/**\n * Alias of ToHex\n */\nexport const toHexString = toHex;\n\n/**\n * Convert BigNumberish to storage-key-string\n *\n * Same as toHex but conforming to the STORAGE_KEY pattern `^0x0[0-7]{1}[a-fA-F0-9]{0,62}$`.\n *\n * A storage key is represented as up to 62 hex digits, 3 bits, and 5 leading zeroes:\n * `0x0 + [0-7] + 62 hex = 0x + 64 hex`\n * @returns format: storage-key-string\n */\nexport function toStorageKey(number: BigNumberish): string {\n  const res = addHexPrefix(toBigInt(number).toString(16).padStart(64, '0'));\n  return res;\n}\n\n/**\n * Convert hexadecimal string to decimal string\n * @param hex hex-string\n * @returns format: decimal string\n */\nexport function hexToDecimalString(hex: string): string {\n  return BigInt(addHexPrefix(hex)).toString(10);\n}\n\n/**\n * Remove hex string leading zero and lowercase it\n * @example '0x01A...' -> '0x1a..'\n * @param hex hex-string\n * @returns format: hex-string\n */\nexport const cleanHex = (hex: string) => hex.toLowerCase().replace(/^(0x)0+/, '$1');\n\n/**\n * Asserts input is equal to or greater then lowerBound and lower then upperBound.\n *\n * The `inputName` parameter is used in the assertion message.\n */\nexport function assertInRange(\n  input: BigNumberish,\n  lowerBound: BigNumberish,\n  upperBound: BigNumberish,\n  inputName = ''\n) {\n  const messageSuffix = inputName === '' ? 'invalid length' : `invalid ${inputName} length`;\n  const inputBigInt = BigInt(input);\n  const lowerBoundBigInt = BigInt(lowerBound);\n  const upperBoundBigInt = BigInt(upperBound);\n\n  assert(\n    inputBigInt >= lowerBoundBigInt && inputBigInt <= upperBoundBigInt,\n    `Message not signable, ${messageSuffix}.`\n  );\n}\n\n/**\n * Convert BigNumberish array to decimal string array\n * @returns format: decimal string array\n */\nexport function bigNumberishArrayToDecimalStringArray(rawCalldata: BigNumberish[]): string[] {\n  return rawCalldata.map((x) => toBigInt(x).toString(10));\n}\n\n/**\n * Convert BigNumberish array to hexadecimal string array\n * @returns format: hex-string array\n */\nexport function bigNumberishArrayToHexadecimalStringArray(rawCalldata: BigNumberish[]): string[] {\n  return rawCalldata.map((x) => toHex(x));\n}\n\n/**\n * Test if string is whole number (0, 1, 2, 3...)\n */\nexport const isStringWholeNumber = (value: string) => /^\\d+$/.test(value);\n\n/**\n * Convert string to decimal string\n * @returns format: decimal string\n */\nexport function getDecimalString(value: string) {\n  if (isHex(value)) {\n    return hexToDecimalString(value);\n  }\n  if (isStringWholeNumber(value)) {\n    return value;\n  }\n  throw new Error(`${value} need to be hex-string or whole-number-string`);\n}\n\n/**\n * Convert string to hexadecimal string\n * @returns format: hex-string\n */\nexport function getHexString(value: string) {\n  if (isHex(value)) {\n    return value;\n  }\n  if (isStringWholeNumber(value)) {\n    return toHexString(value);\n  }\n  throw new Error(`${value} need to be hex-string or whole-number-string`);\n}\n\n/**\n * Convert string array to hex-string array\n * @returns format: hex-string array\n */\nexport function getHexStringArray(value: Array<string>) {\n  return value.map((el) => getHexString(el));\n}\n\n/**\n * Convert boolean to \"0\" or \"1\"\n */\nexport const toCairoBool = (value: boolean): string => (+value).toString();\n\n/**\n * Convert hex-string to an array of Bytes (Uint8Array)\n * @param value hex-string\n */\nexport function hexToBytes(value: string): Uint8Array {\n  if (!isHex(value)) throw new Error(`${value} need to be a hex-string`);\n\n  let adaptedValue: string = removeHexPrefix(value);\n  if (adaptedValue.length % 2 !== 0) {\n    adaptedValue = `0${adaptedValue}`;\n  }\n  return hexToBytesNoble(adaptedValue);\n}\n","import { keccak } from '@scure/starknet';\n\nimport { MASK_250 } from '../constants';\nimport { BigNumberish } from '../types';\nimport { addHexPrefix, removeHexPrefix, utf8ToArray } from './encode';\nimport { hexToBytes, isHex, isStringWholeNumber, toHex, toHexString } from './num';\n\n/**\n * Calculate hex-string keccak hash for a given BigNumberish\n *\n * BigNumberish -> hex-string keccak hash\n * @returns format: hex-string\n */\nexport function keccakBn(value: BigNumberish): string {\n  const hexWithoutPrefix = removeHexPrefix(toHex(BigInt(value)));\n  const evenHex = hexWithoutPrefix.length % 2 === 0 ? hexWithoutPrefix : `0${hexWithoutPrefix}`;\n  return addHexPrefix(keccak(hexToBytes(addHexPrefix(evenHex))).toString(16));\n}\n\n/**\n * Calculate hex-string keccak hash for a given string\n *\n * String -> hex-string keccak hash\n * @returns format: hex-string\n */\nfunction keccakHex(str: string): string {\n  return addHexPrefix(keccak(utf8ToArray(str)).toString(16));\n}\n\n/**\n * Calculate bigint keccak hash for a given string\n *\n * String -> bigint keccak hash\n *\n * [Reference](https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/public/abi.py#L17-L22)\n * @param str the value you want to get the keccak hash from\n * @returns starknet keccak hash as BigInt\n */\nexport function starknetKeccak(str: string): bigint {\n  const hash = BigInt(keccakHex(str));\n  // eslint-disable-next-line no-bitwise\n  return hash & MASK_250;\n}\n\n/**\n * Calculate hex-string selector for a given abi-function-name\n *\n * Abi-function-name -> hex-string selector\n *\n * [Reference](https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/public/abi.py#L25-L26)\n * @param funcName ascii-string of 'abi function name'\n * @returns format: hex-string; selector for 'abi function name'\n */\nexport function getSelectorFromName(funcName: string) {\n  // sometimes BigInteger pads the hex string with zeros, which is not allowed in the starknet api\n  return toHex(starknetKeccak(funcName));\n}\n\n/**\n * Calculate hex-string selector from abi-function-name, decimal string or hex string\n *\n * ('abi-function-name' or dec-string or hex-string) -> hex-string selector\n *\n * @param value hex-string | dec-string | ascii-string\n * @returns format: hex-string\n */\nexport function getSelector(value: string) {\n  if (isHex(value)) {\n    return value;\n  }\n  if (isStringWholeNumber(value)) {\n    return toHexString(value);\n  }\n  return getSelectorFromName(value);\n}\n","import { TEXT_TO_FELT_MAX_LEN } from '../constants';\nimport { addHexPrefix, removeHexPrefix } from './encode';\nimport { isHex, isStringWholeNumber } from './num';\n\n/**\n * Test if string contains only ASCII characters (string can be ascii text)\n */\nexport function isASCII(str: string) {\n  // eslint-disable-next-line no-control-regex\n  return /^[\\x00-\\x7F]*$/.test(str);\n}\n\n/**\n * Test if string is a Cairo short string (string has less or equal 31 characters)\n */\nexport function isShortString(str: string) {\n  return str.length <= TEXT_TO_FELT_MAX_LEN;\n}\n\n/**\n * Test if string contains only numbers (string can be converted to decimal number)\n */\nexport function isDecimalString(str: string): boolean {\n  return /^[0-9]*$/i.test(str);\n}\n\n/**\n * Test if value is a free-from string text, and not a hex string or number string\n */\nexport function isText(val: any) {\n  return typeof val === 'string' && !isHex(val) && !isStringWholeNumber(val);\n}\n\n/**\n * Test if value is short text\n */\nexport const isShortText = (val: any) => isText(val) && isShortString(val);\n\n/**\n * Test if value is long text\n */\nexport const isLongText = (val: any) => isText(val) && !isShortString(val);\n\n/**\n * Split long text into short strings\n */\nexport function splitLongString(longStr: string): string[] {\n  const regex = RegExp(`[^]{1,${TEXT_TO_FELT_MAX_LEN}}`, 'g');\n  return longStr.match(regex) || [];\n}\n\n/**\n * Convert an ASCII string to a hexadecimal string.\n * @param str short string (ASCII string, 31 characters max)\n * @returns format: hex-string; 248 bits max\n * @example\n * ```typescript\n * const myEncodedString: string = encodeShortString(\"uri/pict/t38.jpg\");\n * // return hex string (ex.\"0x7572692f706963742f7433382e6a7067\")\n * ```\n */\nexport function encodeShortString(str: string): string {\n  if (!isASCII(str)) throw new Error(`${str} is not an ASCII string`);\n  if (!isShortString(str)) throw new Error(`${str} is too long`);\n  return addHexPrefix(str.replace(/./g, (char) => char.charCodeAt(0).toString(16)));\n}\n\n/**\n * Convert a hexadecimal or decimal string to an ASCII string.\n * @param str representing a 248 bit max number (ex. \"0x1A4F64EA56\" or \"236942575435676423\")\n * @returns format: short string; 31 characters max\n * @example\n * ```typescript\n * const myDecodedString: string = decodeShortString(\"0x7572692f706963742f7433382e6a7067\");\n * // return string (ex.\"uri/pict/t38.jpg\")\n * ```\n */\nexport function decodeShortString(str: string): string {\n  if (!isASCII(str)) throw new Error(`${str} is not an ASCII string`);\n  if (isHex(str)) {\n    return removeHexPrefix(str).replace(/.{2}/g, (hex) => String.fromCharCode(parseInt(hex, 16)));\n  }\n  if (isDecimalString(str)) {\n    return decodeShortString('0X'.concat(BigInt(str).toString(16)));\n  }\n  throw new Error(`${str} is not Hex or decimal`);\n}\n","import {\n  Abi,\n  AbiEnums,\n  AbiStructs,\n  BigNumberish,\n  ContractVersion,\n  Litteral,\n  Uint,\n  Uint256,\n} from '../../types';\nimport { isBigInt, isHex, isStringWholeNumber } from '../num';\nimport { encodeShortString, isShortString, isText } from '../shortString';\nimport { UINT_128_MAX, isUint256 } from '../uint256';\n\n// Intended for internal usage, maybe should be exported somewhere else and not exported to utils\nexport const isLen = (name: string) => /_len$/.test(name);\nexport const isTypeFelt = (type: string) => type === 'felt' || type === 'core::felt252';\nexport const isTypeArray = (type: string) =>\n  /\\*/.test(type) ||\n  type.startsWith('core::array::Array::') ||\n  type.startsWith('core::array::Span::');\nexport const isTypeTuple = (type: string) => /^\\(.*\\)$/i.test(type);\nexport const isTypeNamedTuple = (type: string) => /\\(.*\\)/i.test(type) && type.includes(':');\nexport const isTypeStruct = (type: string, structs: AbiStructs) => type in structs;\nexport const isTypeEnum = (type: string, enums: AbiEnums) => type in enums;\nexport const isTypeOption = (type: string) => type.startsWith('core::option::Option::');\nexport const isTypeResult = (type: string) => type.startsWith('core::result::Result::');\nexport const isTypeUint = (type: string) => Object.values(Uint).includes(type as Uint);\nexport const isTypeLitteral = (type: string) => Object.values(Litteral).includes(type as Litteral);\nexport const isTypeUint256 = (type: string) => type === 'core::integer::u256';\nexport const isTypeBool = (type: string) => type === 'core::bool';\nexport const isTypeContractAddress = (type: string) =>\n  type === 'core::starknet::contract_address::ContractAddress';\nexport const isTypeEthAddress = (type: string) =>\n  type === 'core::starknet::eth_address::EthAddress';\nexport const isCairo1Type = (type: string) => type.includes('::');\nexport const getArrayType = (type: string) => {\n  if (isCairo1Type(type)) {\n    return type.substring(type.indexOf('<') + 1, type.lastIndexOf('>'));\n  }\n  return type.replace('*', '');\n};\n\n/**\n * Test if an ABI comes from a Cairo 1 contract\n * @param abi representing the interface of a Cairo contract\n * @returns TRUE if it is an ABI from a Cairo1 contract\n * @example\n * ```typescript\n * const isCairo1: boolean = isCairo1Abi(myAbi: Abi);\n * ```\n */\nexport function isCairo1Abi(abi: Abi): boolean {\n  const { cairo } = getAbiContractVersion(abi);\n  if (cairo === undefined) {\n    throw Error('Unable to determine Cairo version');\n  }\n  return cairo === '1';\n}\n\n/**\n * Return ContractVersion (Abi version) based on Abi\n * or undefined for unknown version\n * @param abi\n * @returns string\n */\nexport function getAbiContractVersion(abi: Abi): ContractVersion {\n  // determine by interface for \"Cairo 1.2\"\n  if (abi.find((it) => it.type === 'interface')) {\n    return { cairo: '1', compiler: '2' };\n  }\n\n  // determine by function io types \"Cairo 1.1\" or \"Cairo 0.0\"\n  // find first function with inputs or outputs\n  const testFunction = abi.find(\n    (it) => it.type === 'function' && (it.inputs.length || it.outputs.length)\n  );\n  if (!testFunction) {\n    return { cairo: undefined, compiler: undefined };\n  }\n  const io = testFunction.inputs.length ? testFunction.inputs : testFunction.outputs;\n  if (isCairo1Type(io[0].type)) {\n    return { cairo: '1', compiler: '1' };\n  }\n  return { cairo: '0', compiler: '0' };\n}\n\n/**\n * named tuple cairo type is described as js object {}\n * struct cairo type are described as js object {}\n * array cairo type are described as js array []\n */\n\n/**\n * Create Uint256 Cairo type (helper for common struct type)\n * @example\n * ```typescript\n * uint256('892349863487563453485768723498');\n * ```\n */\nexport const uint256 = (it: BigNumberish): Uint256 => {\n  const bn = BigInt(it);\n  if (!isUint256(bn)) throw new Error('Number is too large');\n  return {\n    // eslint-disable-next-line no-bitwise\n    low: (bn & UINT_128_MAX).toString(10),\n    // eslint-disable-next-line no-bitwise\n    high: (bn >> 128n).toString(10),\n  };\n};\n\n/**\n * Create unnamed tuple Cairo type (helper same as common struct type)\n * @example\n * ```typescript\n * tuple(1, '0x101', 16);\n * ```\n */\nexport const tuple = (\n  ...args: (BigNumberish | object | boolean)[]\n): Record<number, BigNumberish | object | boolean> => ({ ...args });\n\n/**\n * Create felt Cairo type (cairo type helper)\n * @returns format: felt-string\n */\nexport function felt(it: BigNumberish): string {\n  // BN or number\n  if (isBigInt(it) || (typeof it === 'number' && Number.isInteger(it))) {\n    return it.toString();\n  }\n  // string text\n  if (isText(it)) {\n    if (!isShortString(it as string))\n      throw new Error(\n        `${it} is a long string > 31 chars, felt can store short strings, split it to array of short strings`\n      );\n    const encoded = encodeShortString(it as string);\n    return BigInt(encoded).toString();\n  }\n  // hex string\n  if (typeof it === 'string' && isHex(it)) {\n    // toBN().toString\n    return BigInt(it).toString();\n  }\n  // string number (already converted), or unhandled type\n  if (typeof it === 'string' && isStringWholeNumber(it)) {\n    return it;\n  }\n  // bool to felt\n  if (typeof it === 'boolean') {\n    return `${+it}`;\n  }\n\n  throw new Error(`${it} can't be computed by felt()`);\n}\n","/* eslint-disable no-bitwise */\nimport { BigNumberish, Uint256 } from '../types';\nimport { addHexPrefix } from './encode';\nimport { toBigInt } from './num';\n\n/** @deprecated prefer importing from 'types' over 'uint256' */\nexport type { Uint256 };\n\nexport const UINT_128_MAX = (1n << 128n) - 1n;\nexport const UINT_256_MAX = (1n << 256n) - 1n;\n\n/**\n * Convert Uint256 to bigint\n */\nexport function uint256ToBN(uint256: Uint256) {\n  return (toBigInt(uint256.high) << 128n) + toBigInt(uint256.low);\n}\n\n/**\n * Test BigNumberish is smaller or equal 2**256-1\n */\nexport function isUint256(bn: BigNumberish): boolean {\n  return toBigInt(bn) <= UINT_256_MAX;\n}\n\n/**\n * Convert BigNumberish (string | number | bigint) to Uint256 (hex)\n */\nexport function bnToUint256(bn: BigNumberish): Uint256 {\n  const bi = toBigInt(bn);\n  if (!isUint256(bi)) throw new Error('Number is too large');\n  return {\n    low: addHexPrefix((bi & UINT_128_MAX).toString(16)),\n    high: addHexPrefix((bi >> 128n).toString(16)),\n  };\n}\n","export type CairoEnumRaw = {\n  [key: string]: any;\n};\n\n/**\n * Class to handle Cairo custom Enum\n * @param enumContent object containing the variants and its content. Example :\n *  {Success: 234, Warning: undefined, Error: undefined}.\n *  Only one variant with a value, object, array.\n * @returns an instance representing a Cairo custom Enum.\n * @example ```typescript\n * const myCairoEnum = new CairoCustomEnum( {Success: undefined, Warning: \"0x7f32ea\", Error: undefined})\n * ```\n */\nexport class CairoCustomEnum {\n  /**\n   * direct readonly access to variants of the Cairo Custom Enum.\n   * @returns a value of type any\n   * @example ```typescript\n   * const successValue = myCairoEnum.variant.Success;\n   */\n  readonly variant: CairoEnumRaw;\n\n  /**\n   * @param enumContent an object with the variants as keys and the content as value. Only one content shall be defined.\n   */\n  constructor(enumContent: CairoEnumRaw) {\n    const variantsList = Object.values(enumContent);\n    if (variantsList.length === 0) {\n      throw new Error('This Enum must have a least 1 variant');\n    }\n    const nbActiveVariants = variantsList.filter(\n      (content) => typeof content !== 'undefined'\n    ).length;\n    if (nbActiveVariants !== 1) {\n      throw new Error('This Enum must have exactly one active variant');\n    }\n    this.variant = enumContent;\n  }\n\n  /**\n   *\n   * @returns the content of the valid variant of a Cairo custom Enum.\n   */\n  public unwrap(): any {\n    const variants = Object.entries(this.variant);\n    const activeVariant = variants.find((item) => typeof item[1] !== 'undefined');\n    if (typeof activeVariant === 'undefined') {\n      return undefined;\n    }\n    return activeVariant[1];\n  }\n\n  /**\n   *\n   * @returns the name of the valid variant of a Cairo custom Enum.\n   */\n  public activeVariant(): string {\n    const variants = Object.entries(this.variant);\n    const activeVariant = variants.find((item) => typeof item[1] !== 'undefined');\n    if (typeof activeVariant === 'undefined') {\n      return '';\n    }\n    return activeVariant[0];\n  }\n}\n","export enum CairoOptionVariant {\n  Some = 0,\n  None = 1,\n}\n\n/**\n * Class to handle Cairo Option\n * @param variant CairoOptionVariant.Some or CairoOptionVariant.None\n * @param someContent value of type T.\n * @returns an instance representing a Cairo Option.\n * @example ```typescript\n * const myOption = new CairoOption<BigNumberish>(CairoOptionVariant.Some, \"0x54dda8\");\n * ```\n */\nexport class CairoOption<T> {\n  readonly Some?: T;\n\n  readonly None?: boolean;\n\n  constructor(variant: CairoOptionVariant, someContent?: T) {\n    if (!(variant in CairoOptionVariant)) {\n      throw new Error('Wrong variant : should be CairoOptionVariant.Some or .None.');\n    }\n    if (variant === CairoOptionVariant.Some) {\n      if (typeof someContent === 'undefined') {\n        throw new Error(\n          'The creation of a Cairo Option with \"Some\" variant needs a content as input.'\n        );\n      }\n      this.Some = someContent;\n      this.None = undefined;\n    } else {\n      this.Some = undefined;\n      this.None = true;\n    }\n  }\n\n  /**\n   *\n   * @returns the content of the valid variant of a Cairo custom Enum.\n   *  If None, returns 'undefined'.\n   */\n  public unwrap(): T | undefined {\n    if (this.None) {\n      return undefined;\n    }\n    return this.Some;\n  }\n\n  /**\n   *\n   * @returns true if the valid variant is 'isSome'.\n   */\n  public isSome(): boolean {\n    return !(typeof this.Some === 'undefined');\n  }\n\n  /**\n   *\n   * @returns true if the valid variant is 'isNone'.\n   */\n  public isNone(): boolean {\n    return this.None === true;\n  }\n}\n","export enum CairoResultVariant {\n  Ok = 0,\n  Err = 1,\n}\n\n/**\n * Class to handle Cairo Result\n * @param variant CairoResultVariant.Ok or CairoResultVariant.Err\n * @param resultContent value of type T or U.\n * @returns an instance representing a Cairo Result.\n * @example ```typescript\n * const myOption = new CairoResult<BigNumberish, CustomError>(CairoResultVariant.Ok, \"0x54dda8\");\n * ```\n */\nexport class CairoResult<T, U> {\n  readonly Ok?: T;\n\n  readonly Err?: U;\n\n  constructor(variant: CairoResultVariant, resultContent: T | U) {\n    if (!(variant in CairoResultVariant)) {\n      throw new Error('Wrong variant : should be CairoResultVariant.Ok or .Err.');\n    }\n    if (variant === CairoResultVariant.Ok) {\n      this.Ok = resultContent as T;\n      this.Err = undefined;\n    } else {\n      this.Ok = undefined;\n      this.Err = resultContent as U;\n    }\n  }\n\n  /**\n   *\n   * @returns the content of the valid variant of a Cairo Result.\n   */\n  public unwrap(): T | U {\n    if (typeof this.Ok !== 'undefined') {\n      return this.Ok;\n    }\n    if (typeof this.Err !== 'undefined') {\n      return this.Err;\n    }\n    throw new Error('Both Result.Ok and .Err are undefined. Not authorized.');\n  }\n\n  /**\n   *\n   * @returns true if the valid variant is 'Ok'.\n   */\n  public isOk(): boolean {\n    return !(typeof this.Ok === 'undefined');\n  }\n\n  /**\n   *\n   * @returns true if the valid variant is 'isErr'.\n   */\n  public isErr(): boolean {\n    return !(typeof this.Err === 'undefined');\n  }\n}\n","import { isBigInt } from '../num';\nimport { decodeShortString } from '../shortString';\n\nconst guard = {\n  isBN: (data: any, type: any, key: any) => {\n    if (!isBigInt(data[key]))\n      throw new Error(\n        `Data and formatter mismatch on ${key}:${type[key]}, expected response data ${key}:${\n          data[key]\n        } to be BN instead it is ${typeof data[key]}`\n      );\n  },\n  unknown: (data: any, type: any, key: any) => {\n    throw new Error(`Unhandled formatter type on ${key}:${type[key]} for data ${key}:${data[key]}`);\n  },\n};\n\nexport default function formatter(data: any, type: any, sameType?: any) {\n  // match data element with type element\n  return Object.entries(data).reduce((acc, [key, value]: [any, any]) => {\n    const elType = sameType ?? type[key];\n\n    if (!(key in type) && !sameType) {\n      // no type definition for element return original element\n      acc[key] = value;\n      return acc;\n    }\n\n    if (elType === 'string') {\n      if (Array.isArray(data[key])) {\n        // long string (felt*)\n        const arrayStr = formatter(\n          data[key],\n          data[key].map((_: any) => elType)\n        );\n        acc[key] = Object.values(arrayStr).join('');\n        return acc;\n      }\n      guard.isBN(data, type, key);\n      acc[key] = decodeShortString(value);\n      return acc;\n    }\n    if (elType === 'number') {\n      guard.isBN(data, type, key);\n      acc[key] = Number(value);\n      return acc;\n    }\n    if (typeof elType === 'function') {\n      acc[key] = elType(value);\n      return acc;\n    }\n    if (Array.isArray(elType)) {\n      const arrayObj = formatter(data[key], elType, elType[0]);\n      acc[key] = Object.values(arrayObj);\n      return acc;\n    }\n    if (typeof elType === 'object') {\n      acc[key] = formatter(data[key], elType);\n      return acc;\n    }\n\n    guard.unknown(data, type, key);\n    return acc;\n  }, {} as any);\n}\n","import { Abi, FunctionAbi } from '../../../types';\nimport { isLen } from '../cairo';\nimport { AbiParserInterface } from './interface';\n\nexport class AbiParser1 implements AbiParserInterface {\n  abi: Abi;\n\n  constructor(abi: Abi) {\n    this.abi = abi;\n  }\n\n  /**\n   * abi method inputs length without '_len' inputs\n   * cairo 0 reducer\n   * @param abiMethod FunctionAbi\n   * @returns number\n   */\n  public methodInputsLength(abiMethod: FunctionAbi) {\n    return abiMethod.inputs.reduce((acc, input) => (!isLen(input.name) ? acc + 1 : acc), 0);\n  }\n\n  /**\n   * get method definition from abi\n   * @param name string\n   * @returns FunctionAbi | undefined\n   */\n  public getMethod(name: string): FunctionAbi | undefined {\n    return this.abi.find((it) => it.name === name);\n  }\n\n  /**\n   * Get Abi in legacy format\n   * @returns Abi\n   */\n  public getLegacyFormat() {\n    return this.abi;\n  }\n}\n","import { Abi, FunctionAbi } from '../../../types';\nimport { AbiParserInterface } from './interface';\n\nexport class AbiParser2 implements AbiParserInterface {\n  abi: Abi;\n\n  constructor(abi: Abi) {\n    this.abi = abi;\n  }\n\n  /**\n   * abi method inputs length\n   * @param abiMethod FunctionAbi\n   * @returns number\n   */\n  public methodInputsLength(abiMethod: FunctionAbi) {\n    return abiMethod.inputs.length;\n  }\n\n  /**\n   * get method definition from abi\n   * @param name string\n   * @returns FunctionAbi | undefined\n   */\n  public getMethod(name: string): FunctionAbi | undefined {\n    const intf = this.abi.find((it) => it.type === 'interface');\n    return intf.items.find((it: any) => it.name === name);\n  }\n\n  /**\n   * Get Abi in legacy format\n   * @returns Abi\n   */\n  public getLegacyFormat(): Abi {\n    return this.abi.flatMap((e) => {\n      if (e.type === 'interface') {\n        return e.items;\n      }\n      return e;\n    });\n  }\n}\n","import { Abi, FunctionAbi, RawArgs } from '../../../types';\nimport { isCairo1Abi } from '../cairo';\nimport { AbiParserInterface } from './interface';\nimport { AbiParser1 } from './parser-0-1.1.0';\nimport { AbiParser2 } from './parser-2.0.0';\n\nexport function createAbiParser(abi: Abi): AbiParserInterface {\n  const version = getAbiVersion(abi);\n  if (version === 0 || version === 1) {\n    return new AbiParser1(abi);\n  }\n  if (version === 2) {\n    return new AbiParser2(abi);\n  }\n  throw Error(`Unsupported ABI version ${version}`);\n}\n\nexport function getAbiVersion(abi: Abi) {\n  if (abi.find((it) => it.type === 'interface')) return 2;\n  if (isCairo1Abi(abi)) return 1;\n  return 0;\n}\n\nexport function isNoConstructorValid(\n  method: string,\n  argsCalldata: RawArgs,\n  abiMethod?: FunctionAbi\n) {\n  // No constructor in abi and validly empty args\n  return method === 'constructor' && !abiMethod && !argsCalldata.length;\n}\n","/* eslint-disable no-plusplus */\nimport { isCairo1Type, isTypeNamedTuple } from './cairo';\n\nfunction parseNamedTuple(namedTuple: string): any {\n  const name = namedTuple.substring(0, namedTuple.indexOf(':'));\n  const type = namedTuple.substring(name.length + ':'.length);\n  return { name, type };\n}\n\nfunction parseSubTuple(s: string) {\n  if (!s.includes('(')) return { subTuple: [], result: s };\n  const subTuple: string[] = [];\n  let result = '';\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === '(') {\n      let counter = 1;\n      const lBracket = i;\n      i++;\n      while (counter) {\n        if (s[i] === ')') counter--;\n        if (s[i] === '(') counter++;\n        i++;\n      }\n      subTuple.push(s.substring(lBracket, i));\n      result += ' ';\n      i--;\n    } else {\n      result += s[i];\n    }\n    i++;\n  }\n\n  return {\n    subTuple,\n    result,\n  };\n}\n\nfunction extractCairo0Tuple(type: string) {\n  const cleanType = type.replace(/\\s/g, '').slice(1, -1); // remove first lvl () and spaces\n\n  // Decompose subTuple\n  const { subTuple, result } = parseSubTuple(cleanType);\n\n  // Recompose subTuple\n  let recomposed = result.split(',').map((it) => {\n    return subTuple.length ? it.replace(' ', subTuple.shift() as string) : it;\n  });\n\n  // Parse named tuple\n  if (isTypeNamedTuple(type)) {\n    recomposed = recomposed.reduce((acc, it) => {\n      return acc.concat(parseNamedTuple(it));\n    }, []);\n  }\n\n  return recomposed;\n}\n\nfunction extractCairo1Tuple(type: string) {\n  // un-named tuples support\n  const cleanType = type.replace(/\\s/g, '').slice(1, -1); // remove first lvl () and spaces\n  const { subTuple, result } = parseSubTuple(cleanType);\n  const recomposed = result.split(',').map((it) => {\n    return subTuple.length ? it.replace(' ', subTuple.shift() as string) : it;\n  });\n  return recomposed;\n}\n\n/**\n * Convert tuple string definition into object like definition\n * @param type tuple string definition\n * @returns object like tuple\n */\nexport default function extractTupleMemberTypes(type: string): (string | object)[] {\n  if (isCairo1Type(type)) {\n    return extractCairo1Tuple(type);\n  }\n  return extractCairo0Tuple(type);\n}\n","import { AbiEntry, AbiEnums, AbiStructs, CairoEnum, RawArgsObject } from '../../types';\nimport {\n  getArrayType,\n  isCairo1Type,\n  isLen,\n  isTypeArray,\n  isTypeEnum,\n  isTypeEthAddress,\n  isTypeOption,\n  isTypeResult,\n  isTypeStruct,\n  isTypeTuple,\n  isTypeUint256,\n} from './cairo';\nimport {\n  CairoCustomEnum,\n  CairoOption,\n  CairoOptionVariant,\n  CairoResult,\n  CairoResultVariant,\n} from './enum';\nimport extractTupleMemberTypes from './tuple';\n\nfunction errorU256(key: string) {\n  return Error(\n    `Your object includes the property : ${key}, containing an Uint256 object without the 'low' and 'high' keys.`\n  );\n}\nexport default function orderPropsByAbi(\n  unorderedObject: RawArgsObject,\n  abiOfObject: AbiEntry[],\n  structs: AbiStructs,\n  enums: AbiEnums\n): object {\n  const orderInput = (unorderedItem: any, abiType: string): any => {\n    if (isTypeArray(abiType)) {\n      return orderArray(unorderedItem, abiType);\n    }\n    if (isTypeEnum(abiType, enums)) {\n      const abiObj = enums[abiType];\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      return orderEnum(unorderedItem, abiObj);\n    }\n    if (isTypeTuple(abiType)) {\n      return orderTuple(unorderedItem, abiType);\n    }\n    if (isTypeEthAddress(abiType)) {\n      return unorderedItem;\n    }\n    if (isTypeUint256(abiType)) {\n      const u256 = unorderedItem;\n      if (typeof u256 !== 'object') {\n        // BigNumberish --> just copy\n        return u256;\n      }\n      if (!('low' in u256 && 'high' in u256)) {\n        throw errorU256(abiType);\n      }\n      return { low: u256.low, high: u256.high };\n    }\n    if (isTypeStruct(abiType, structs)) {\n      const abiOfStruct = structs[abiType].members;\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      return orderStruct(unorderedItem, abiOfStruct);\n    }\n    // litterals\n    return unorderedItem;\n  };\n\n  const orderStruct = (unorderedObject2: RawArgsObject, abiObject: AbiEntry[]): object => {\n    const orderedObject2 = abiObject.reduce((orderedObject, abiParam) => {\n      const setProperty = (value?: any) =>\n        Object.defineProperty(orderedObject, abiParam.name, {\n          enumerable: true,\n          value: value ?? unorderedObject2[abiParam.name],\n        });\n\n      if (unorderedObject2[abiParam.name] === 'undefined') {\n        if (isCairo1Type(abiParam.type) || !isLen(abiParam.name)) {\n          throw Error(`Your object needs a property with key : ${abiParam.name} .`);\n        }\n      }\n      setProperty(orderInput(unorderedObject2[abiParam.name], abiParam.type));\n      return orderedObject;\n    }, {});\n    return orderedObject2;\n  };\n\n  function orderArray(myArray: Array<any> | string, abiParam: string): Array<any> | string {\n    const typeInArray = getArrayType(abiParam);\n    if (typeof myArray === 'string') {\n      return myArray; // longstring\n    }\n    return myArray.map((myElem) => orderInput(myElem, typeInArray));\n  }\n\n  function orderTuple(unorderedObject2: RawArgsObject, abiParam: string): object {\n    const typeList = extractTupleMemberTypes(abiParam);\n    const orderedObject2 = typeList.reduce((orderedObject: object, abiTypeCairoX: any, index) => {\n      const myObjKeys: string[] = Object.keys(unorderedObject2);\n      const setProperty = (value?: any) =>\n        Object.defineProperty(orderedObject, index.toString(), {\n          enumerable: true,\n          value: value ?? unorderedObject2[myObjKeys[index]],\n        });\n      const abiType: string = abiTypeCairoX?.type ? abiTypeCairoX.type : abiTypeCairoX; // Named tuple, or tuple\n      setProperty(orderInput(unorderedObject2[myObjKeys[index]], abiType));\n      return orderedObject;\n    }, {});\n    return orderedObject2;\n  }\n\n  const orderEnum = (unorderedObject2: CairoEnum, abiObject: AbiEntry): CairoEnum => {\n    if (isTypeResult(abiObject.name)) {\n      const unorderedResult = unorderedObject2 as CairoResult<any, any>;\n      const resultOkType: string = abiObject.name.substring(\n        abiObject.name.indexOf('<') + 1,\n        abiObject.name.lastIndexOf(',')\n      );\n      const resultErrType: string = abiObject.name.substring(\n        abiObject.name.indexOf(',') + 1,\n        abiObject.name.lastIndexOf('>')\n      );\n      if (unorderedResult.isOk()) {\n        return new CairoResult<any, any>(\n          CairoResultVariant.Ok,\n          orderInput(unorderedObject2.unwrap(), resultOkType)\n        );\n      }\n      return new CairoResult<any, any>(\n        CairoResultVariant.Err,\n        orderInput(unorderedObject2.unwrap(), resultErrType)\n      );\n    }\n    if (isTypeOption(abiObject.name)) {\n      const unorderedOption = unorderedObject2 as CairoOption<any>;\n      const resultSomeType: string = abiObject.name.substring(\n        abiObject.name.indexOf('<') + 1,\n        abiObject.name.lastIndexOf('>')\n      );\n      if (unorderedOption.isSome()) {\n        return new CairoOption<any>(\n          CairoOptionVariant.Some,\n          orderInput(unorderedOption.unwrap(), resultSomeType)\n        );\n      }\n      // none(())\n      return new CairoOption<any>(CairoOptionVariant.None, {});\n    }\n    // custom Enum\n    const unorderedCustomEnum = unorderedObject2 as CairoCustomEnum;\n    const variants = Object.entries(unorderedCustomEnum.variant);\n    const newEntries = variants.map((variant) => {\n      if (typeof variant[1] === 'undefined') {\n        return variant;\n      }\n      const variantType: string = abiObject.type.substring(\n        abiObject.type.lastIndexOf('<') + 1,\n        abiObject.type.lastIndexOf('>')\n      );\n      if (variantType === '()') {\n        return variant;\n      }\n      return [variant[0], orderInput(unorderedCustomEnum.unwrap(), variantType)];\n    });\n    return new CairoCustomEnum(Object.fromEntries(newEntries));\n  };\n\n  // Order Call Parameters\n  const finalOrderedObject = abiOfObject.reduce((orderedObject, abiParam) => {\n    const setProperty = (value: any) =>\n      Object.defineProperty(orderedObject, abiParam.name, {\n        enumerable: true,\n        value,\n      });\n    if (isLen(abiParam.name) && !isCairo1Type(abiParam.type)) {\n      return orderedObject;\n    }\n    setProperty(orderInput(unorderedObject[abiParam.name], abiParam.type));\n    return orderedObject;\n  }, {});\n  return finalOrderedObject;\n}\n","import {\n  AbiEntry,\n  AbiEnums,\n  AbiStructs,\n  BigNumberish,\n  CairoEnum,\n  ParsedStruct,\n  Tupled,\n  Uint256,\n} from '../../types';\nimport { isText, splitLongString } from '../shortString';\nimport {\n  felt,\n  getArrayType,\n  isTypeArray,\n  isTypeEnum,\n  isTypeOption,\n  isTypeResult,\n  isTypeStruct,\n  isTypeTuple,\n  isTypeUint256,\n  uint256,\n} from './cairo';\nimport {\n  CairoCustomEnum,\n  CairoOption,\n  CairoOptionVariant,\n  CairoResult,\n  CairoResultVariant,\n} from './enum';\nimport extractTupleMemberTypes from './tuple';\n\n/**\n * parse base types\n * @param type type from abi\n * @param val value provided\n * @returns string | string[]\n */\nfunction parseBaseTypes(type: string, val: BigNumberish) {\n  switch (true) {\n    case isTypeUint256(type):\n      // eslint-disable-next-line no-case-declarations\n      const el_uint256 = uint256(val);\n      return [felt(el_uint256.low), felt(el_uint256.high)];\n    default:\n      return felt(val);\n  }\n}\n\n/**\n * Parse tuple type string to array of known objects\n * @param element request element\n * @param typeStr tuple type string\n * @returns Tupled[]\n */\nfunction parseTuple(element: object, typeStr: string): Tupled[] {\n  const memberTypes = extractTupleMemberTypes(typeStr);\n  const elements = Object.values(element);\n\n  if (elements.length !== memberTypes.length) {\n    throw Error(\n      `ParseTuple: provided and expected abi tuple size do not match.\n      provided: ${elements} \n      expected: ${memberTypes}`\n    );\n  }\n\n  return memberTypes.map((it: any, dx: number) => {\n    return {\n      element: elements[dx],\n      type: it.type ?? it,\n    };\n  });\n}\n\nfunction parseUint256(element: object | BigNumberish) {\n  if (typeof element === 'object') {\n    const { low, high } = element as Uint256;\n    return [felt(low as BigNumberish), felt(high as BigNumberish)];\n  }\n  const el_uint256 = uint256(element);\n  return [felt(el_uint256.low), felt(el_uint256.high)];\n}\n\n/**\n * Deep parse of the object that has been passed to the method\n *\n * @param element - element that needs to be parsed\n * @param type  - name of the method\n * @param structs - structs from abi\n * @param enums - enums from abi\n * @return {string | string[]} - parsed arguments in format that contract is expecting\n */\nfunction parseCalldataValue(\n  element:\n    | ParsedStruct\n    | BigNumberish\n    | BigNumberish[]\n    | CairoOption<any>\n    | CairoResult<any, any>\n    | CairoEnum,\n  type: string,\n  structs: AbiStructs,\n  enums: AbiEnums\n): string | string[] {\n  if (element === undefined) {\n    throw Error(`Missing parameter for type ${type}`);\n  }\n\n  // value is Array\n  if (Array.isArray(element)) {\n    const result: string[] = [];\n    result.push(felt(element.length)); // Add length to array\n    const arrayType = getArrayType(type);\n\n    return element.reduce((acc, it) => {\n      return acc.concat(parseCalldataValue(it, arrayType, structs, enums));\n    }, result);\n  }\n\n  // checking if the passed element is struct\n  if (structs[type] && structs[type].members.length) {\n    if (isTypeUint256(type)) {\n      return parseUint256(element);\n    }\n\n    if (type === 'core::starknet::eth_address::EthAddress')\n      return parseBaseTypes(type, element as BigNumberish);\n\n    const { members } = structs[type];\n    const subElement = element as any;\n\n    return members.reduce((acc, it: AbiEntry) => {\n      return acc.concat(parseCalldataValue(subElement[it.name], it.type, structs, enums));\n    }, [] as string[]);\n  }\n  // check if abi element is tuple\n  if (isTypeTuple(type)) {\n    const tupled = parseTuple(element as object, type);\n\n    return tupled.reduce((acc, it: Tupled) => {\n      const parsedData = parseCalldataValue(it.element, it.type, structs, enums);\n      return acc.concat(parsedData);\n    }, [] as string[]);\n  }\n  // check if u256 C1v0\n  if (isTypeUint256(type)) {\n    return parseUint256(element);\n  }\n  // check if Enum\n  if (isTypeEnum(type, enums)) {\n    const { variants } = enums[type];\n    // Option Enum\n    if (isTypeOption(type)) {\n      const myOption = element as CairoOption<any>;\n      if (myOption.isSome()) {\n        const listTypeVariant = variants.find((variant) => variant.name === 'Some');\n        if (typeof listTypeVariant === 'undefined') {\n          throw Error(`Error in abi : Option has no 'Some' variant.`);\n        }\n        const typeVariantSome = listTypeVariant.type;\n        if (typeVariantSome === '()') {\n          return CairoOptionVariant.Some.toString();\n        }\n        const parsedParameter = parseCalldataValue(\n          myOption.unwrap(),\n          typeVariantSome,\n          structs,\n          enums\n        );\n        if (Array.isArray(parsedParameter)) {\n          return [CairoOptionVariant.Some.toString(), ...parsedParameter];\n        }\n        return [CairoOptionVariant.Some.toString(), parsedParameter];\n      }\n      return CairoOptionVariant.None.toString();\n    }\n    // Result Enum\n    if (isTypeResult(type)) {\n      const myResult = element as CairoResult<any, any>;\n      if (myResult.isOk()) {\n        const listTypeVariant = variants.find((variant) => variant.name === 'Ok');\n        if (typeof listTypeVariant === 'undefined') {\n          throw Error(`Error in abi : Result has no 'Ok' variant.`);\n        }\n        const typeVariantOk = listTypeVariant.type;\n        if (typeVariantOk === '()') {\n          return CairoResultVariant.Ok.toString();\n        }\n        const parsedParameter = parseCalldataValue(\n          myResult.unwrap(),\n          typeVariantOk,\n          structs,\n          enums\n        );\n        if (Array.isArray(parsedParameter)) {\n          return [CairoResultVariant.Ok.toString(), ...parsedParameter];\n        }\n        return [CairoResultVariant.Ok.toString(), parsedParameter];\n      }\n      // is Result::Err\n      const listTypeVariant = variants.find((variant) => variant.name === 'Err');\n      if (typeof listTypeVariant === 'undefined') {\n        throw Error(`Error in abi : Result has no 'Err' variant.`);\n      }\n      const typeVariantErr = listTypeVariant.type;\n      if (typeVariantErr === '()') {\n        return CairoResultVariant.Err.toString();\n      }\n      const parsedParameter = parseCalldataValue(myResult.unwrap(), typeVariantErr, structs, enums);\n      if (Array.isArray(parsedParameter)) {\n        return [CairoResultVariant.Err.toString(), ...parsedParameter];\n      }\n      return [CairoResultVariant.Err.toString(), parsedParameter];\n    }\n    // Custom Enum\n    const myEnum = element as CairoCustomEnum;\n    const activeVariant: string = myEnum.activeVariant();\n    const listTypeVariant = variants.find((variant) => variant.name === activeVariant);\n    if (typeof listTypeVariant === 'undefined') {\n      throw Error(`Not find in abi : Enum has no '${activeVariant}' variant.`);\n    }\n    const typeActiveVariant = listTypeVariant.type;\n    const numActiveVariant = variants.findIndex((variant) => variant.name === activeVariant); // can not fail due to check of listTypeVariant\n    if (typeActiveVariant === '()') {\n      return numActiveVariant.toString();\n    }\n    const parsedParameter = parseCalldataValue(myEnum.unwrap(), typeActiveVariant, structs, enums);\n    if (Array.isArray(parsedParameter)) {\n      return [numActiveVariant.toString(), ...parsedParameter];\n    }\n    return [numActiveVariant.toString(), parsedParameter];\n  }\n\n  if (typeof element === 'object') {\n    throw Error(`Parameter ${element} do not align with abi parameter ${type}`);\n  }\n  return parseBaseTypes(type, element);\n}\n\n/**\n * Parse one field of the calldata by using input field from the abi for that method\n *\n * @param argsIterator - Iterator<any> for value of the field\n * @param input  - input(field) information from the abi that will be used to parse the data\n * @param structs - structs from abi\n * @param enums - enums from abi\n * @return {string | string[]} - parsed arguments in format that contract is expecting\n */\nexport function parseCalldataField(\n  argsIterator: Iterator<any>,\n  input: AbiEntry,\n  structs: AbiStructs,\n  enums: AbiEnums\n): string | string[] {\n  const { name, type } = input;\n  let { value } = argsIterator.next();\n\n  switch (true) {\n    // Array\n    case isTypeArray(type):\n      if (!Array.isArray(value) && !isText(value)) {\n        throw Error(`ABI expected parameter ${name} to be array or long string, got ${value}`);\n      }\n      if (typeof value === 'string') {\n        // long string match cairo felt*\n        value = splitLongString(value);\n      }\n      return parseCalldataValue(value, input.type, structs, enums);\n\n    case type === 'core::starknet::eth_address::EthAddress':\n      return parseBaseTypes(type, value);\n    // Struct or Tuple\n    case isTypeStruct(type, structs) || isTypeTuple(type) || isTypeUint256(type):\n      return parseCalldataValue(value as ParsedStruct | BigNumberish[], type, structs, enums);\n\n    // Enums\n    case isTypeEnum(type, enums):\n      return parseCalldataValue(\n        value as CairoOption<any> | CairoResult<any, any> | CairoEnum,\n        type,\n        structs,\n        enums\n      );\n\n    // Felt or unhandled\n    default:\n      return parseBaseTypes(type, value);\n  }\n}\n","/* eslint-disable no-case-declarations */\nimport {\n  AbiEntry,\n  AbiEnums,\n  AbiStructs,\n  Args,\n  BigNumberish,\n  CairoEnum,\n  EventEntry,\n  ParsedStruct,\n} from '../../types';\nimport { uint256ToBN } from '../uint256';\nimport {\n  getArrayType,\n  isCairo1Type,\n  isLen,\n  isTypeArray,\n  isTypeBool,\n  isTypeEnum,\n  isTypeTuple,\n  isTypeUint256,\n} from './cairo';\nimport {\n  CairoCustomEnum,\n  CairoEnumRaw,\n  CairoOption,\n  CairoOptionVariant,\n  CairoResult,\n  CairoResultVariant,\n} from './enum';\nimport extractTupleMemberTypes from './tuple';\n\n/**\n * Parse base types\n * @param type type of element\n * @param it iterator\n * @returns bigint | boolean\n */\nfunction parseBaseTypes(type: string, it: Iterator<string>) {\n  let temp;\n  switch (true) {\n    case isTypeBool(type):\n      temp = it.next().value;\n      return Boolean(BigInt(temp));\n    case isTypeUint256(type):\n      const low = it.next().value;\n      const high = it.next().value;\n      return uint256ToBN({ low, high });\n    case type === 'core::starknet::eth_address::EthAddress':\n      temp = it.next().value;\n      return BigInt(temp);\n    default:\n      temp = it.next().value;\n      return BigInt(temp);\n  }\n}\n\n/**\n * Parse of the response elements that are converted to Object (Struct) by using the abi\n *\n * @param responseIterator - iterator of the response\n * @param element - element of the field {name: string, type: string}\n * @param structs - structs from abi\n * @return {any} - parsed arguments in format that contract is expecting\n */\nfunction parseResponseValue(\n  responseIterator: Iterator<string>,\n  element: { name: string; type: string },\n  structs?: AbiStructs,\n  enums?: AbiEnums\n): BigNumberish | ParsedStruct | boolean | any[] | CairoEnum {\n  if (element.type === '()') {\n    return {};\n  }\n  // type uint256 struct (c1v2)\n  if (isTypeUint256(element.type)) {\n    const low = responseIterator.next().value;\n    const high = responseIterator.next().value;\n    return uint256ToBN({ low, high });\n  }\n\n  // type c1 array\n  if (isTypeArray(element.type)) {\n    // eslint-disable-next-line no-case-declarations\n    const parsedDataArr: (BigNumberish | ParsedStruct | boolean | any[] | CairoEnum)[] = [];\n    const el: AbiEntry = { name: '', type: getArrayType(element.type) };\n    const len = BigInt(responseIterator.next().value); // get length\n    while (parsedDataArr.length < len) {\n      parsedDataArr.push(parseResponseValue(responseIterator, el, structs, enums));\n    }\n    return parsedDataArr;\n  }\n\n  // type struct\n  if (structs && element.type in structs && structs[element.type]) {\n    if (element.type === 'core::starknet::eth_address::EthAddress') {\n      return parseBaseTypes(element.type, responseIterator);\n    }\n    return structs[element.type].members.reduce((acc, el) => {\n      acc[el.name] = parseResponseValue(responseIterator, el, structs, enums);\n      return acc;\n    }, {} as any);\n  }\n\n  // type Enum (only CustomEnum)\n  if (enums && element.type in enums && enums[element.type]) {\n    const variantNum: number = Number(responseIterator.next().value); // get variant number\n    const rawEnum = enums[element.type].variants.reduce((acc, variant, num) => {\n      if (num === variantNum) {\n        acc[variant.name] = parseResponseValue(\n          responseIterator,\n          { name: '', type: variant.type },\n          structs,\n          enums\n        );\n        return acc;\n      }\n      acc[variant.name] = undefined;\n      return acc;\n    }, {} as CairoEnumRaw);\n    // Option\n    if (element.type.startsWith('core::option::Option')) {\n      const content = variantNum === CairoOptionVariant.Some ? rawEnum.Some : undefined;\n      return new CairoOption<Object>(variantNum, content);\n    }\n    // Result\n    if (element.type.startsWith('core::result::Result')) {\n      let content: Object;\n      if (variantNum === CairoResultVariant.Ok) {\n        content = rawEnum.Ok;\n      } else {\n        content = rawEnum.Err;\n      }\n      return new CairoResult<Object, Object>(variantNum, content);\n    }\n    // Cairo custom Enum\n    const customEnum = new CairoCustomEnum(rawEnum);\n    return customEnum;\n  }\n\n  // type tuple\n  if (isTypeTuple(element.type)) {\n    const memberTypes = extractTupleMemberTypes(element.type);\n    return memberTypes.reduce((acc, it: any, idx) => {\n      const name = it?.name ? it.name : idx;\n      const type = it?.type ? it.type : it;\n      const el = { name, type };\n      acc[name] = parseResponseValue(responseIterator, el, structs, enums);\n      return acc;\n    }, {} as any);\n  }\n\n  // type c1 array\n  if (isTypeArray(element.type)) {\n    // eslint-disable-next-line no-case-declarations\n    const parsedDataArr: (BigNumberish | ParsedStruct | boolean | any[] | CairoEnum)[] = [];\n    const el = { name: '', type: getArrayType(element.type) };\n    const len = BigInt(responseIterator.next().value); // get length\n    while (parsedDataArr.length < len) {\n      parsedDataArr.push(parseResponseValue(responseIterator, el, structs, enums));\n    }\n    return parsedDataArr;\n  }\n\n  // base type\n  return parseBaseTypes(element.type, responseIterator);\n}\n\n/**\n * Parse elements of the response and structuring them into one field by using output property from the abi for that method\n *\n * @param responseIterator - iterator of the response\n * @param output - output(field) information from the abi that will be used to parse the data\n * @param structs - structs from abi\n * @param parsedResult\n * @return - parsed response corresponding to the abi structure of the field\n */\nexport default function responseParser(\n  responseIterator: Iterator<string>,\n  output: AbiEntry | EventEntry,\n  structs?: AbiStructs,\n  enums?: AbiEnums,\n  parsedResult?: Args | ParsedStruct\n): any {\n  const { name, type } = output;\n  let temp;\n\n  switch (true) {\n    case isLen(name):\n      temp = responseIterator.next().value;\n      return BigInt(temp);\n\n    case (structs && type in structs) || isTypeTuple(type):\n      return parseResponseValue(responseIterator, output, structs, enums);\n\n    case enums && isTypeEnum(type, enums):\n      return parseResponseValue(responseIterator, output, structs, enums);\n\n    case isTypeArray(type):\n      // C1 Array\n      if (isCairo1Type(type)) {\n        return parseResponseValue(responseIterator, output, structs, enums);\n      }\n      // C0 Array\n      // eslint-disable-next-line no-case-declarations\n      const parsedDataArr: (BigNumberish | ParsedStruct | boolean | any[] | CairoEnum)[] = [];\n      if (parsedResult && parsedResult[`${name}_len`]) {\n        const arrLen = parsedResult[`${name}_len`] as number;\n        while (parsedDataArr.length < arrLen) {\n          parsedDataArr.push(\n            parseResponseValue(\n              responseIterator,\n              { name, type: output.type.replace('*', '') },\n              structs,\n              enums\n            )\n          );\n        }\n      }\n      return parsedDataArr;\n\n    default:\n      return parseBaseTypes(type, responseIterator);\n  }\n}\n","/**\n * Validate cairo contract method arguments\n * Flow: Determine type from abi and than validate against parameter\n */\nimport {\n  AbiEntry,\n  AbiEnums,\n  AbiStructs,\n  BigNumberish,\n  FunctionAbi,\n  Litteral,\n  Uint,\n} from '../../types';\nimport assert from '../assert';\nimport { isHex, toBigInt } from '../num';\nimport { isLongText } from '../shortString';\nimport { uint256ToBN } from '../uint256';\nimport {\n  getArrayType,\n  isLen,\n  isTypeArray,\n  isTypeBool,\n  isTypeEnum,\n  isTypeFelt,\n  isTypeLitteral,\n  isTypeOption,\n  isTypeResult,\n  isTypeStruct,\n  isTypeTuple,\n  isTypeUint,\n} from './cairo';\n\nconst validateFelt = (parameter: any, input: AbiEntry) => {\n  assert(\n    typeof parameter === 'string' || typeof parameter === 'number' || typeof parameter === 'bigint',\n    `Validate: arg ${input.name} should be a felt typed as (String, Number or BigInt)`\n  );\n  if (typeof parameter === 'string' && !isHex(parameter)) return; // shortstring\n  const param = BigInt(parameter.toString(10));\n  assert(\n    // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1266\n    param >= 0n && param <= 2n ** 252n - 1n,\n    `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`\n  );\n};\n\nconst validateUint = (parameter: any, input: AbiEntry) => {\n  if (typeof parameter === 'number') {\n    assert(\n      parameter <= Number.MAX_SAFE_INTEGER,\n      `Validation: Parameter is to large to be typed as Number use (BigInt or String)`\n    );\n  }\n  assert(\n    typeof parameter === 'string' ||\n      typeof parameter === 'number' ||\n      typeof parameter === 'bigint' ||\n      (typeof parameter === 'object' && 'low' in parameter && 'high' in parameter),\n    `Validate: arg ${input.name} of cairo type ${\n      input.type\n    } should be type (String, Number or BigInt), but is ${typeof parameter} ${parameter}.`\n  );\n  const param = typeof parameter === 'object' ? uint256ToBN(parameter) : toBigInt(parameter);\n\n  switch (input.type) {\n    case Uint.u8:\n      assert(\n        param >= 0n && param <= 255n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0 - 255]`\n      );\n      break;\n\n    case Uint.u16:\n      assert(\n        param >= 0n && param <= 65535n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 65535]`\n      );\n      break;\n\n    case Uint.u32:\n      assert(\n        param >= 0n && param <= 4294967295n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 4294967295]`\n      );\n      break;\n\n    case Uint.u64:\n      assert(\n        param >= 0n && param <= 2n ** 64n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^64-1]`\n      );\n      break;\n\n    case Uint.u128:\n      assert(\n        param >= 0n && param <= 2n ** 128n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^128-1]`\n      );\n      break;\n\n    case Uint.u256:\n      assert(\n        param >= 0n && param <= 2n ** 256n - 1n,\n        `Validate: arg ${input.name} is ${input.type} 0 - 2^256-1`\n      );\n      break;\n\n    case Litteral.ClassHash:\n      assert(\n        // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1670\n        param >= 0n && param <= 2n ** 252n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`\n      );\n      break;\n\n    case Litteral.ContractAddress:\n      assert(\n        // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1245\n        param >= 0n && param <= 2n ** 252n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`\n      );\n      break;\n    default:\n      break;\n  }\n};\n\nconst validateBool = (parameter: any, input: AbiEntry) => {\n  assert(\n    typeof parameter === 'boolean',\n    `Validate: arg ${input.name} of cairo type ${input.type} should be type (Boolean)`\n  );\n};\n\nconst validateStruct = (parameter: any, input: AbiEntry, structs: AbiStructs) => {\n  // c1v2 uint256 in struct\n  if (input.type === Uint.u256) {\n    validateUint(parameter, input);\n    return;\n  }\n\n  if (input.type === 'core::starknet::eth_address::EthAddress') {\n    assert(\n      typeof parameter !== 'object',\n      `EthAdress type is waiting a BigNumberish. Got ${parameter}`\n    );\n    const param = BigInt(parameter.toString(10));\n    assert(\n      // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1259\n      param >= 0n && param <= 2n ** 160n - 1n,\n      `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^160-1]`\n    );\n    return;\n  }\n\n  assert(\n    typeof parameter === 'object' && !Array.isArray(parameter),\n    `Validate: arg ${input.name} is cairo type struct (${input.type}), and should be defined as js object (not array)`\n  );\n\n  // shallow struct validation, only first depth level\n  structs[input.type].members.forEach(({ name }) => {\n    assert(\n      Object.keys(parameter).includes(name),\n      `Validate: arg ${input.name} should have a property ${name}`\n    );\n  });\n};\n\nconst validateEnum = (parameter: any, input: AbiEntry) => {\n  assert(\n    typeof parameter === 'object' && !Array.isArray(parameter),\n    `Validate: arg ${input.name} is cairo type Enum (${input.type}), and should be defined as js object (not array)`\n  );\n  const methodsKeys = Object.getOwnPropertyNames(Object.getPrototypeOf(parameter));\n  const keys = [...Object.getOwnPropertyNames(parameter), ...methodsKeys];\n  if (isTypeOption(input.type) && keys.includes('isSome') && keys.includes('isNone')) {\n    return; // Option Enum\n  }\n  if (isTypeResult(input.type) && keys.includes('isOk') && keys.includes('isErr')) {\n    return; // Result Enum\n  }\n  if (keys.includes('variant') && keys.includes('activeVariant')) {\n    return; // Custom Enum\n  }\n  throw new Error(\n    `Validate Enum: argument ${input.name}, type ${input.type}, value received ${parameter}, is not an Enum.`\n  );\n};\n\nconst validateTuple = (parameter: any, input: AbiEntry) => {\n  assert(\n    typeof parameter === 'object' && !Array.isArray(parameter),\n    `Validate: arg ${input.name} should be a tuple (defined as object)`\n  );\n  // todo: skip tuple structural validation for now\n};\n\nconst validateArray = (parameter: any, input: AbiEntry, structs: AbiStructs, enums: AbiEnums) => {\n  const baseType = getArrayType(input.type);\n\n  // Long text (special case when parameter is not an array but long text)\n  // console.log(\n  //   'validate array = ',\n  //   isTypeFelt(baseType),\n  //   isLongText(parameter),\n  //   baseType,\n  //   parameter\n  // );\n  if (isTypeFelt(baseType) && isLongText(parameter)) {\n    // console.log('long text.');\n    return;\n  }\n\n  assert(Array.isArray(parameter), `Validate: arg ${input.name} should be an Array`);\n\n  switch (true) {\n    case isTypeFelt(baseType):\n      parameter.forEach((param: BigNumberish) => validateFelt(param, input));\n      break;\n    case isTypeTuple(baseType):\n      parameter.forEach((it: any) => validateTuple(it, { name: input.name, type: baseType }));\n      break;\n\n    case isTypeArray(baseType):\n      parameter.forEach((param: BigNumberish) =>\n        validateArray(param, { name: '', type: baseType }, structs, enums)\n      );\n      break;\n    case isTypeStruct(baseType, structs):\n      parameter.forEach((it: any) =>\n        validateStruct(it, { name: input.name, type: baseType }, structs)\n      );\n      break;\n    case isTypeEnum(baseType, enums):\n      parameter.forEach((it: any) => validateEnum(it, { name: input.name, type: baseType }));\n      break;\n    case isTypeUint(baseType) || isTypeLitteral(baseType):\n      parameter.forEach((param: BigNumberish) => validateUint(param, input));\n      break;\n    case isTypeBool(baseType):\n      parameter.forEach((param: BigNumberish) => validateBool(param, input));\n      break;\n    default:\n      throw new Error(\n        `Validate Unhandled: argument ${input.name}, type ${input.type}, value ${parameter}`\n      );\n  }\n};\n\nexport default function validateFields(\n  abiMethod: FunctionAbi,\n  args: Array<any>,\n  structs: AbiStructs,\n  enums: AbiEnums\n) {\n  abiMethod.inputs.reduce((acc, input) => {\n    const parameter = args[acc];\n\n    switch (true) {\n      case isLen(input.name):\n        return acc;\n      case isTypeFelt(input.type):\n        validateFelt(parameter, input);\n        break;\n      case isTypeUint(input.type) || isTypeLitteral(input.type):\n        validateUint(parameter, input);\n        break;\n      case isTypeBool(input.type):\n        validateBool(parameter, input);\n        break;\n      case isTypeArray(input.type):\n        validateArray(parameter, input, structs, enums);\n        break;\n      case isTypeStruct(input.type, structs):\n        validateStruct(parameter, input, structs);\n        break;\n      case isTypeEnum(input.type, enums):\n        validateEnum(parameter, input);\n        break;\n      case isTypeTuple(input.type):\n        validateTuple(parameter, input);\n        break;\n      default:\n        throw new Error(\n          `Validate Unhandled: argument ${input.name}, type ${input.type}, value ${parameter}`\n        );\n    }\n\n    return acc + 1;\n  }, 0);\n}\n","/* eslint-disable no-plusplus */\nimport {\n  Abi,\n  AbiEnums,\n  AbiStructs,\n  Args,\n  ArgsOrCalldata,\n  Calldata,\n  FunctionAbi,\n  HexCalldata,\n  RawArgs,\n  RawArgsArray,\n  Result,\n  ValidateType,\n} from '../../types';\nimport assert from '../assert';\nimport { isBigInt, toHex } from '../num';\nimport { getSelectorFromName } from '../selector';\nimport { isLongText, splitLongString } from '../shortString';\nimport { felt, isCairo1Type, isLen } from './cairo';\nimport {\n  CairoCustomEnum,\n  CairoOption,\n  CairoOptionVariant,\n  CairoResult,\n  CairoResultVariant,\n} from './enum';\nimport formatter from './formatter';\nimport { createAbiParser, isNoConstructorValid } from './parser';\nimport { AbiParserInterface } from './parser/interface';\nimport orderPropsByAbi from './propertyOrder';\nimport { parseCalldataField } from './requestParser';\nimport responseParser from './responseParser';\nimport validateFields from './validate';\n\nexport * as cairo from './cairo';\n\nexport class CallData {\n  abi: Abi;\n\n  parser: AbiParserInterface;\n\n  protected readonly structs: AbiStructs;\n\n  protected readonly enums: AbiEnums;\n\n  constructor(abi: Abi) {\n    this.structs = CallData.getAbiStruct(abi);\n    this.enums = CallData.getAbiEnum(abi);\n    this.parser = createAbiParser(abi);\n    this.abi = this.parser.getLegacyFormat();\n  }\n\n  /**\n   * Validate arguments passed to the method as corresponding to the ones in the abi\n   * @param type ValidateType - type of the method\n   * @param method string - name of the method\n   * @param args ArgsOrCalldata - arguments that are passed to the method\n   */\n  public validate(type: ValidateType, method: string, args: ArgsOrCalldata = []) {\n    // ensure provided method of type exists\n    if (type !== ValidateType.DEPLOY) {\n      const invocableFunctionNames = this.abi\n        .filter((abi) => {\n          if (abi.type !== 'function') return false;\n          const isView = abi.stateMutability === 'view' || abi.state_mutability === 'view';\n          return type === ValidateType.INVOKE ? !isView : isView;\n        })\n        .map((abi) => abi.name);\n      assert(\n        invocableFunctionNames.includes(method),\n        `${type === ValidateType.INVOKE ? 'invocable' : 'viewable'} method not found in abi`\n      );\n    }\n\n    // get requested method from abi\n    const abiMethod = this.abi.find((abi) =>\n      type === ValidateType.DEPLOY\n        ? abi.name === method && abi.type === 'constructor'\n        : abi.name === method && abi.type === 'function'\n    ) as FunctionAbi;\n\n    if (isNoConstructorValid(method, args, abiMethod)) {\n      return;\n    }\n\n    // validate arguments length\n    const inputsLength = this.parser.methodInputsLength(abiMethod);\n    if (args.length !== inputsLength) {\n      throw Error(\n        `Invalid number of arguments, expected ${inputsLength} arguments, but got ${args.length}`\n      );\n    }\n\n    // validate parameters\n    validateFields(abiMethod, args, this.structs, this.enums);\n  }\n\n  /**\n   * Compile contract callData with abi\n   * Parse the calldata by using input fields from the abi for that method\n   * @param method string - method name\n   * @param args RawArgs - arguments passed to the method. Can be an array of arguments (in the order of abi definition), or an object constructed in conformity with abi (in this case, the parameter can be in a wrong order).\n   * @return Calldata - parsed arguments in format that contract is expecting\n   * @example\n   * ```typescript\n   * const calldata = myCallData.compile(\"constructor\", [\"0x34a\", [1, 3n]]);\n   * ```\n   * ```typescript\n   * const calldata2 = myCallData.compile(\"constructor\", {list:[1, 3n], balance:\"0x34\"}); // wrong order is valid\n   * ```\n   */\n  public compile(method: string, argsCalldata: RawArgs): Calldata {\n    const abiMethod = this.abi.find((abiFunction) => abiFunction.name === method) as FunctionAbi;\n\n    if (isNoConstructorValid(method, argsCalldata, abiMethod)) {\n      return [];\n    }\n\n    let args: RawArgsArray;\n    if (Array.isArray(argsCalldata)) {\n      args = argsCalldata;\n    } else {\n      // order the object\n      const orderedObject = orderPropsByAbi(\n        argsCalldata,\n        abiMethod.inputs,\n        this.structs,\n        this.enums\n      );\n      // console.log('ordered =', orderedObject);\n      args = Object.values(orderedObject);\n      //   // validate array elements to abi\n      validateFields(abiMethod, args, this.structs, this.enums);\n    }\n\n    const argsIterator = args[Symbol.iterator]();\n\n    const callArray = abiMethod.inputs.reduce(\n      (acc, input) =>\n        isLen(input.name) && !isCairo1Type(input.type)\n          ? acc\n          : acc.concat(parseCalldataField(argsIterator, input, this.structs, this.enums)),\n      [] as Calldata\n    );\n\n    // add compiled property to array object\n    Object.defineProperty(callArray, '__compiled__', {\n      enumerable: false,\n      writable: false,\n      value: true,\n    });\n    return callArray;\n  }\n\n  /**\n   * Compile contract callData without abi\n   * @param rawArgs RawArgs representing cairo method arguments or string array of compiled data\n   * @returns Calldata\n   */\n  static compile(rawArgs: RawArgs): Calldata {\n    const createTree = (obj: object) => {\n      const getEntries = (o: object, prefix = '.'): any => {\n        const oe = Array.isArray(o) ? [o.length.toString(), ...o] : o;\n        return Object.entries(oe).flatMap(([k, v]) => {\n          let value = v;\n          if (isLongText(value)) value = splitLongString(value);\n          if (k === 'entrypoint') value = getSelectorFromName(value);\n          const kk = Array.isArray(oe) && k === '0' ? '$$len' : k;\n          if (isBigInt(value)) return [[`${prefix}${kk}`, felt(value)]];\n          if (Object(value) === value) {\n            const methodsKeys = Object.getOwnPropertyNames(Object.getPrototypeOf(value));\n            const keys = [...Object.getOwnPropertyNames(value), ...methodsKeys];\n            if (keys.includes('isSome') && keys.includes('isNone')) {\n              // Option\n              const myOption = value as CairoOption<any>;\n              const variantNb = myOption.isSome()\n                ? CairoOptionVariant.Some\n                : CairoOptionVariant.None;\n              if (myOption.isSome())\n                return getEntries({ 0: variantNb, 1: myOption.unwrap() }, `${prefix}${kk}.`);\n              return [[`${prefix}${kk}`, felt(variantNb)]];\n            }\n            if (keys.includes('isOk') && keys.includes('isErr')) {\n              // Result\n              const myResult = value as CairoResult<any, any>;\n              const variantNb = myResult.isOk() ? CairoResultVariant.Ok : CairoResultVariant.Err;\n              return getEntries({ 0: variantNb, 1: myResult.unwrap() }, `${prefix}${kk}.`);\n            }\n            if (keys.includes('variant') && keys.includes('activeVariant')) {\n              // CustomEnum\n              const myEnum = value as CairoCustomEnum;\n              const activeVariant: string = myEnum.activeVariant();\n              const listVariants = Object.keys(myEnum.variant);\n              const activeVariantNb = listVariants.findIndex(\n                (variant: any) => variant === activeVariant\n              );\n              if (\n                typeof myEnum.unwrap() === 'object' &&\n                Object.keys(myEnum.unwrap()).length === 0 // empty object : {}\n              ) {\n                return [[`${prefix}${kk}`, felt(activeVariantNb)]];\n              }\n              return getEntries({ 0: activeVariantNb, 1: myEnum.unwrap() }, `${prefix}${kk}.`);\n            }\n            // normal object\n            return getEntries(value, `${prefix}${kk}.`);\n          }\n          return [[`${prefix}${kk}`, felt(value)]];\n        });\n      };\n      const result = Object.fromEntries(getEntries(obj));\n      return result;\n    };\n\n    let callTreeArray;\n    if (!Array.isArray(rawArgs)) {\n      // flatten structs, tuples, add array length. Process leafs as Felt\n      const callTree = createTree(rawArgs);\n      // convert to array\n      callTreeArray = Object.values(callTree);\n    } else {\n      // already compiled data but modified or raw args provided as array, recompile it\n      // recreate tree\n      const callObj = { ...rawArgs };\n      const callTree = createTree(callObj);\n      callTreeArray = Object.values(callTree);\n    }\n\n    // add compiled property to array object\n    Object.defineProperty(callTreeArray, '__compiled__', {\n      enumerable: false,\n      writable: false,\n      value: true,\n    });\n    return callTreeArray;\n  }\n\n  /**\n   * Parse elements of the response array and structuring them into response object\n   * @param method string - method name\n   * @param response string[] - response from the method\n   * @return Result - parsed response corresponding to the abi\n   */\n  public parse(method: string, response: string[]): Result {\n    const { outputs } = this.abi.find((abi) => abi.name === method) as FunctionAbi;\n    const responseIterator = response.flat()[Symbol.iterator]();\n\n    const parsed = outputs.flat().reduce((acc, output, idx) => {\n      const propName = output.name ?? idx;\n      acc[propName] = responseParser(responseIterator, output, this.structs, this.enums, acc);\n      if (acc[propName] && acc[`${propName}_len`]) {\n        delete acc[`${propName}_len`];\n      }\n      return acc;\n    }, {} as Args);\n\n    // Cairo1 avoid object.0 structure\n    return Object.keys(parsed).length === 1 && 0 in parsed ? (parsed[0] as Result) : parsed;\n  }\n\n  /**\n   * Format cairo method response data to native js values based on provided format schema\n   * @param method string - cairo method name\n   * @param response string[] - cairo method response\n   * @param format object - formatter object schema\n   * @returns Result - parsed and formatted response object\n   */\n  public format(method: string, response: string[], format: object): Result {\n    const parsed = this.parse(method, response);\n    return formatter(parsed, format);\n  }\n\n  /**\n   * Helper to extract structs from abi\n   * @param abi Abi\n   * @returns AbiStructs - structs from abi\n   */\n  static getAbiStruct(abi: Abi): AbiStructs {\n    return abi\n      .filter((abiEntry) => abiEntry.type === 'struct')\n      .reduce(\n        (acc, abiEntry) => ({\n          ...acc,\n          [abiEntry.name]: abiEntry,\n        }),\n        {}\n      );\n  }\n\n  /**\n   * Helper to extract enums from abi\n   * @param abi Abi\n   * @returns AbiEnums - enums from abi\n   */\n  static getAbiEnum(abi: Abi): AbiEnums {\n    const fullEnumList = abi\n      .filter((abiEntry) => abiEntry.type === 'enum')\n      .reduce(\n        (acc, abiEntry) => ({\n          ...acc,\n          [abiEntry.name]: abiEntry,\n        }),\n        {}\n      );\n    delete fullEnumList['core::bool'];\n    return fullEnumList;\n  }\n\n  /**\n   * Helper: Compile HexCalldata | RawCalldata | RawArgs\n   * @param rawCalldata HexCalldata | RawCalldata | RawArgs\n   * @returns Calldata\n   */\n  static toCalldata(rawCalldata: RawArgs = []): Calldata {\n    return CallData.compile(rawCalldata);\n  }\n\n  /**\n   * Helper: Convert raw to HexCalldata\n   * @param raw HexCalldata | RawCalldata | RawArgs\n   * @returns HexCalldata\n   */\n  static toHex(raw: RawArgs = []): HexCalldata {\n    const calldata = CallData.compile(raw);\n    return calldata.map((it) => toHex(it));\n  }\n}\n","/* eslint-disable no-param-reassign */\n/* eslint-disable import/extensions */\nimport { poseidonHashMany } from '@scure/starknet';\n\nimport {\n  API_VERSION,\n  BN_FEE_TRANSACTION_VERSION_1,\n  BN_FEE_TRANSACTION_VERSION_2,\n  BN_TRANSACTION_VERSION_1,\n  BN_TRANSACTION_VERSION_2,\n  StarknetChainId,\n  TransactionHashPrefix,\n} from '../constants';\nimport {\n  BigNumberish,\n  Builtins,\n  CompiledContract,\n  CompiledSierra,\n  CompiledSierraCasm,\n  ContractEntryPointFields,\n  LegacyCompiledContract,\n  RawArgs,\n  RawCalldata,\n  SierraContractEntryPointFields,\n} from '../types';\nimport { CallData } from './calldata';\nimport { felt } from './calldata/cairo';\nimport { starkCurve } from './ec';\nimport { addHexPrefix, utf8ToArray } from './encode';\nimport { parse, stringify } from './json';\nimport { toBigInt, toHex } from './num';\nimport { getSelectorFromName } from './selector';\nimport { encodeShortString } from './shortString';\n\nexport * as poseidon from '@noble/curves/abstract/poseidon';\nexport * from './selector'; // Preserve legacy export structure\n\nexport const transactionVersion = BN_TRANSACTION_VERSION_1;\nexport const transactionVersion_2 = BN_TRANSACTION_VERSION_2;\nexport const feeTransactionVersion = BN_FEE_TRANSACTION_VERSION_1;\nexport const feeTransactionVersion_2 = BN_FEE_TRANSACTION_VERSION_2;\n\n/**\n * Return transaction versions based on version type, default version type is 'transaction'\n */\nexport function getVersionsByType(versionType?: 'fee' | 'transaction') {\n  return versionType === 'fee'\n    ? { v1: feeTransactionVersion, v2: feeTransactionVersion_2 }\n    : { v1: transactionVersion, v2: transactionVersion_2 };\n}\n\n/**\n * Compute pedersen hash from data\n * @returns format: hex-string - pedersen hash\n */\nexport function computeHashOnElements(data: BigNumberish[]): string {\n  return [...data, data.length]\n    .reduce((x: BigNumberish, y: BigNumberish) => starkCurve.pedersen(toBigInt(x), toBigInt(y)), 0)\n    .toString();\n}\n\n/**\n * Calculate transaction pedersen hash for common properties\n *\n * Following implementation is based on this python [implementation #](https://github.com/starkware-libs/cairo-lang/blob/b614d1867c64f3fb2cf4a4879348cfcf87c3a5a7/src/starkware/starknet/core/os/transaction_hash/transaction_hash.py)\n * @returns format: hex-string\n */\nexport function calculateTransactionHashCommon(\n  txHashPrefix: TransactionHashPrefix,\n  version: BigNumberish,\n  contractAddress: BigNumberish,\n  entryPointSelector: BigNumberish,\n  calldata: RawCalldata,\n  maxFee: BigNumberish,\n  chainId: StarknetChainId,\n  additionalData: BigNumberish[] = []\n): string {\n  const calldataHash = computeHashOnElements(calldata);\n  const dataToHash = [\n    txHashPrefix,\n    version,\n    contractAddress,\n    entryPointSelector,\n    calldataHash,\n    maxFee,\n    chainId,\n    ...additionalData,\n  ];\n  return computeHashOnElements(dataToHash);\n}\n\n/**\n * Calculate deploy transaction hash\n * @returns format: hex-string\n */\nexport function calculateDeployTransactionHash(\n  contractAddress: BigNumberish,\n  constructorCalldata: RawCalldata,\n  version: BigNumberish,\n  chainId: StarknetChainId,\n  constructorName: string = 'constructor'\n): string {\n  return calculateTransactionHashCommon(\n    TransactionHashPrefix.DEPLOY,\n    version,\n    contractAddress,\n    getSelectorFromName(constructorName),\n    constructorCalldata,\n    0,\n    chainId\n  );\n}\n\n/**\n * Calculate declare transaction hash\n * @param classHash hex-string\n * @param compiledClassHash hex-string\n * @returns format: hex-string\n */\nexport function calculateDeclareTransactionHash(\n  classHash: string,\n  senderAddress: BigNumberish,\n  version: BigNumberish,\n  maxFee: BigNumberish,\n  chainId: StarknetChainId,\n  nonce: BigNumberish,\n  compiledClassHash?: string\n): string {\n  return calculateTransactionHashCommon(\n    TransactionHashPrefix.DECLARE,\n    version,\n    senderAddress,\n    0,\n    [classHash],\n    maxFee,\n    chainId,\n    [nonce, ...(compiledClassHash ? [compiledClassHash] : [])]\n  );\n}\n\n/**\n * Calculate deploy_account transaction hash\n * @returns format: hex-string\n */\nexport function calculateDeployAccountTransactionHash(\n  contractAddress: BigNumberish,\n  classHash: BigNumberish,\n  constructorCalldata: RawCalldata,\n  salt: BigNumberish,\n  version: BigNumberish,\n  maxFee: BigNumberish,\n  chainId: StarknetChainId,\n  nonce: BigNumberish\n) {\n  const calldata = [classHash, salt, ...constructorCalldata];\n\n  return calculateTransactionHashCommon(\n    TransactionHashPrefix.DEPLOY_ACCOUNT,\n    version,\n    contractAddress,\n    0,\n    calldata,\n    maxFee,\n    chainId,\n    [nonce]\n  );\n}\n\n/**\n * Calculate invoke transaction hash\n * @returns format: hex-string\n */\nexport function calculateTransactionHash(\n  contractAddress: BigNumberish,\n  version: BigNumberish,\n  calldata: RawCalldata,\n  maxFee: BigNumberish,\n  chainId: StarknetChainId,\n  nonce: BigNumberish\n): string {\n  return calculateTransactionHashCommon(\n    TransactionHashPrefix.INVOKE,\n    version,\n    contractAddress,\n    0,\n    calldata,\n    maxFee,\n    chainId,\n    [nonce]\n  );\n}\n\n/**\n * Calculate contract address from class hash\n * @returns format: hex-string\n */\nexport function calculateContractAddressFromHash(\n  salt: BigNumberish,\n  classHash: BigNumberish,\n  constructorCalldata: RawArgs,\n  deployerAddress: BigNumberish\n) {\n  const compiledCalldata = CallData.compile(constructorCalldata);\n  const constructorCalldataHash = computeHashOnElements(compiledCalldata);\n\n  const CONTRACT_ADDRESS_PREFIX = felt('0x535441524b4e45545f434f4e54524143545f41444452455353'); // Equivalent to 'STARKNET_CONTRACT_ADDRESS'\n\n  return computeHashOnElements([\n    CONTRACT_ADDRESS_PREFIX,\n    deployerAddress,\n    salt,\n    classHash,\n    constructorCalldataHash,\n  ]);\n}\n\nfunction nullSkipReplacer(key: string, value: any) {\n  if (key === 'attributes' || key === 'accessible_scopes') {\n    return Array.isArray(value) && value.length === 0 ? undefined : value;\n  }\n\n  if (key === 'debug_info') {\n    return null;\n  }\n\n  return value === null ? undefined : value;\n}\n\n/**\n * Format json-string to conform starknet json-string\n * @param json json-string\n * @returns format: json-string\n */\nexport function formatSpaces(json: string) {\n  let insideQuotes = false;\n  const newString = [];\n  // eslint-disable-next-line no-restricted-syntax\n  for (const char of json) {\n    if (char === '\"' && (newString.length > 0 && newString.slice(-1)[0] === '\\\\') === false) {\n      insideQuotes = !insideQuotes;\n    }\n    if (insideQuotes) {\n      newString.push(char);\n    } else {\n      // eslint-disable-next-line no-nested-ternary\n      newString.push(char === ':' ? ': ' : char === ',' ? ', ' : char);\n    }\n  }\n  return newString.join('');\n}\n\n/**\n * Compute hinted class hash for legacy compiled contract (Cairo 0)\n * @returns format: hex-string\n */\nexport default function computeHintedClassHash(compiledContract: LegacyCompiledContract) {\n  const { abi, program } = compiledContract;\n  const contractClass = { abi, program };\n  const serializedJson = formatSpaces(stringify(contractClass, nullSkipReplacer));\n\n  return addHexPrefix(starkCurve.keccak(utf8ToArray(serializedJson)).toString(16));\n}\n\n/**\n * Computes the class hash for legacy compiled contract (Cairo 0)\n * @returns format: hex-string\n */\nexport function computeLegacyContractClassHash(contract: LegacyCompiledContract | string) {\n  const compiledContract =\n    typeof contract === 'string' ? (parse(contract) as LegacyCompiledContract) : contract;\n\n  const apiVersion = toHex(API_VERSION);\n\n  const externalEntryPointsHash = computeHashOnElements(\n    compiledContract.entry_points_by_type.EXTERNAL.flatMap((e) => [e.selector, e.offset])\n  );\n\n  const l1HandlerEntryPointsHash = computeHashOnElements(\n    compiledContract.entry_points_by_type.L1_HANDLER.flatMap((e) => [e.selector, e.offset])\n  );\n\n  const constructorEntryPointHash = computeHashOnElements(\n    compiledContract.entry_points_by_type.CONSTRUCTOR.flatMap((e) => [e.selector, e.offset])\n  );\n\n  const builtinsHash = computeHashOnElements(\n    compiledContract.program.builtins.map((s) => encodeShortString(s))\n  );\n\n  const hintedClassHash = computeHintedClassHash(compiledContract);\n\n  const dataHash = computeHashOnElements(compiledContract.program.data);\n\n  return computeHashOnElements([\n    apiVersion,\n    externalEntryPointsHash,\n    l1HandlerEntryPointsHash,\n    constructorEntryPointHash,\n    builtinsHash,\n    hintedClassHash,\n    dataHash,\n  ]);\n}\n\n// Cairo 1 code\n\nfunction hashBuiltins(builtins: Builtins) {\n  return poseidonHashMany(\n    builtins.flatMap((it: any) => {\n      return BigInt(encodeShortString(it));\n    })\n  );\n}\n\nfunction hashEntryPoint(data: ContractEntryPointFields[]) {\n  const base = data.flatMap((it: any) => {\n    return [BigInt(it.selector), BigInt(it.offset), hashBuiltins(it.builtins)];\n  });\n  return poseidonHashMany(base);\n}\n\n/**\n * Compute compiled class hash for contract (Cairo 1)\n * @returns format: hex-string\n */\nexport function computeCompiledClassHash(casm: CompiledSierraCasm) {\n  const COMPILED_CLASS_VERSION = 'COMPILED_CLASS_V1';\n\n  // Hash compiled class version\n  const compiledClassVersion = BigInt(encodeShortString(COMPILED_CLASS_VERSION));\n\n  // Hash external entry points.\n  const externalEntryPointsHash = hashEntryPoint(casm.entry_points_by_type.EXTERNAL);\n\n  // Hash L1 handler entry points.\n  const l1Handlers = hashEntryPoint(casm.entry_points_by_type.L1_HANDLER);\n\n  // Hash constructor entry points.\n  const constructor = hashEntryPoint(casm.entry_points_by_type.CONSTRUCTOR);\n\n  // Hash bytecode.\n  const bytecode = poseidonHashMany(casm.bytecode.map((it: string) => BigInt(it)));\n\n  return toHex(\n    poseidonHashMany([\n      compiledClassVersion,\n      externalEntryPointsHash,\n      l1Handlers,\n      constructor,\n      bytecode,\n    ])\n  );\n}\n\nfunction hashEntryPointSierra(data: SierraContractEntryPointFields[]) {\n  const base = data.flatMap((it: any) => {\n    return [BigInt(it.selector), BigInt(it.function_idx)];\n  });\n  return poseidonHashMany(base);\n}\n\nfunction hashAbi(sierra: CompiledSierra) {\n  const indentString = formatSpaces(stringify(sierra.abi, null));\n  return BigInt(addHexPrefix(starkCurve.keccak(utf8ToArray(indentString)).toString(16)));\n}\n\n/**\n * Compute sierra contract class hash (Cairo 1)\n * @returns format: hex-string\n */\nexport function computeSierraContractClassHash(sierra: CompiledSierra) {\n  const CONTRACT_CLASS_VERSION = 'CONTRACT_CLASS_V0.1.0';\n\n  // Hash class version\n  const compiledClassVersion = BigInt(encodeShortString(CONTRACT_CLASS_VERSION));\n\n  // Hash external entry points.\n  const externalEntryPointsHash = hashEntryPointSierra(sierra.entry_points_by_type.EXTERNAL);\n\n  // Hash L1 handler entry points.\n  const l1Handlers = hashEntryPointSierra(sierra.entry_points_by_type.L1_HANDLER);\n\n  // Hash constructor entry points.\n  const constructor = hashEntryPointSierra(sierra.entry_points_by_type.CONSTRUCTOR);\n\n  // Hash abi_hash.\n  const abiHash = hashAbi(sierra);\n\n  // Hash Sierra program.\n  const sierraProgram = poseidonHashMany(sierra.sierra_program.map((it: string) => BigInt(it)));\n\n  return toHex(\n    poseidonHashMany([\n      compiledClassVersion,\n      externalEntryPointsHash,\n      l1Handlers,\n      constructor,\n      abiHash,\n      sierraProgram,\n    ])\n  );\n}\n\n/**\n * Compute ClassHash (sierra or legacy) based on provided contract\n * @returns format: hex-string\n */\nexport function computeContractClassHash(contract: CompiledContract | string) {\n  const compiledContract = typeof contract === 'string' ? parse(contract) : contract;\n\n  if ('sierra_program' in compiledContract) {\n    return computeSierraContractClassHash(compiledContract as CompiledSierra);\n  }\n\n  return computeLegacyContractClassHash(compiledContract as LegacyCompiledContract);\n}\n","// TODO rename\nexport * as starkCurve from '@scure/starknet';\nexport * as weierstrass from '@noble/curves/abstract/weierstrass';\n","// the ts-ignore suppresses an esm to cjs import error that is resolved with bundling\n// @ts-ignore\nimport * as json from 'lossless-json';\n\n/**\n * Convert string to number or bigint based on size\n */\nconst parseIntAsNumberOrBigInt = (x: string) => {\n  if (!json.isInteger(x)) return parseFloat(x);\n  const v = parseInt(x, 10);\n  return Number.isSafeInteger(v) ? v : BigInt(x);\n};\n\n/**\n * Convert JSON string to JSON object\n *\n * NOTE: the String() wrapping is used so the behavior conforms to JSON.parse()\n * which can accept simple data types but is not represented in the default typing\n * @param x JSON string\n */\nexport const parse = (x: string): any => json.parse(String(x), undefined, parseIntAsNumberOrBigInt);\n\n/**\n * Convert JSON string to JSON object with all numbers as bigint\n * @param x JSON string\n */\nexport const parseAlwaysAsBig = (x: string): any =>\n  json.parse(String(x), undefined, json.parseNumberAndBigInt);\n\n/**\n * Convert JSON object to JSON string\n *\n * NOTE: the not-null assertion is used so the return type conforms to JSON.stringify()\n * which can also return undefined but is not represented in the default typing\n * @returns JSON string\n */\nexport const stringify = (\n  value: json.JavaScriptValue,\n  replacer?: any,\n  space?: string | number | undefined,\n  numberStringifiers?: json.NumberStringifier[] | undefined\n): string => json.stringify(value, replacer, space, numberStringifiers)!;\n\n/** @deprecated equivalent to 'stringify', alias will be removed */\nexport const stringifyAlwaysAsBig = stringify;\n","import { getStarkKey, utils } from '@scure/starknet';\nimport { gzip, ungzip } from 'pako';\n\nimport { ArraySignatureType, BigNumberish, CompressedProgram, Program, Signature } from '../types';\nimport { addHexPrefix, arrayBufferToString, atobUniversal, btoaUniversal } from './encode';\nimport { parse, stringify } from './json';\nimport {\n  bigNumberishArrayToDecimalStringArray,\n  bigNumberishArrayToHexadecimalStringArray,\n  toBigInt,\n  toHex,\n} from './num';\n\n/**\n * Compress compiled Cairo program\n *\n * [Reference](https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/services/api/gateway/transaction.py#L54-L58)\n * @param jsonProgram Representing the compiled cairo program\n */\nexport function compressProgram(jsonProgram: Program | string): CompressedProgram {\n  const stringified = typeof jsonProgram === 'string' ? jsonProgram : stringify(jsonProgram);\n  const compressedProgram = gzip(stringified);\n  return btoaUniversal(compressedProgram);\n}\n\n/**\n * Decompress compressed compiled Cairo program\n * @param base64 Compressed program\n * @returns Parsed decompressed compiled Cairo program\n */\nexport function decompressProgram(base64: CompressedProgram) {\n  if (Array.isArray(base64)) return base64;\n  const decompressed = arrayBufferToString(ungzip(atobUniversal(base64)));\n  return parse(decompressed);\n}\n\n/**\n * Random Address based on random keyPair\n */\nexport function randomAddress(): string {\n  const randomKeyPair = utils.randomPrivateKey();\n  return getStarkKey(randomKeyPair);\n}\n\n/**\n * Lowercase and hex prefix string\n *\n * @deprecated Not used internally, naming is confusing based on functionality\n */\nexport function makeAddress(input: string): string {\n  return addHexPrefix(input).toLowerCase();\n}\n\n/**\n * Format Signature to standard type (hex array)\n * @returns Custom hex array or weierstrass.SignatureType hex array\n */\nexport function formatSignature(sig?: Signature): ArraySignatureType {\n  if (!sig) throw Error('formatSignature: provided signature is undefined');\n  if (Array.isArray(sig)) {\n    return sig.map((it) => toHex(it));\n  }\n  try {\n    const { r, s } = sig;\n    return [toHex(r), toHex(s)];\n  } catch (e) {\n    throw new Error('Signature need to be weierstrass.SignatureType or an array for custom');\n  }\n}\n\n/**\n * Format Signature to decimal string array\n */\nexport function signatureToDecimalArray(sig?: Signature): ArraySignatureType {\n  return bigNumberishArrayToDecimalStringArray(formatSignature(sig));\n}\n\n/**\n * Format Signature to hex string array\n */\nexport function signatureToHexArray(sig?: Signature): ArraySignatureType {\n  return bigNumberishArrayToHexadecimalStringArray(formatSignature(sig));\n}\n\n/**\n * Convert estimated fee to max fee with overhead\n */\nexport function estimatedFeeToMaxFee(estimatedFee: BigNumberish, overhead: number = 0.5): bigint {\n  // BN can only handle Integers, so we need to do all calculations with integers\n  const overHeadPercent = Math.round((1 + overhead) * 100);\n  return (toBigInt(estimatedFee) * toBigInt(overHeadPercent)) / 100n;\n}\n","import { ContractClassResponse } from '../types';\nimport {\n  CairoContract,\n  CompiledSierra,\n  LegacyCompiledContract,\n  LegacyContractClass,\n  SierraContractClass,\n} from '../types/lib/contract/index';\nimport { CompleteDeclareContractPayload, DeclareContractPayload } from '../types/lib/index';\nimport { computeCompiledClassHash, computeContractClassHash } from './hash';\nimport { parse } from './json';\nimport { decompressProgram } from './stark';\n\nexport function isSierra(\n  contract: CairoContract | string\n): contract is SierraContractClass | CompiledSierra {\n  const compiledContract = typeof contract === 'string' ? parse(contract) : contract;\n  return 'sierra_program' in compiledContract;\n}\n\nexport function extractContractHashes(\n  payload: DeclareContractPayload\n): CompleteDeclareContractPayload {\n  const response = { ...payload } as CompleteDeclareContractPayload;\n\n  if (isSierra(payload.contract)) {\n    if (!payload.compiledClassHash && payload.casm) {\n      response.compiledClassHash = computeCompiledClassHash(payload.casm);\n    }\n    if (!response.compiledClassHash)\n      throw new Error(\n        'Extract compiledClassHash failed, provide (CairoAssembly).casm file or compiledClassHash'\n      );\n  }\n\n  response.classHash = payload.classHash ?? computeContractClassHash(payload.contract);\n  if (!response.classHash)\n    throw new Error('Extract classHash failed, provide (CompiledContract).json file or classHash');\n\n  return response;\n}\n\n/**\n * Helper to redeclare response Cairo0 contract\n */\nexport function contractClassResponseToLegacyCompiledContract(ccr: ContractClassResponse) {\n  if (isSierra(ccr)) {\n    throw Error('ContractClassResponse need to be LegacyContractClass (cairo0 response class)');\n  }\n  const contract = ccr as LegacyContractClass;\n  return { ...contract, program: decompressProgram(contract.program) } as LegacyCompiledContract;\n}\n","import isomorphicFetch from 'isomorphic-fetch';\n\nexport default (typeof window !== 'undefined' && window.fetch) || // use buildin fetch in browser if available\n  (typeof global !== 'undefined' && global.fetch) || // use buildin fetch in node, react-native and service worker if available\n  isomorphicFetch; // ponyfill fetch in node and browsers that don't have it\n","import {\n  CompiledContract,\n  CompiledSierra,\n  ContractClass,\n  LegacyContractClass,\n  SierraContractClass,\n} from '../types';\nimport { isSierra } from './contract';\nimport { formatSpaces } from './hash';\nimport { parse, stringify } from './json';\nimport { compressProgram } from './stark';\n\n/**\n * Helper - Async Sleep for 'delay' time\n */\nexport function wait(delay: number) {\n  return new Promise((res) => {\n    setTimeout(res, delay);\n  });\n}\n\n/**\n * Create Sierra Contract Class from a given Compiled Sierra\n *\n * CompiledSierra -> SierraContractClass\n */\nexport function createSierraContractClass(contract: CompiledSierra): SierraContractClass {\n  const result = { ...contract } as any;\n  delete result.sierra_program_debug_info;\n  result.abi = formatSpaces(stringify(contract.abi));\n  result.sierra_program = formatSpaces(stringify(contract.sierra_program));\n  result.sierra_program = compressProgram(result.sierra_program);\n  return result;\n}\n\n/**\n * Create Contract Class from a given CompiledContract or string\n *\n * (CompiledContract or string) -> ContractClass\n */\nexport function parseContract(contract: CompiledContract | string): ContractClass {\n  const parsedContract =\n    typeof contract === 'string' ? (parse(contract) as CompiledContract) : contract;\n\n  if (!isSierra(contract)) {\n    return {\n      ...parsedContract,\n      ...('program' in parsedContract && { program: compressProgram(parsedContract.program) }),\n    } as LegacyContractClass;\n  }\n\n  return createSierraContractClass(parsedContract as CompiledSierra);\n}\n","/**\n * Map RPC Response to common interface response\n * Intersection (sequencer response ∩ (∪ rpc responses))\n */\nimport {\n  BlockStatus,\n  CallContractResponse,\n  ContractClassResponse,\n  EstimateFeeResponse,\n  EstimateFeeResponseBulk,\n  GetBlockResponse,\n  GetTransactionResponse,\n  SimulateTransactionResponse,\n} from '../../types';\nimport {\n  BlockWithTxHashes,\n  ContractClass,\n  FeeEstimate,\n  SimulateTransactionResponse as RPCSimulateTransactionResponse,\n  TransactionWithHash,\n} from '../../types/api/rpcspec';\nimport { toBigInt } from '../num';\nimport { estimatedFeeToMaxFee } from '../stark';\nimport { ResponseParser } from '.';\n\nexport class RPCResponseParser\n  implements\n    Omit<\n      ResponseParser,\n      | 'parseDeclareContractResponse'\n      | 'parseDeployContractResponse'\n      | 'parseInvokeFunctionResponse'\n      | 'parseGetTransactionReceiptResponse'\n    >\n{\n  public parseGetBlockResponse(res: BlockWithTxHashes): GetBlockResponse {\n    return {\n      timestamp: res.timestamp,\n      block_hash: 'block_hash' in res ? res.block_hash : '',\n      block_number: 'block_number' in res ? res.block_number : -1,\n      new_root: 'new_root' in res ? res.new_root : '',\n      parent_hash: res.parent_hash,\n      status: 'status' in res ? (res.status as BlockStatus) : BlockStatus.PENDING,\n      transactions: res.transactions,\n    };\n  }\n\n  public parseGetTransactionResponse(res: TransactionWithHash): GetTransactionResponse {\n    return {\n      calldata: 'calldata' in res ? res.calldata : [],\n      contract_address: 'contract_address' in res ? res.contract_address : '',\n      sender_address: 'sender_address' in res ? res.sender_address : '',\n      max_fee: 'max_fee' in res ? res.max_fee : '',\n      nonce: 'nonce' in res ? res.nonce : '',\n      signature: 'signature' in res ? res.signature : [],\n      transaction_hash: res.transaction_hash,\n      version: res.version,\n    };\n  }\n\n  public parseFeeEstimateResponse(res: FeeEstimate[]): EstimateFeeResponse {\n    return {\n      overall_fee: toBigInt(res[0].overall_fee),\n      gas_consumed: toBigInt(res[0].gas_consumed),\n      gas_price: toBigInt(res[0].gas_price),\n    };\n  }\n\n  public parseFeeEstimateBulkResponse(res: FeeEstimate[]): EstimateFeeResponseBulk {\n    return res.map((val) => ({\n      overall_fee: toBigInt(val.overall_fee),\n      gas_consumed: toBigInt(val.gas_consumed),\n      gas_price: toBigInt(val.gas_price),\n    }));\n  }\n\n  public parseCallContractResponse(res: string[]): CallContractResponse {\n    return {\n      result: res,\n    };\n  }\n\n  public parseSimulateTransactionResponse(\n    res: RPCSimulateTransactionResponse\n  ): SimulateTransactionResponse {\n    return res.map((it) => {\n      return {\n        ...it,\n        suggestedMaxFee: estimatedFeeToMaxFee(BigInt(it.fee_estimation.overall_fee)),\n      };\n    });\n  }\n\n  public parseContractClassResponse(res: ContractClass): ContractClassResponse {\n    return {\n      ...res,\n      abi: typeof res.abi === 'string' ? JSON.parse(res.abi) : res.abi,\n    };\n  }\n}\n","// eslint-disable-next-line max-classes-per-file\nexport function fixStack(target: Error, fn: Function = target.constructor) {\n  const { captureStackTrace } = Error as any;\n  // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n  captureStackTrace && captureStackTrace(target, fn);\n}\n\nexport function fixProto(target: Error, prototype: {}) {\n  const { setPrototypeOf } = Object as any;\n  // eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-proto, no-param-reassign\n  setPrototypeOf ? setPrototypeOf(target, prototype) : ((target as any).__proto__ = prototype);\n}\n\n/* eslint-disable max-classes-per-file */\nexport class CustomError extends Error {\n  name!: string;\n\n  constructor(message?: string) {\n    super(message);\n    // set error name as constructor name, make it not enumerable to keep native Error behavior\n    // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors\n    // see https://github.com/adriengibrat/ts-custom-error/issues/30\n    Object.defineProperty(this, 'name', {\n      value: new.target.name,\n      enumerable: false,\n      configurable: true,\n    });\n    // fix the extended error prototype chain\n    // because typescript __extends implementation can't\n    // see https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    fixProto(this, new.target.prototype);\n    // try to remove constructor from stack trace\n    fixStack(this);\n  }\n}\n\nexport class LibraryError extends CustomError {}\n\nexport class GatewayError extends LibraryError {\n  constructor(message: string, public errorCode: string) {\n    super(message);\n  }\n}\n\nexport class HttpError extends LibraryError {\n  constructor(message: string, public errorCode: number) {\n    super(message);\n  }\n}\n","/* eslint-disable no-param-reassign */\nimport { StarknetChainId, ZERO } from '../constants';\n\nconst basicAlphabet = 'abcdefghijklmnopqrstuvwxyz0123456789-';\nconst basicSizePlusOne = BigInt(basicAlphabet.length + 1);\nconst bigAlphabet = '这来';\nconst basicAlphabetSize = BigInt(basicAlphabet.length);\nconst bigAlphabetSize = BigInt(bigAlphabet.length);\nconst bigAlphabetSizePlusOne = BigInt(bigAlphabet.length + 1);\n\nfunction extractStars(str: string): [string, number] {\n  let k = 0;\n  while (str.endsWith(bigAlphabet[bigAlphabet.length - 1])) {\n    str = str.substring(0, str.length - 1);\n    k += 1;\n  }\n  return [str, k];\n}\n\nexport function useDecoded(encoded: bigint[]): string {\n  let decoded = '';\n\n  encoded.forEach((subdomain) => {\n    while (subdomain !== ZERO) {\n      const code = subdomain % basicSizePlusOne;\n      subdomain /= basicSizePlusOne;\n      if (code === BigInt(basicAlphabet.length)) {\n        const nextSubdomain = subdomain / bigAlphabetSizePlusOne;\n        if (nextSubdomain === ZERO) {\n          const code2 = subdomain % bigAlphabetSizePlusOne;\n          subdomain = nextSubdomain;\n          if (code2 === ZERO) decoded += basicAlphabet[0];\n          else decoded += bigAlphabet[Number(code2) - 1];\n        } else {\n          const code2 = subdomain % bigAlphabetSize;\n          decoded += bigAlphabet[Number(code2)];\n          subdomain /= bigAlphabetSize;\n        }\n      } else decoded += basicAlphabet[Number(code)];\n    }\n\n    const [str, k] = extractStars(decoded);\n    if (k)\n      decoded =\n        str +\n        (k % 2 === 0\n          ? bigAlphabet[bigAlphabet.length - 1].repeat(k / 2 - 1) +\n            bigAlphabet[0] +\n            basicAlphabet[1]\n          : bigAlphabet[bigAlphabet.length - 1].repeat((k - 1) / 2 + 1));\n    decoded += '.';\n  });\n\n  if (!decoded) {\n    return decoded;\n  }\n\n  return decoded.concat('stark');\n}\n\nexport function useEncoded(decoded: string): bigint {\n  let encoded = BigInt(0);\n  let multiplier = BigInt(1);\n\n  if (decoded.endsWith(bigAlphabet[0] + basicAlphabet[1])) {\n    const [str, k] = extractStars(decoded.substring(0, decoded.length - 2));\n    decoded = str + bigAlphabet[bigAlphabet.length - 1].repeat(2 * (k + 1));\n  } else {\n    const [str, k] = extractStars(decoded);\n    if (k) decoded = str + bigAlphabet[bigAlphabet.length - 1].repeat(1 + 2 * (k - 1));\n  }\n\n  for (let i = 0; i < decoded.length; i += 1) {\n    const char = decoded[i];\n    const index = basicAlphabet.indexOf(char);\n    const bnIndex = BigInt(basicAlphabet.indexOf(char));\n\n    if (index !== -1) {\n      // add encoded + multiplier * index\n      if (i === decoded.length - 1 && decoded[i] === basicAlphabet[0]) {\n        encoded += multiplier * basicAlphabetSize;\n        multiplier *= basicSizePlusOne;\n        // add 0\n        multiplier *= basicSizePlusOne;\n      } else {\n        encoded += multiplier * bnIndex;\n        multiplier *= basicSizePlusOne;\n      }\n    } else if (bigAlphabet.indexOf(char) !== -1) {\n      // add encoded + multiplier * (basicAlphabetSize)\n      encoded += multiplier * basicAlphabetSize;\n      multiplier *= basicSizePlusOne;\n      // add encoded + multiplier * index\n      const newid = (i === decoded.length - 1 ? 1 : 0) + bigAlphabet.indexOf(char);\n      encoded += multiplier * BigInt(newid);\n      multiplier *= bigAlphabetSize;\n    }\n  }\n\n  return encoded;\n}\n\nexport const enum StarknetIdContract {\n  MAINNET = '0x6ac597f8116f886fa1c97a23fa4e08299975ecaf6b598873ca6792b9bbfb678',\n  TESTNET = '0x3bab268e932d2cecd1946f100ae67ce3dff9fd234119ea2f6da57d16d29fce',\n}\n\nexport function getStarknetIdContract(chainId: StarknetChainId): string {\n  switch (chainId) {\n    case StarknetChainId.SN_MAIN:\n      return StarknetIdContract.MAINNET;\n\n    case StarknetChainId.SN_GOERLI:\n      return StarknetIdContract.TESTNET;\n\n    default:\n      throw new Error('Starknet.id is not yet deployed on this network');\n  }\n}\n","import { BigNumberish } from '../types';\nimport { CallData } from '../utils/calldata';\nimport { getStarknetIdContract, useDecoded, useEncoded } from '../utils/starknetId';\nimport { ProviderInterface } from './interface';\n\nexport async function getStarkName(\n  provider: ProviderInterface,\n  address: BigNumberish,\n  StarknetIdContract?: string\n): Promise<string> {\n  const chainId = await provider.getChainId();\n  const contract = StarknetIdContract ?? getStarknetIdContract(chainId);\n\n  try {\n    const hexDomain = await provider.callContract({\n      contractAddress: contract,\n      entrypoint: 'address_to_domain',\n      calldata: CallData.compile({\n        address,\n      }),\n    });\n    const decimalDomain = hexDomain.result.map((element) => BigInt(element)).slice(1);\n\n    const stringDomain = useDecoded(decimalDomain);\n\n    if (!stringDomain) {\n      throw Error('Starkname not found');\n    }\n\n    return stringDomain;\n  } catch (e) {\n    if (e instanceof Error && e.message === 'Starkname not found') {\n      throw e;\n    }\n    throw Error('Could not get stark name');\n  }\n}\n\nexport async function getAddressFromStarkName(\n  provider: ProviderInterface,\n  name: string,\n  StarknetIdContract?: string\n): Promise<string> {\n  const chainId = await provider.getChainId();\n  const contract = StarknetIdContract ?? getStarknetIdContract(chainId);\n\n  try {\n    const addressData = await provider.callContract({\n      contractAddress: contract,\n      entrypoint: 'domain_to_address',\n      calldata: CallData.compile({\n        domain: [useEncoded(name.replace('.stark', '')).toString(10)],\n      }),\n    });\n\n    return addressData.result[0];\n  } catch {\n    throw Error('Could not get address from stark name');\n  }\n}\n","/* eslint-disable max-classes-per-file */\nimport {\n  BigNumberish,\n  BlockIdentifier,\n  BlockNumber,\n  BlockTag,\n  SequencerIdentifier,\n} from '../types';\nimport { isHex, toHex } from '../utils/num';\n\n/** @deprecated prefer importing from 'types' over 'provider/utils' */\nexport type { BlockIdentifier };\n\n/**\n * [Reference](https://github.com/starkware-libs/cairo-lang/blob/fc97bdd8322a7df043c87c371634b26c15ed6cee/src/starkware/starknet/services/api/feeder_gateway/feeder_gateway_client.py#L148-L153)\n */\nexport function formatHash(hashValue: BigNumberish): string {\n  if (typeof hashValue === 'string') return hashValue;\n  return toHex(hashValue);\n}\n\n/**\n * [Reference](https://github.com/starkware-libs/cairo-lang/blob/fc97bdd8322a7df043c87c371634b26c15ed6cee/src/starkware/starknet/services/api/feeder_gateway/feeder_gateway_client.py#L156-L161)\n */\nexport function txIdentifier(txHash?: BigNumberish, txId?: BigNumberish): string {\n  if (!txHash) {\n    return `transactionId=${JSON.stringify(txId)}`;\n  }\n  const hashString = formatHash(txHash);\n\n  return `transactionHash=${hashString}`;\n}\n\nexport const validBlockTags = Object.values(BlockTag);\n\nexport class Block {\n  hash: BlockIdentifier = null;\n\n  number: BlockIdentifier = null;\n\n  tag: BlockIdentifier = null;\n\n  private setIdentifier(__identifier: BlockIdentifier) {\n    if (typeof __identifier === 'string' && isHex(__identifier)) {\n      this.hash = __identifier;\n    } else if (typeof __identifier === 'bigint') {\n      this.hash = toHex(__identifier);\n    } else if (typeof __identifier === 'number') {\n      this.number = __identifier;\n    } else if (\n      typeof __identifier === 'string' &&\n      validBlockTags.includes(__identifier as BlockTag)\n    ) {\n      this.tag = __identifier;\n    } else {\n      // default\n      this.tag = BlockTag.pending;\n    }\n  }\n\n  constructor(_identifier: BlockIdentifier) {\n    this.setIdentifier(_identifier);\n  }\n\n  // TODO: fix any\n  get queryIdentifier(): any {\n    if (this.number !== null) {\n      return `blockNumber=${this.number}`;\n    }\n\n    if (this.hash !== null) {\n      return `blockHash=${this.hash}`;\n    }\n\n    return `blockNumber=${this.tag}`;\n  }\n\n  // TODO: fix any\n  get identifier(): any {\n    if (this.number !== null) {\n      return { block_number: this.number };\n    }\n\n    if (this.hash !== null) {\n      return { block_hash: this.hash };\n    }\n\n    return this.tag;\n  }\n\n  set identifier(_identifier: BlockIdentifier) {\n    this.setIdentifier(_identifier);\n  }\n\n  valueOf = () => this.number;\n\n  toString = () => this.hash;\n\n  get sequencerIdentifier(): SequencerIdentifier {\n    return this.hash !== null\n      ? { blockHash: this.hash as string }\n      : { blockNumber: (this.number ?? this.tag) as BlockNumber };\n  }\n}\n","import {\n  HEX_STR_TRANSACTION_VERSION_1,\n  HEX_STR_TRANSACTION_VERSION_2,\n  NetworkName,\n  RPC_GOERLI_NODES,\n  RPC_MAINNET_NODES,\n  StarknetChainId,\n} from '../constants';\nimport {\n  AccountInvocationItem,\n  AccountInvocations,\n  BigNumberish,\n  BlockIdentifier,\n  BlockTag,\n  Call,\n  ContractVersion,\n  DeclareContractTransaction,\n  DeployAccountContractTransaction,\n  GetCodeResponse,\n  Invocation,\n  InvocationsDetailsWithNonce,\n  RPC,\n  RpcProviderOptions,\n  TransactionType,\n  getContractVersionOptions,\n  getEstimateFeeBulkOptions,\n  getSimulateTransactionOptions,\n  waitForTransactionOptions,\n} from '../types';\nimport { CallData } from '../utils/calldata';\nimport { getAbiContractVersion } from '../utils/calldata/cairo';\nimport { isSierra } from '../utils/contract';\nimport fetch from '../utils/fetchPonyfill';\nimport { getSelector, getSelectorFromName, getVersionsByType } from '../utils/hash';\nimport { stringify } from '../utils/json';\nimport { getHexStringArray, toHex, toStorageKey } from '../utils/num';\nimport { wait } from '../utils/provider';\nimport { RPCResponseParser } from '../utils/responseParser/rpc';\nimport { decompressProgram, signatureToHexArray } from '../utils/stark';\nimport { LibraryError } from './errors';\nimport { ProviderInterface } from './interface';\nimport { getAddressFromStarkName, getStarkName } from './starknetId';\nimport { Block } from './utils';\n\nexport const getDefaultNodeUrl = (networkName?: NetworkName, mute: boolean = false): string => {\n  if (!mute)\n    // eslint-disable-next-line no-console\n    console.warn('Using default public node url, please provide nodeUrl in provider options!');\n  const nodes = networkName === NetworkName.SN_MAIN ? RPC_MAINNET_NODES : RPC_GOERLI_NODES;\n  const randIdx = Math.floor(Math.random() * nodes.length);\n  return nodes[randIdx];\n};\n\nconst defaultOptions = {\n  headers: { 'Content-Type': 'application/json' },\n  blockIdentifier: BlockTag.pending,\n  retries: 200,\n};\n\nexport class RpcProvider implements ProviderInterface {\n  public nodeUrl: string;\n\n  public headers: object;\n\n  private responseParser = new RPCResponseParser();\n\n  private retries: number;\n\n  private blockIdentifier: BlockIdentifier;\n\n  private chainId?: StarknetChainId;\n\n  constructor(optionsOrProvider?: RpcProviderOptions) {\n    const { nodeUrl, retries, headers, blockIdentifier, chainId } = optionsOrProvider || {};\n    if (Object.values(NetworkName).includes(nodeUrl as NetworkName)) {\n      // Network name provided for nodeUrl\n      this.nodeUrl = getDefaultNodeUrl(nodeUrl as NetworkName, optionsOrProvider?.default);\n    } else if (nodeUrl) {\n      // NodeUrl provided\n      this.nodeUrl = nodeUrl;\n    } else {\n      // none provided fallback to default testnet\n      this.nodeUrl = getDefaultNodeUrl(undefined, optionsOrProvider?.default);\n    }\n    this.retries = retries || defaultOptions.retries;\n    this.headers = { ...defaultOptions.headers, ...headers };\n    this.blockIdentifier = blockIdentifier || defaultOptions.blockIdentifier;\n    this.chainId = chainId; // setting to a non-null value skips making a request in getChainId()\n  }\n\n  public fetch(method: string, params?: object, id: string | number = 0) {\n    const rpcRequestBody: RPC.JRPC.RequestBody = {\n      id,\n      jsonrpc: '2.0',\n      method,\n      ...(params && { params }),\n    };\n    return fetch(this.nodeUrl, {\n      method: 'POST',\n      body: stringify(rpcRequestBody),\n      headers: this.headers as Record<string, string>,\n    });\n  }\n\n  protected errorHandler(method: string, params: any, rpcError?: RPC.JRPC.Error, otherError?: any) {\n    if (rpcError) {\n      const { code, message, data } = rpcError;\n      throw new LibraryError(\n        `RPC: ${method} with params ${stringify(params)}\\n ${code}: ${message}: ${stringify(data)}`\n      );\n    }\n    if (otherError instanceof LibraryError) {\n      throw otherError;\n    }\n    if (otherError) {\n      throw Error(otherError.message);\n    }\n  }\n\n  protected async fetchEndpoint<T extends keyof RPC.Methods>(\n    method: T,\n    params?: RPC.Methods[T]['params']\n  ): Promise<RPC.Methods[T]['result']> {\n    try {\n      const rawResult = await this.fetch(method, params);\n      const { error, result } = await rawResult.json();\n      this.errorHandler(method, params, error);\n      return result as RPC.Methods[T]['result'];\n    } catch (error: any) {\n      this.errorHandler(method, params, error?.response?.data, error);\n      throw error;\n    }\n  }\n\n  public async getChainId() {\n    this.chainId ??= (await this.fetchEndpoint('starknet_chainId')) as StarknetChainId;\n    return this.chainId;\n  }\n\n  /**\n   * NEW: Returns the version of the Starknet JSON-RPC specification being used\n   */\n  public async getSpecVersion() {\n    return this.fetchEndpoint('starknet_specVersion');\n  }\n\n  public async getNonceForAddress(\n    contractAddress: BigNumberish,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getNonce', {\n      contract_address,\n      block_id,\n    });\n  }\n\n  /**\n   * @deprecated use getBlockWithTxHashes or getBlockWithTxs (will be removed on sequencer deprecation)\n   */\n  public async getBlock(blockIdentifier: BlockIdentifier = this.blockIdentifier) {\n    return this.getBlockWithTxHashes(blockIdentifier).then(\n      this.responseParser.parseGetBlockResponse\n    );\n  }\n\n  /**\n   * @deprecated renamed to getBlockLatestAccepted(); (will be removed in next minor version)\n   */\n  public getBlockHashAndNumber = this.getBlockLatestAccepted;\n\n  /**\n   * Get the most recent accepted block hash and number\n   */\n  public async getBlockLatestAccepted() {\n    return this.fetchEndpoint('starknet_blockHashAndNumber');\n  }\n\n  /**\n   * @deprecated redundant use getBlockLatestAccepted();\n   * Get the most recent accepted block number\n   * @returns Number of the latest block\n   */\n  public async getBlockNumber() {\n    return this.fetchEndpoint('starknet_blockNumber');\n  }\n\n  public async getBlockWithTxHashes(blockIdentifier: BlockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getBlockWithTxHashes', { block_id });\n  }\n\n  public async getBlockWithTxs(blockIdentifier: BlockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getBlockWithTxs', { block_id });\n  }\n\n  public async getBlockStateUpdate(blockIdentifier: BlockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getStateUpdate', { block_id });\n  }\n\n  /**\n   * @deprecated renamed to getBlockStateUpdate();\n   */\n  public getStateUpdate = this.getBlockStateUpdate;\n\n  public async getBlockTransactionsTraces(blockIdentifier: BlockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_traceBlockTransactions', { block_id });\n  }\n\n  /**\n   * Returns the execution traces of all transactions included in the given block\n   * @deprecated renamed to getBlockTransactionsTraces()\n   */\n  public traceBlockTransactions = this.getBlockTransactionsTraces;\n\n  public async getBlockTransactionCount(blockIdentifier: BlockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getBlockTransactionCount', { block_id });\n  }\n\n  /**\n   * Get the number of transactions in a block given a block id\n   * @deprecated renamed to getBlockTransactionCount()\n   * @returns Number of transactions\n   */\n  public getTransactionCount = this.getBlockTransactionCount;\n\n  /**\n   * Return transactions from pending block\n   * @deprecated Instead use getBlock(BlockTag.pending); (will be removed in next minor version)\n   */\n  public async getPendingTransactions() {\n    const { transactions } = await this.getBlock(BlockTag.pending);\n    return Promise.all(transactions.map((it) => this.getTransactionByHash(it)));\n  }\n\n  /**\n   * @deprecated use getTransactionByHash or getTransactionByBlockIdAndIndex (will be removed on sequencer deprecation)\n   */\n  public async getTransaction(txHash: BigNumberish) {\n    return this.getTransactionByHash(txHash).then(this.responseParser.parseGetTransactionResponse);\n  }\n\n  public async getTransactionByHash(txHash: BigNumberish) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint('starknet_getTransactionByHash', {\n      transaction_hash,\n    });\n  }\n\n  public async getTransactionByBlockIdAndIndex(blockIdentifier: BlockIdentifier, index: number) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getTransactionByBlockIdAndIndex', { block_id, index });\n  }\n\n  public async getTransactionReceipt(txHash: BigNumberish) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint('starknet_getTransactionReceipt', { transaction_hash });\n  }\n\n  public async getTransactionTrace(txHash: BigNumberish) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint('starknet_traceTransaction', { transaction_hash });\n  }\n\n  /**\n   * @deprecated renamed to getTransactionTrace();\n   * For a given executed transaction, return the trace of its execution, including internal calls\n   */\n  public traceTransaction = this.getTransactionTrace;\n\n  /**\n   * NEW: Get the status of a transaction\n   */\n  public async getTransactionStatus(transactionHash: BigNumberish) {\n    const transaction_hash = toHex(transactionHash);\n    return this.fetchEndpoint('starknet_getTransactionStatus', { transaction_hash });\n  }\n\n  /**\n   * @deprecated renamed to simulateTransaction();\n   */\n  public getSimulateTransaction = this.simulateTransaction;\n\n  /**\n   * @param invocations AccountInvocations\n   * @param simulateTransactionOptions blockIdentifier and flags to skip validation and fee charge<br/>\n   * - blockIdentifier<br/>\n   * - skipValidate (default false)<br/>\n   * - skipFeeCharge (default true)<br/>\n   */\n  public async simulateTransaction(\n    invocations: AccountInvocations,\n    {\n      blockIdentifier = this.blockIdentifier,\n      skipValidate = false,\n      skipFeeCharge = true,\n    }: getSimulateTransactionOptions\n  ) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const simulationFlags = [];\n    if (skipValidate) simulationFlags.push(RPC.ESimulationFlag.SKIP_VALIDATE);\n    if (skipFeeCharge) simulationFlags.push(RPC.ESimulationFlag.SKIP_FEE_CHARGE);\n\n    return this.fetchEndpoint('starknet_simulateTransactions', {\n      block_id,\n      transactions: invocations.map((it) => this.buildTransaction(it)),\n      simulation_flags: simulationFlags,\n    }).then(this.responseParser.parseSimulateTransactionResponse);\n  }\n\n  public async waitForTransaction(txHash: BigNumberish, options?: waitForTransactionOptions) {\n    const transactionHash = toHex(txHash);\n    let { retries } = this;\n    let onchain = false;\n    let isErrorState = false;\n    const retryInterval = options?.retryInterval ?? 5000;\n    const errorStates: any = options?.errorStates ?? [\n      RPC.ETransactionStatus.REJECTED,\n      RPC.ETransactionExecutionStatus.REVERTED,\n    ];\n    const successStates: any = options?.successStates ?? [\n      RPC.ETransactionExecutionStatus.SUCCEEDED,\n      RPC.ETransactionStatus.ACCEPTED_ON_L2,\n      RPC.ETransactionStatus.ACCEPTED_ON_L1,\n    ];\n\n    let txStatus: RPC.TransactionStatus;\n    while (!onchain) {\n      // eslint-disable-next-line no-await-in-loop\n      await wait(retryInterval);\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        txStatus = await this.getTransactionStatus(transactionHash);\n\n        const executionStatus = txStatus.execution_status;\n        const finalityStatus = txStatus.finality_status;\n\n        if (!finalityStatus) {\n          // Transaction is potentially NOT_RECEIVED or RPC not Synced yet\n          // so we will retry '{ retries }' times\n          const error = new Error('waiting for transaction status');\n          throw error;\n        }\n\n        if (successStates.includes(executionStatus) || successStates.includes(finalityStatus)) {\n          onchain = true;\n        } else if (errorStates.includes(executionStatus) || errorStates.includes(finalityStatus)) {\n          const message = `${executionStatus}: ${finalityStatus}`;\n          const error = new Error(message) as Error & { response: RPC.TransactionStatus };\n          error.response = txStatus;\n          isErrorState = true;\n          throw error;\n        }\n      } catch (error) {\n        if (error instanceof Error && isErrorState) {\n          throw error;\n        }\n\n        if (retries <= 0) {\n          throw new Error(`waitForTransaction timed-out with retries ${this.retries}`);\n        }\n      }\n\n      retries -= 1;\n    }\n\n    /**\n     * For some nodes even though the transaction has executionStatus SUCCEEDED finalityStatus ACCEPTED_ON_L2, getTransactionReceipt returns \"Transaction hash not found\"\n     * Retry until rpc is actually ready to work with txHash\n     */\n    let txReceipt = null;\n    while (txReceipt === null) {\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        txReceipt = await this.getTransactionReceipt(transactionHash);\n      } catch (error) {\n        if (retries <= 0) {\n          throw new Error(`waitForTransaction timed-out with retries ${this.retries}`);\n        }\n      }\n      retries -= 1;\n      // eslint-disable-next-line no-await-in-loop\n      await wait(retryInterval);\n    }\n    return txReceipt as RPC.TransactionReceipt;\n  }\n\n  public async getStorageAt(\n    contractAddress: BigNumberish,\n    key: BigNumberish,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    const contract_address = toHex(contractAddress);\n    const parsedKey = toStorageKey(key);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getStorageAt', {\n      contract_address,\n      key: parsedKey,\n      block_id,\n    });\n  }\n\n  public async getClassHashAt(\n    contractAddress: BigNumberish,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getClassHashAt', {\n      block_id,\n      contract_address,\n    });\n  }\n\n  public async getClassByHash(classHash: BigNumberish) {\n    return this.getClass(classHash);\n  }\n\n  public async getClass(\n    classHash: BigNumberish,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    const class_hash = toHex(classHash);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getClass', {\n      class_hash,\n      block_id,\n    }).then(this.responseParser.parseContractClassResponse);\n  }\n\n  public async getClassAt(\n    contractAddress: BigNumberish,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_getClassAt', {\n      block_id,\n      contract_address,\n    }).then(this.responseParser.parseContractClassResponse);\n  }\n\n  public async getCode(\n    _contractAddress: string,\n    _blockIdentifier?: BlockIdentifier\n  ): Promise<GetCodeResponse> {\n    throw new Error('RPC does not implement getCode function');\n  }\n\n  public async getContractVersion(\n    contractAddress: BigNumberish,\n    classHash?: undefined,\n    options?: getContractVersionOptions\n  ): Promise<ContractVersion>;\n  public async getContractVersion(\n    contractAddress: undefined,\n    classHash: BigNumberish,\n    options?: getContractVersionOptions\n  ): Promise<ContractVersion>;\n\n  public async getContractVersion(\n    contractAddress?: BigNumberish,\n    classHash?: BigNumberish,\n    { blockIdentifier = this.blockIdentifier, compiler = true }: getContractVersionOptions = {}\n  ): Promise<ContractVersion> {\n    let contractClass;\n    if (contractAddress) {\n      contractClass = await this.getClassAt(contractAddress, blockIdentifier);\n    } else if (classHash) {\n      contractClass = await this.getClass(classHash, blockIdentifier);\n    } else {\n      throw Error('getContractVersion require contractAddress or classHash');\n    }\n\n    if (isSierra(contractClass)) {\n      if (compiler) {\n        const abiTest = getAbiContractVersion(contractClass.abi);\n        return { cairo: '1', compiler: abiTest.compiler };\n      }\n      return { cairo: '1', compiler: undefined };\n    }\n    return { cairo: '0', compiler: '0' };\n  }\n\n  /**\n   * @deprecated use get*type*EstimateFee (will be refactored based on type after sequencer deprecation)\n   */\n  public async getEstimateFee(\n    invocation: Invocation,\n    invocationDetails: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    return this.getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier);\n  }\n\n  public async getInvokeEstimateFee(\n    invocation: Invocation,\n    invocationDetails: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const transaction = this.buildTransaction(\n      {\n        type: TransactionType.INVOKE,\n        ...invocation,\n        ...invocationDetails,\n      },\n      'fee'\n    );\n    return this.fetchEndpoint('starknet_estimateFee', {\n      request: [transaction],\n      block_id,\n    }).then(this.responseParser.parseFeeEstimateResponse);\n  }\n\n  public async getDeclareEstimateFee(\n    invocation: DeclareContractTransaction,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const transaction = this.buildTransaction(\n      {\n        type: TransactionType.DECLARE,\n        ...invocation,\n        ...details,\n      },\n      'fee'\n    );\n    return this.fetchEndpoint('starknet_estimateFee', {\n      request: [transaction],\n      block_id,\n    }).then(this.responseParser.parseFeeEstimateResponse);\n  }\n\n  public async getDeployAccountEstimateFee(\n    invocation: DeployAccountContractTransaction,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const transaction = this.buildTransaction(\n      {\n        type: TransactionType.DEPLOY_ACCOUNT,\n        ...invocation,\n        ...details,\n      },\n      'fee'\n    );\n    return this.fetchEndpoint('starknet_estimateFee', {\n      request: [transaction],\n      block_id,\n    }).then(this.responseParser.parseFeeEstimateResponse);\n  }\n\n  public async getEstimateFeeBulk(\n    invocations: AccountInvocations,\n    { blockIdentifier = this.blockIdentifier, skipValidate = false }: getEstimateFeeBulkOptions\n  ) {\n    if (skipValidate) {\n      // eslint-disable-next-line no-console\n      console.warn('getEstimateFeeBulk RPC does not support skipValidate');\n    }\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_estimateFee', {\n      request: invocations.map((it) => this.buildTransaction(it, 'fee')),\n      block_id,\n    }).then(this.responseParser.parseFeeEstimateBulkResponse);\n  }\n\n  public async invokeFunction(\n    functionInvocation: Invocation,\n    details: InvocationsDetailsWithNonce\n  ) {\n    return this.fetchEndpoint('starknet_addInvokeTransaction', {\n      invoke_transaction: {\n        sender_address: functionInvocation.contractAddress,\n        calldata: CallData.toHex(functionInvocation.calldata),\n        type: RPC.ETransactionType.INVOKE,\n        max_fee: toHex(details.maxFee || 0),\n        version: '0x1',\n        signature: signatureToHexArray(functionInvocation.signature),\n        nonce: toHex(details.nonce),\n      },\n    });\n  }\n\n  public async declareContract(\n    { contract, signature, senderAddress, compiledClassHash }: DeclareContractTransaction,\n    details: InvocationsDetailsWithNonce\n  ) {\n    if (!isSierra(contract)) {\n      return this.fetchEndpoint('starknet_addDeclareTransaction', {\n        declare_transaction: {\n          type: RPC.ETransactionType.DECLARE,\n          contract_class: {\n            program: contract.program,\n            entry_points_by_type: contract.entry_points_by_type,\n            abi: contract.abi,\n          },\n          version: HEX_STR_TRANSACTION_VERSION_1,\n          max_fee: toHex(details.maxFee || 0),\n          signature: signatureToHexArray(signature),\n          sender_address: senderAddress,\n          nonce: toHex(details.nonce),\n        },\n      });\n    }\n    return this.fetchEndpoint('starknet_addDeclareTransaction', {\n      declare_transaction: {\n        type: RPC.ETransactionType.DECLARE,\n        contract_class: {\n          sierra_program: decompressProgram(contract.sierra_program),\n          contract_class_version: contract.contract_class_version,\n          entry_points_by_type: contract.entry_points_by_type,\n          abi: contract.abi,\n        },\n        compiled_class_hash: compiledClassHash || '',\n        version: HEX_STR_TRANSACTION_VERSION_2,\n        max_fee: toHex(details.maxFee || 0),\n        signature: signatureToHexArray(signature),\n        sender_address: senderAddress,\n        nonce: toHex(details.nonce),\n      },\n    });\n  }\n\n  public async deployAccountContract(\n    { classHash, constructorCalldata, addressSalt, signature }: DeployAccountContractTransaction,\n    details: InvocationsDetailsWithNonce\n  ) {\n    return this.fetchEndpoint('starknet_addDeployAccountTransaction', {\n      deploy_account_transaction: {\n        constructor_calldata: CallData.toHex(constructorCalldata || []),\n        class_hash: toHex(classHash),\n        contract_address_salt: toHex(addressSalt || 0),\n        type: RPC.ETransactionType.DEPLOY_ACCOUNT,\n        max_fee: toHex(details.maxFee || 0),\n        version: toHex(details.version || 0),\n        signature: signatureToHexArray(signature),\n        nonce: toHex(details.nonce),\n      },\n    });\n  }\n\n  public async callContract(call: Call, blockIdentifier: BlockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const result = await this.fetchEndpoint('starknet_call', {\n      request: {\n        contract_address: call.contractAddress,\n        entry_point_selector: getSelectorFromName(call.entrypoint),\n        calldata: CallData.toHex(call.calldata),\n      },\n      block_id,\n    });\n\n    return this.responseParser.parseCallContractResponse(result);\n  }\n\n  /**\n   * NEW: Estimate the fee for a message from L1\n   * @param message Message From L1\n   */\n  public async estimateMessageFee(\n    message: RPC.L1Message,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ) {\n    const { from_address, to_address, entry_point_selector, payload } = message;\n    const formattedMessage = {\n      from_address: toHex(from_address),\n      to_address: toHex(to_address),\n      entry_point_selector: getSelector(entry_point_selector),\n      payload: getHexStringArray(payload),\n    };\n\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint('starknet_estimateMessageFee', {\n      message: formattedMessage,\n      block_id,\n    });\n  }\n\n  /**\n   * Returns an object about the sync status, or false if the node is not synching\n   * @returns Object with the stats data\n   */\n  public async getSyncingStats() {\n    return this.fetchEndpoint('starknet_syncing');\n  }\n\n  /**\n   * Returns all events matching the given filter\n   * @returns events and the pagination of the events\n   */\n  public async getEvents(eventFilter: RPC.EventFilter) {\n    return this.fetchEndpoint('starknet_getEvents', { filter: eventFilter });\n  }\n\n  /**\n   * StarknetId Endpoint (get name from address)\n   */\n  public async getStarkName(address: BigNumberish, StarknetIdContract?: string) {\n    return getStarkName(this, address, StarknetIdContract);\n  }\n\n  /**\n   * StarknetId Endpoint (get address from name)\n   */\n  public async getAddressFromStarkName(name: string, StarknetIdContract?: string) {\n    return getAddressFromStarkName(this, name, StarknetIdContract);\n  }\n\n  public buildTransaction(\n    invocation: AccountInvocationItem,\n    versionType?: 'fee' | 'transaction'\n  ): RPC.BaseTransaction {\n    const defaultVersions = getVersionsByType(versionType);\n    const details = {\n      signature: signatureToHexArray(invocation.signature),\n      nonce: toHex(invocation.nonce),\n      max_fee: toHex(invocation.maxFee || 0),\n    };\n\n    if (invocation.type === TransactionType.INVOKE) {\n      return {\n        type: RPC.ETransactionType.INVOKE, // Diff between sequencer and rpc invoke type\n        sender_address: invocation.contractAddress,\n        calldata: CallData.toHex(invocation.calldata),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details,\n      };\n    }\n    if (invocation.type === TransactionType.DECLARE) {\n      if (!isSierra(invocation.contract)) {\n        return {\n          type: invocation.type,\n          contract_class: invocation.contract,\n          sender_address: invocation.senderAddress,\n          version: toHex(invocation.version || defaultVersions.v1),\n          ...details,\n        };\n      }\n      return {\n        // compiled_class_hash\n        type: invocation.type,\n        contract_class: {\n          ...invocation.contract,\n          sierra_program: decompressProgram(invocation.contract.sierra_program),\n        },\n        compiled_class_hash: invocation.compiledClassHash || '',\n        sender_address: invocation.senderAddress,\n        version: toHex(invocation.version || defaultVersions.v2),\n        ...details,\n      };\n    }\n    if (invocation.type === TransactionType.DEPLOY_ACCOUNT) {\n      return {\n        type: invocation.type,\n        constructor_calldata: CallData.toHex(invocation.constructorCalldata || []),\n        class_hash: toHex(invocation.classHash),\n        contract_address_salt: toHex(invocation.addressSalt || 0),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details,\n      };\n    }\n    throw Error('RPC buildTransaction received unknown TransactionType');\n  }\n}\n","import urljoin from 'url-join';\n\nimport { BaseUrl, NetworkName, StarknetChainId } from '../constants';\nimport {\n  AccountInvocationItem,\n  AccountInvocations,\n  BigNumberish,\n  BlockIdentifier,\n  BlockTag,\n  CairoAssembly,\n  Call,\n  CallContractResponse,\n  CallL1Handler,\n  ContractClassResponse,\n  ContractVersion,\n  DeclareContractResponse,\n  DeclareContractTransaction,\n  DeployAccountContractTransaction,\n  DeployContractResponse,\n  EstimateFeeResponse,\n  EstimateFeeResponseBulk,\n  GetBlockResponse,\n  GetContractAddressesResponse,\n  GetTransactionReceiptResponse,\n  GetTransactionResponse,\n  GetTransactionStatusResponse,\n  Invocation,\n  InvocationsDetailsWithNonce,\n  InvokeFunctionResponse,\n  Sequencer,\n  SequencerHttpMethod,\n  SequencerProviderOptions,\n  SimulateTransactionResponse,\n  StateUpdateResponse,\n  TransactionExecutionStatus,\n  TransactionFinalityStatus,\n  TransactionType,\n  getContractVersionOptions,\n  getEstimateFeeBulkOptions,\n  getSimulateTransactionOptions,\n  waitForTransactionOptions,\n} from '../types';\nimport { CallData } from '../utils/calldata';\nimport { getAbiContractVersion } from '../utils/calldata/cairo';\nimport { isSierra } from '../utils/contract';\nimport fetch from '../utils/fetchPonyfill';\nimport {\n  getSelector,\n  getSelectorFromName,\n  getVersionsByType,\n  transactionVersion,\n  transactionVersion_2,\n} from '../utils/hash';\nimport { parse, parseAlwaysAsBig, stringify } from '../utils/json';\nimport { getDecimalString, getHexString, getHexStringArray, toBigInt, toHex } from '../utils/num';\nimport { wait } from '../utils/provider';\nimport { SequencerAPIResponseParser } from '../utils/responseParser/sequencer';\nimport { randomAddress, signatureToDecimalArray } from '../utils/stark';\nimport { buildUrl } from '../utils/url';\nimport { GatewayError, HttpError, LibraryError } from './errors';\nimport { ProviderInterface } from './interface';\nimport { getAddressFromStarkName, getStarkName } from './starknetId';\nimport { Block } from './utils';\n\nfunction isEmptyQueryObject(obj?: Record<any, any>): obj is undefined {\n  return (\n    obj === undefined ||\n    Object.keys(obj).length === 0 ||\n    (Object.keys(obj).length === 1 &&\n      Object.entries(obj).every(([k, v]) => k === 'blockIdentifier' && v === null))\n  );\n}\n\nconst defaultOptions = {\n  network: NetworkName.SN_GOERLI,\n  blockIdentifier: BlockTag.pending,\n};\n/**\n * @deprecated Feeder gateway will be removed during November 2023, as Network is switching to P2P Nodes.\n * Use RPC Provider or Default provider (Default provider will be RPC Provider with public nodes and legacy interface/response)\n */\nexport class SequencerProvider implements ProviderInterface {\n  public baseUrl: string;\n\n  public feederGatewayUrl: string;\n\n  public gatewayUrl: string;\n\n  public headers?: Record<string, string>;\n\n  private blockIdentifier: BlockIdentifier;\n\n  private chainId: StarknetChainId;\n\n  private responseParser = new SequencerAPIResponseParser();\n\n  constructor(optionsOrProvider: SequencerProviderOptions = defaultOptions) {\n    if ('network' in optionsOrProvider) {\n      this.baseUrl = SequencerProvider.getNetworkFromName(optionsOrProvider.network);\n      this.feederGatewayUrl = buildUrl(this.baseUrl, 'feeder_gateway');\n      this.gatewayUrl = buildUrl(this.baseUrl, 'gateway');\n    } else {\n      this.baseUrl = optionsOrProvider.baseUrl;\n      this.feederGatewayUrl = buildUrl(\n        this.baseUrl,\n        'feeder_gateway',\n        optionsOrProvider.feederGatewayUrl\n      );\n      this.gatewayUrl = buildUrl(this.baseUrl, 'gateway', optionsOrProvider.gatewayUrl);\n    }\n    this.chainId =\n      optionsOrProvider?.chainId ?? SequencerProvider.getChainIdFromBaseUrl(this.baseUrl);\n    this.headers = optionsOrProvider.headers;\n    this.blockIdentifier = optionsOrProvider?.blockIdentifier || defaultOptions.blockIdentifier;\n  }\n\n  protected static getNetworkFromName(name: NetworkName | StarknetChainId) {\n    switch (name) {\n      case NetworkName.SN_MAIN:\n      case StarknetChainId.SN_MAIN:\n        return BaseUrl.SN_MAIN;\n      case NetworkName.SN_GOERLI:\n      case StarknetChainId.SN_GOERLI:\n        return BaseUrl.SN_GOERLI;\n      default:\n        throw new Error('Could not detect base url from NetworkName');\n    }\n  }\n\n  protected static getChainIdFromBaseUrl(baseUrl: string): StarknetChainId {\n    try {\n      const url = new URL(baseUrl);\n      if (url.host.includes('mainnet.starknet.io')) {\n        return StarknetChainId.SN_MAIN;\n      }\n      return StarknetChainId.SN_GOERLI;\n    } catch {\n      // eslint-disable-next-line no-console\n      console.error(`Could not parse baseUrl: ${baseUrl}`);\n      return StarknetChainId.SN_GOERLI;\n    }\n  }\n\n  private getFetchUrl(endpoint: keyof Sequencer.Endpoints) {\n    const gatewayUrlEndpoints = ['add_transaction'];\n    return gatewayUrlEndpoints.includes(endpoint) ? this.gatewayUrl : this.feederGatewayUrl;\n  }\n\n  private getFetchMethod(endpoint: keyof Sequencer.Endpoints) {\n    const postMethodEndpoints = [\n      'add_transaction',\n      'call_contract',\n      'estimate_fee',\n      'estimate_message_fee',\n      'estimate_fee_bulk',\n      'simulate_transaction',\n    ];\n\n    return postMethodEndpoints.includes(endpoint) ? 'POST' : 'GET';\n  }\n\n  private getQueryString(query?: Record<string, any>): string {\n    if (isEmptyQueryObject(query)) {\n      return '';\n    }\n    const queryString = Object.entries(query)\n      .map(([key, value]) => {\n        if (key === 'blockIdentifier') {\n          const block = new Block(value);\n          return `${block.queryIdentifier}`;\n        }\n        return `${key}=${value}`;\n      })\n      .join('&');\n\n    return `?${queryString}`;\n  }\n\n  private getHeaders(method: SequencerHttpMethod): Record<string, string> | undefined {\n    if (method === 'POST') {\n      return {\n        'Content-Type': 'application/json',\n        ...this.headers,\n      };\n    }\n    return this.headers;\n  }\n\n  // typesafe fetch\n  protected async fetchEndpoint<T extends keyof Sequencer.Endpoints>(\n    endpoint: T,\n    // typescript type magic to create a nice fitting function interface\n    ...[query, request]: Sequencer.Endpoints[T]['QUERY'] extends never\n      ? Sequencer.Endpoints[T]['REQUEST'] extends never\n        ? [] // when no query and no request is needed, we can omit the query and request parameters\n        : [undefined, Sequencer.Endpoints[T]['REQUEST']]\n      : Sequencer.Endpoints[T]['REQUEST'] extends never\n      ? [Sequencer.Endpoints[T]['QUERY']] // when no request is needed, we can omit the request parameter\n      : [Sequencer.Endpoints[T]['QUERY'], Sequencer.Endpoints[T]['REQUEST']] // when both query and request are needed, we cant omit anything\n  ): Promise<Sequencer.Endpoints[T]['RESPONSE']> {\n    const baseUrl = this.getFetchUrl(endpoint);\n    const method = this.getFetchMethod(endpoint);\n    const queryString = this.getQueryString(query);\n    const url = urljoin(baseUrl, endpoint, queryString);\n\n    return this.fetch(url, {\n      method,\n      body: request,\n    });\n  }\n\n  public async fetch(\n    endpoint: string,\n    options?: {\n      method?: SequencerHttpMethod;\n      body?: any;\n      parseAlwaysAsBigInt?: boolean;\n    }\n  ): Promise<any> {\n    const url = buildUrl(this.baseUrl, '', endpoint);\n    const method = options?.method ?? 'GET';\n    const headers = this.getHeaders(method);\n    const body = stringify(options?.body);\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers,\n      });\n      const textResponse = await response.text();\n\n      if (!response.ok) {\n        // This will allow the user to handle contract errors\n        let responseBody: any;\n        try {\n          responseBody = parse(textResponse);\n        } catch {\n          throw new HttpError(response.statusText, response.status);\n        }\n        throw new GatewayError(responseBody.message, responseBody.code);\n      }\n\n      const parseChoice = options?.parseAlwaysAsBigInt ? parseAlwaysAsBig : parse;\n      return parseChoice(textResponse);\n    } catch (error) {\n      if (error instanceof Error && !(error instanceof LibraryError))\n        throw Error(`Could not ${method} from endpoint \\`${url}\\`: ${error.message}`);\n\n      throw error;\n    }\n  }\n\n  public async getChainId(): Promise<StarknetChainId> {\n    return Promise.resolve(this.chainId);\n  }\n\n  public async callContract(\n    { contractAddress, entrypoint: entryPointSelector, calldata = [] }: Call,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<CallContractResponse> {\n    return this.fetchEndpoint(\n      'call_contract',\n      { blockIdentifier },\n      {\n        // TODO - determine best choice once both are fully supported in devnet\n        // signature: [],\n        // sender_address: contractAddress,\n        contract_address: contractAddress,\n        entry_point_selector: getSelectorFromName(entryPointSelector),\n        calldata: CallData.compile(calldata),\n      }\n    ).then(this.responseParser.parseCallContractResponse);\n  }\n\n  public async getBlock(\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<GetBlockResponse> {\n    return this.fetchEndpoint('get_block', { blockIdentifier }).then(\n      this.responseParser.parseGetBlockResponse\n    );\n  }\n\n  public async getNonceForAddress(\n    contractAddress: string,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<Sequencer.Nonce> {\n    return this.fetchEndpoint('get_nonce', { contractAddress, blockIdentifier });\n  }\n\n  public async getStorageAt(\n    contractAddress: string,\n    key: BigNumberish,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<Sequencer.Storage> {\n    const parsedKey = toBigInt(key).toString(10);\n    return this.fetchEndpoint('get_storage_at', {\n      blockIdentifier,\n      contractAddress,\n      key: parsedKey,\n    });\n  }\n\n  public async getTransaction(txHash: BigNumberish): Promise<GetTransactionResponse> {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint('get_transaction', { transactionHash: txHashHex }).then((result) => {\n      // throw for no matching transaction to unify behavior with RPC and avoid parsing errors\n      if (Object.values(result).length === 1) throw new LibraryError(result.status);\n      return this.responseParser.parseGetTransactionResponse(result);\n    });\n  }\n\n  public async getTransactionReceipt(txHash: BigNumberish): Promise<GetTransactionReceiptResponse> {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint('get_transaction_receipt', { transactionHash: txHashHex }).then(\n      this.responseParser.parseGetTransactionReceiptResponse\n    );\n  }\n\n  public async getClassAt(\n    contractAddress: string,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<ContractClassResponse> {\n    return this.fetchEndpoint('get_full_contract', { blockIdentifier, contractAddress }).then(\n      this.responseParser.parseContractClassResponse\n    );\n  }\n\n  public async getClassHashAt(\n    contractAddress: string,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<string> {\n    return this.fetchEndpoint('get_class_hash_at', { blockIdentifier, contractAddress });\n  }\n\n  public async getClassByHash(\n    classHash: string,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<ContractClassResponse> {\n    return this.fetchEndpoint('get_class_by_hash', { classHash, blockIdentifier }).then(\n      this.responseParser.parseContractClassResponse\n    );\n  }\n\n  public async getCompiledClassByClassHash(\n    classHash: string,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<CairoAssembly> {\n    return this.fetchEndpoint('get_compiled_class_by_class_hash', { classHash, blockIdentifier });\n  }\n\n  public async getContractVersion(\n    contractAddress: string,\n    classHash?: undefined,\n    options?: getContractVersionOptions\n  ): Promise<ContractVersion>;\n  public async getContractVersion(\n    contractAddress: undefined,\n    classHash: string,\n    options?: getContractVersionOptions\n  ): Promise<ContractVersion>;\n\n  public async getContractVersion(\n    contractAddress?: string,\n    classHash?: string,\n    { blockIdentifier = this.blockIdentifier, compiler = true }: getContractVersionOptions = {}\n  ): Promise<ContractVersion> {\n    let contractClass;\n    if (contractAddress) {\n      contractClass = await this.getClassAt(contractAddress, blockIdentifier);\n    } else if (classHash) {\n      contractClass = await this.getClassByHash(classHash, blockIdentifier);\n    } else {\n      throw Error('getContractVersion require contractAddress or classHash');\n    }\n\n    if (isSierra(contractClass)) {\n      if (compiler) {\n        const abiTest = getAbiContractVersion(contractClass.abi);\n        return { cairo: '1', compiler: abiTest.compiler };\n      }\n      return { cairo: '1', compiler: undefined };\n    }\n    return { cairo: '0', compiler: '0' };\n  }\n\n  public async invokeFunction(\n    functionInvocation: Invocation,\n    details: InvocationsDetailsWithNonce\n  ): Promise<InvokeFunctionResponse> {\n    return this.fetchEndpoint('add_transaction', undefined, {\n      type: TransactionType.INVOKE,\n      sender_address: functionInvocation.contractAddress,\n      calldata: CallData.compile(functionInvocation.calldata ?? []),\n      signature: signatureToDecimalArray(functionInvocation.signature),\n      nonce: toHex(details.nonce),\n      max_fee: toHex(details.maxFee || 0),\n      version: '0x1',\n    }).then(this.responseParser.parseInvokeFunctionResponse);\n  }\n\n  public async deployAccountContract(\n    { classHash, constructorCalldata, addressSalt, signature }: DeployAccountContractTransaction,\n    details: InvocationsDetailsWithNonce\n  ): Promise<DeployContractResponse> {\n    return this.fetchEndpoint('add_transaction', undefined, {\n      type: TransactionType.DEPLOY_ACCOUNT,\n      contract_address_salt: addressSalt ?? randomAddress(),\n      constructor_calldata: CallData.compile(constructorCalldata ?? []),\n      class_hash: toHex(classHash),\n      max_fee: toHex(details.maxFee || 0),\n      version: toHex(details.version || 0),\n      nonce: toHex(details.nonce),\n      signature: signatureToDecimalArray(signature),\n    }).then(this.responseParser.parseDeployContractResponse);\n  }\n\n  public async declareContract(\n    { senderAddress, contract, signature, compiledClassHash }: DeclareContractTransaction,\n    details: InvocationsDetailsWithNonce\n  ): Promise<DeclareContractResponse> {\n    if (!isSierra(contract)) {\n      return this.fetchEndpoint('add_transaction', undefined, {\n        type: TransactionType.DECLARE,\n        contract_class: contract,\n        nonce: toHex(details.nonce),\n        signature: signatureToDecimalArray(signature),\n        sender_address: senderAddress,\n        max_fee: toHex(details.maxFee || 0),\n        version: toHex(transactionVersion),\n      }).then(this.responseParser.parseDeclareContractResponse);\n    }\n    // Cairo 1\n    return this.fetchEndpoint('add_transaction', undefined, {\n      type: TransactionType.DECLARE,\n      sender_address: senderAddress,\n      compiled_class_hash: compiledClassHash,\n      contract_class: contract,\n      nonce: toHex(details.nonce),\n      signature: signatureToDecimalArray(signature),\n      max_fee: toHex(details.maxFee || 0),\n      version: toHex(transactionVersion_2),\n    }).then(this.responseParser.parseDeclareContractResponse);\n  }\n\n  public async getEstimateFee(\n    invocation: Invocation,\n    invocationDetails: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier,\n    skipValidate: boolean = false\n  ): Promise<EstimateFeeResponse> {\n    return this.getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier, skipValidate);\n  }\n\n  public async getInvokeEstimateFee(\n    invocation: Invocation,\n    invocationDetails: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier,\n    skipValidate: boolean = false\n  ): Promise<EstimateFeeResponse> {\n    const transaction = this.buildTransaction(\n      {\n        type: TransactionType.INVOKE,\n        ...invocation,\n        ...invocationDetails,\n      },\n      'fee'\n    );\n    return this.fetchEndpoint('estimate_fee', { blockIdentifier, skipValidate }, transaction).then(\n      this.responseParser.parseFeeEstimateResponse\n    );\n  }\n\n  public async getDeclareEstimateFee(\n    invocation: DeclareContractTransaction,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier,\n    skipValidate: boolean = false\n  ): Promise<EstimateFeeResponse> {\n    const transaction = this.buildTransaction(\n      {\n        type: TransactionType.DECLARE,\n        ...invocation,\n        ...details,\n      },\n      'fee'\n    );\n    return this.fetchEndpoint('estimate_fee', { blockIdentifier, skipValidate }, transaction).then(\n      this.responseParser.parseFeeEstimateResponse\n    );\n  }\n\n  public async getDeployAccountEstimateFee(\n    invocation: DeployAccountContractTransaction,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier,\n    skipValidate: boolean = false\n  ): Promise<EstimateFeeResponse> {\n    const transaction = this.buildTransaction(\n      {\n        type: TransactionType.DEPLOY_ACCOUNT,\n        ...invocation,\n        ...details,\n      },\n      'fee'\n    );\n    return this.fetchEndpoint('estimate_fee', { blockIdentifier, skipValidate }, transaction).then(\n      this.responseParser.parseFeeEstimateResponse\n    );\n  }\n\n  public async getEstimateFeeBulk(\n    invocations: AccountInvocations,\n    { blockIdentifier = this.blockIdentifier, skipValidate = false }: getEstimateFeeBulkOptions\n  ): Promise<EstimateFeeResponseBulk> {\n    const transactions = invocations.map((it) => this.buildTransaction(it, 'fee'));\n    return this.fetchEndpoint(\n      'estimate_fee_bulk',\n      { blockIdentifier, skipValidate },\n      transactions\n    ).then(this.responseParser.parseFeeEstimateBulkResponse);\n  }\n\n  public async getCode(\n    contractAddress: string,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<Sequencer.GetCodeResponse> {\n    return this.fetchEndpoint('get_code', { contractAddress, blockIdentifier });\n  }\n\n  public async waitForTransaction(txHash: BigNumberish, options?: waitForTransactionOptions) {\n    let res;\n    let completed = false;\n    let retries = 0;\n    const retryInterval = options?.retryInterval ?? 5000;\n    const errorStates = options?.errorStates ?? [\n      TransactionExecutionStatus.REJECTED,\n      TransactionFinalityStatus.NOT_RECEIVED,\n      TransactionExecutionStatus.REVERTED,\n    ];\n    const successStates = options?.successStates ?? [\n      TransactionExecutionStatus.SUCCEEDED,\n      TransactionFinalityStatus.ACCEPTED_ON_L1,\n      TransactionFinalityStatus.ACCEPTED_ON_L2,\n    ];\n\n    while (!completed) {\n      // eslint-disable-next-line no-await-in-loop\n      await wait(retryInterval);\n      // eslint-disable-next-line no-await-in-loop\n      res = await this.getTransactionStatus(txHash);\n\n      if (TransactionFinalityStatus.NOT_RECEIVED === res.finality_status && retries < 3) {\n        retries += 1;\n      } else if (\n        successStates.includes(res.finality_status) ||\n        successStates.includes(res.execution_status)\n      ) {\n        completed = true;\n      } else if (\n        errorStates.includes(res.finality_status) ||\n        errorStates.includes(res.execution_status)\n      ) {\n        let message;\n        if (res.tx_failure_reason) {\n          message = `${res.tx_status}: ${res.tx_failure_reason.code}\\n${res.tx_failure_reason.error_message}`;\n        } else if (res.tx_revert_reason) {\n          message = `${res.tx_status}: ${res.tx_revert_reason}`;\n        } else {\n          message = res.tx_status;\n        }\n        const error = new Error(message) as Error & { response: GetTransactionStatusResponse };\n        error.response = res;\n        throw error;\n      }\n    }\n    const txReceipt = await this.getTransactionReceipt(txHash);\n    return txReceipt;\n  }\n\n  /**\n   * Gets the status of a transaction.\n   * @param txHash BigNumberish\n   * @returns GetTransactionStatusResponse - the transaction status object\n   */\n  public async getTransactionStatus(txHash: BigNumberish): Promise<GetTransactionStatusResponse> {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint('get_transaction_status', { transactionHash: txHashHex });\n  }\n\n  /**\n   * Gets the smart contract address on the goerli testnet.\n   * @returns GetContractAddressesResponse - starknet smart contract addresses\n   */\n  public async getContractAddresses(): Promise<GetContractAddressesResponse> {\n    return this.fetchEndpoint('get_contract_addresses');\n  }\n\n  /**\n   * Gets the transaction trace from a tx id.\n   * @param txHash BigNumberish\n   * @returns TransactionTraceResponse - the transaction trace\n   */\n  public async getTransactionTrace(\n    txHash: BigNumberish\n  ): Promise<Sequencer.TransactionTraceResponse> {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint('get_transaction_trace', { transactionHash: txHashHex });\n  }\n\n  public async estimateMessageFee(\n    { from_address, to_address, entry_point_selector, payload }: CallL1Handler,\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<Sequencer.EstimateFeeResponse> {\n    const validCallL1Handler = {\n      from_address: getDecimalString(from_address),\n      to_address: getHexString(to_address),\n      entry_point_selector: getSelector(entry_point_selector),\n      payload: getHexStringArray(payload),\n    };\n\n    return this.fetchEndpoint('estimate_message_fee', { blockIdentifier }, validCallL1Handler);\n  }\n\n  /**\n   * Simulate transaction using Sequencer provider\n   * WARNING!: Sequencer will process only first element from invocations array\n   *\n   * @param invocations Array of invocations, but only first invocation will be processed\n   * @param blockIdentifier block identifier, default 'latest'\n   * @param skipValidate Skip Account __validate__ method\n   * @returns\n   */\n  public async getSimulateTransaction(\n    invocations: AccountInvocations,\n    {\n      blockIdentifier = this.blockIdentifier,\n      skipValidate = false,\n      skipExecute = false,\n    }: getSimulateTransactionOptions\n  ): Promise<SimulateTransactionResponse> {\n    if (invocations.length > 1) {\n      // eslint-disable-next-line no-console\n      console.warn('Sequencer simulate process only first element from invocations list');\n    }\n    if (skipExecute) {\n      // eslint-disable-next-line no-console\n      console.warn(\"Sequencer can't skip account __execute__\");\n    }\n    const transaction = this.buildTransaction(invocations[0]);\n    return this.fetchEndpoint(\n      'simulate_transaction',\n      {\n        blockIdentifier,\n        skipValidate: skipValidate ?? false,\n      },\n      transaction\n    ).then(this.responseParser.parseSimulateTransactionResponse);\n  }\n\n  public async getStateUpdate(\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<StateUpdateResponse> {\n    const args = new Block(blockIdentifier).sequencerIdentifier;\n    return this.fetchEndpoint('get_state_update', { ...args }).then(\n      this.responseParser.parseGetStateUpdateResponse\n    );\n  }\n\n  // consider adding an optional trace retrieval parameter to the getBlock method\n  public async getBlockTraces(\n    blockIdentifier: BlockIdentifier = this.blockIdentifier\n  ): Promise<Sequencer.BlockTransactionTracesResponse> {\n    const args = new Block(blockIdentifier).sequencerIdentifier;\n    return this.fetchEndpoint('get_block_traces', { ...args });\n  }\n\n  public async getStarkName(address: BigNumberish, StarknetIdContract?: string): Promise<string> {\n    return getStarkName(this, address, StarknetIdContract);\n  }\n\n  public async getAddressFromStarkName(name: string, StarknetIdContract?: string): Promise<string> {\n    return getAddressFromStarkName(this, name, StarknetIdContract);\n  }\n\n  /**\n   * Build Single AccountTransaction from Single AccountInvocation\n   * @param invocation AccountInvocationItem\n   * @param versionType 'fee' | 'transaction' - used to determine default versions\n   * @returns AccountTransactionItem\n   */\n  public buildTransaction(\n    invocation: AccountInvocationItem,\n    versionType?: 'fee' | 'transaction'\n  ): Sequencer.AccountTransactionItem {\n    const defaultVersions = getVersionsByType(versionType);\n    const details = {\n      signature: signatureToDecimalArray(invocation.signature),\n      nonce: toHex(invocation.nonce),\n    };\n\n    if (invocation.type === TransactionType.INVOKE) {\n      return {\n        type: invocation.type,\n        sender_address: invocation.contractAddress,\n        calldata: CallData.compile(invocation.calldata ?? []),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details,\n      };\n    }\n    if (invocation.type === TransactionType.DECLARE) {\n      if (!isSierra(invocation.contract)) {\n        return {\n          type: invocation.type,\n          contract_class: invocation.contract,\n          sender_address: invocation.senderAddress,\n          version: toHex(invocation.version || defaultVersions.v1), // fee from getDeclareEstimateFee use t.v. instead of feet.v.\n          ...details,\n        };\n      }\n      return {\n        type: invocation.type,\n        contract_class: invocation.contract,\n        compiled_class_hash: invocation.compiledClassHash,\n        sender_address: invocation.senderAddress,\n        version: toHex(invocation.version || defaultVersions.v2), // fee on getDeclareEstimateFee use t.v. instead of feet.v.\n        ...details,\n      };\n    }\n    if (invocation.type === TransactionType.DEPLOY_ACCOUNT) {\n      return {\n        type: invocation.type,\n        constructor_calldata: CallData.compile(invocation.constructorCalldata || []),\n        class_hash: toHex(invocation.classHash),\n        contract_address_salt: toHex(invocation.addressSalt || 0),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details,\n      };\n    }\n    throw Error('Sequencer buildTransaction received unknown TransactionType');\n  }\n}\n","import {\n  CallContractResponse,\n  DeclareContractResponse,\n  DeployContractResponse,\n  EstimateFeeResponse,\n  GetBlockResponse,\n  GetTransactionReceiptResponse,\n  GetTransactionResponse,\n  InvokeFunctionResponse,\n  SimulateTransactionResponse,\n} from '../../types';\n\nexport abstract class ResponseParser {\n  abstract parseGetBlockResponse(res: any): GetBlockResponse;\n\n  abstract parseGetTransactionResponse(res: any): GetTransactionResponse;\n\n  abstract parseGetTransactionReceiptResponse(res: any): GetTransactionReceiptResponse;\n\n  abstract parseFeeEstimateResponse(res: any): EstimateFeeResponse;\n\n  abstract parseCallContractResponse(res: any): CallContractResponse;\n\n  abstract parseInvokeFunctionResponse(res: any): InvokeFunctionResponse;\n\n  abstract parseDeployContractResponse(res: any): DeployContractResponse;\n\n  abstract parseDeclareContractResponse(res: any): DeclareContractResponse;\n\n  abstract parseSimulateTransactionResponse(res: any): SimulateTransactionResponse;\n}\n","/**\n * Map Sequencer Response to common interface response\n * Intersection (sequencer response ∩ (∪ rpc responses))\n */\n\nimport { LibraryError } from '../../provider/errors';\nimport {\n  CallContractResponse,\n  CompiledContract,\n  ContractClassResponse,\n  DeclareContractResponse,\n  DeployContractResponse,\n  EstimateFeeResponse,\n  EstimateFeeResponseBulk,\n  GetBlockResponse,\n  GetTransactionReceiptResponse,\n  GetTransactionResponse,\n  HexCalldata,\n  InvokeFunctionResponse,\n  Sequencer,\n  SimulateTransactionResponse,\n  StateUpdateResponse,\n  TransactionFinalityStatus,\n  TransactionStatus,\n} from '../../types';\nimport { isSierra } from '../contract';\nimport { toBigInt } from '../num';\nimport { parseContract } from '../provider';\nimport { estimatedFeeToMaxFee } from '../stark';\nimport { ResponseParser } from '.';\n\nexport class SequencerAPIResponseParser extends ResponseParser {\n  public parseGetBlockResponse(res: Sequencer.GetBlockResponse): GetBlockResponse {\n    return {\n      ...res,\n      new_root: res.state_root,\n      parent_hash: res.parent_block_hash,\n      transactions: Object.values(res.transactions)\n        .map((value) => 'transaction_hash' in value && value.transaction_hash)\n        .filter(Boolean) as Array<string>,\n    };\n  }\n\n  public parseGetTransactionResponse(\n    res: Sequencer.GetTransactionResponse\n  ): GetTransactionResponse {\n    if (\n      res.status === TransactionStatus.NOT_RECEIVED &&\n      res.finality_status === TransactionFinalityStatus.NOT_RECEIVED\n    ) {\n      throw new LibraryError();\n    }\n\n    return {\n      ...res,\n      calldata: 'calldata' in res.transaction ? (res.transaction.calldata as HexCalldata) : [],\n      contract_class:\n        'contract_class' in res.transaction ? (res.transaction.contract_class as any) : undefined,\n      entry_point_selector:\n        'entry_point_selector' in res.transaction\n          ? res.transaction.entry_point_selector\n          : undefined,\n      max_fee: 'max_fee' in res.transaction ? (res.transaction.max_fee as string) : undefined,\n      nonce: res.transaction.nonce as string,\n      sender_address:\n        'sender_address' in res.transaction\n          ? (res.transaction.sender_address as string)\n          : undefined,\n      signature: 'signature' in res.transaction ? res.transaction.signature : undefined,\n      transaction_hash:\n        'transaction_hash' in res.transaction ? res.transaction.transaction_hash : undefined,\n      version: 'version' in res.transaction ? (res.transaction.version as string) : undefined,\n    };\n  }\n\n  public parseGetTransactionReceiptResponse(\n    res: Sequencer.TransactionReceiptResponse\n  ): GetTransactionReceiptResponse {\n    return {\n      ...res,\n      messages_sent: res.l2_to_l1_messages as any,\n      ...('revert_error' in res && { revert_reason: res.revert_error }),\n    };\n  }\n\n  public parseFeeEstimateResponse(res: Sequencer.EstimateFeeResponse): EstimateFeeResponse {\n    if ('overall_fee' in res) {\n      let gasInfo = {};\n\n      try {\n        gasInfo = {\n          gas_consumed: toBigInt(res.gas_usage),\n          gas_price: toBigInt(res.gas_price),\n        };\n      } catch {\n        // do nothing\n      }\n\n      return {\n        overall_fee: toBigInt(res.overall_fee),\n        ...gasInfo,\n      };\n    }\n    return {\n      overall_fee: toBigInt(res.amount),\n    };\n  }\n\n  public parseFeeEstimateBulkResponse(\n    res: Sequencer.EstimateFeeResponseBulk\n  ): EstimateFeeResponseBulk {\n    return [].concat(res as []).map((item: Sequencer.EstimateFeeResponse) => {\n      if ('overall_fee' in item) {\n        let gasInfo = {};\n\n        try {\n          gasInfo = {\n            gas_consumed: toBigInt(item.gas_usage),\n            gas_price: toBigInt(item.gas_price),\n          };\n        } catch {\n          // do nothing\n        }\n\n        return {\n          overall_fee: toBigInt(item.overall_fee),\n          ...gasInfo,\n        };\n      }\n      return {\n        overall_fee: toBigInt(item.amount),\n      };\n    });\n  }\n\n  public parseSimulateTransactionResponse(\n    res: Sequencer.SimulateTransactionResponse\n  ): SimulateTransactionResponse {\n    const suggestedMaxFee =\n      'overall_fee' in res.fee_estimation\n        ? res.fee_estimation.overall_fee\n        : res.fee_estimation.amount;\n    return [\n      {\n        transaction_trace: res.trace,\n        fee_estimation: res.fee_estimation,\n        suggestedMaxFee: estimatedFeeToMaxFee(BigInt(suggestedMaxFee)),\n      },\n    ];\n  }\n\n  public parseCallContractResponse(res: Sequencer.CallContractResponse): CallContractResponse {\n    return {\n      result: res.result,\n    };\n  }\n\n  public parseInvokeFunctionResponse(\n    res: Sequencer.AddTransactionResponse\n  ): InvokeFunctionResponse {\n    return {\n      transaction_hash: res.transaction_hash,\n    };\n  }\n\n  public parseDeployContractResponse(\n    res: Sequencer.AddTransactionResponse\n  ): DeployContractResponse {\n    return {\n      transaction_hash: res.transaction_hash,\n      contract_address: res.address as string,\n    };\n  }\n\n  public parseDeclareContractResponse(\n    res: Sequencer.AddTransactionResponse\n  ): DeclareContractResponse {\n    return {\n      transaction_hash: res.transaction_hash,\n      class_hash: res.class_hash as string,\n    };\n  }\n\n  public parseGetStateUpdateResponse(res: Sequencer.StateUpdateResponse): StateUpdateResponse {\n    const nonces = Object.entries(res.state_diff.nonces).map(([contract_address, nonce]) => ({\n      contract_address,\n      nonce,\n    }));\n    const storage_diffs = Object.entries(res.state_diff.storage_diffs).map(\n      ([address, storage_entries]) => ({ address, storage_entries })\n    );\n\n    return {\n      ...res,\n      state_diff: {\n        ...res.state_diff,\n        storage_diffs,\n        nonces,\n      },\n    };\n  }\n\n  public parseContractClassResponse(res: CompiledContract): ContractClassResponse {\n    const response = isSierra(res) ? res : parseContract(res);\n    return {\n      ...response,\n      abi: typeof response.abi === 'string' ? JSON.parse(response.abi) : response.abi,\n    };\n  }\n}\n","import urljoin from 'url-join';\n\n/**\n * Inspired from https://github.com/segmentio/is-url\n */\n\n/**\n * RegExps.\n * A URL must match #1 and then at least one of #2/#3.\n * Use two levels of REs to avoid REDOS.\n */\nconst protocolAndDomainRE = /^(?:\\w+:)?\\/\\/(\\S+)$/;\n\nconst localhostDomainRE = /^localhost[:?\\d]*(?:[^:?\\d]\\S*)?$/;\nconst nonLocalhostDomainRE = /^[^\\s.]+\\.\\S{2,}$/;\n\n/**\n * Loosely validate a URL `string`.\n */\nexport function isUrl(s?: string): boolean {\n  if (!s) {\n    return false;\n  }\n\n  if (typeof s !== 'string') {\n    return false;\n  }\n\n  const match = s.match(protocolAndDomainRE);\n  if (!match) {\n    return false;\n  }\n\n  const everythingAfterProtocol = match[1];\n  if (!everythingAfterProtocol) {\n    return false;\n  }\n\n  if (\n    localhostDomainRE.test(everythingAfterProtocol) ||\n    nonLocalhostDomainRE.test(everythingAfterProtocol)\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function buildUrl(baseUrl: string, defaultPath: string, urlOrPath?: string) {\n  return isUrl(urlOrPath) ? urlOrPath! : urljoin(baseUrl, urlOrPath ?? defaultPath);\n}\n","import { StarknetChainId } from '../constants';\nimport {\n  AccountInvocations,\n  BigNumberish,\n  BlockIdentifier,\n  Call,\n  CallContractResponse,\n  ContractClassResponse,\n  ContractVersion,\n  DeclareContractResponse,\n  DeclareContractTransaction,\n  DeployAccountContractTransaction,\n  DeployContractResponse,\n  EstimateFeeResponse,\n  EstimateFeeResponseBulk,\n  GetBlockResponse,\n  GetCodeResponse,\n  GetTransactionReceiptResponse,\n  GetTransactionResponse,\n  Invocation,\n  InvocationsDetailsWithNonce,\n  InvokeFunctionResponse,\n  Nonce,\n  ProviderOptions,\n  RpcProviderOptions,\n  SequencerProviderOptions,\n  SimulateTransactionResponse,\n  StateUpdateResponse,\n  Storage,\n  getContractVersionOptions,\n  getEstimateFeeBulkOptions,\n  getSimulateTransactionOptions,\n  waitForTransactionOptions,\n} from '../types';\nimport { ProviderInterface } from './interface';\nimport { RpcProvider } from './rpc';\nimport { SequencerProvider } from './sequencer';\nimport { getAddressFromStarkName, getStarkName } from './starknetId';\n\n/**\n * @deprecated Use RpcProvider instead. Common Provider will be removed with Sequencer provider.\n */\nexport class Provider implements ProviderInterface {\n  private provider!: ProviderInterface;\n\n  constructor(providerOrOptions?: ProviderOptions | ProviderInterface) {\n    if (providerOrOptions instanceof Provider) {\n      // providerOrOptions is Provider\n      this.provider = providerOrOptions.provider;\n    } else if (\n      providerOrOptions instanceof RpcProvider ||\n      providerOrOptions instanceof SequencerProvider\n    ) {\n      // providerOrOptions is SequencerProvider or RpcProvider\n      this.provider = <ProviderInterface>providerOrOptions;\n    } else if (providerOrOptions && 'rpc' in providerOrOptions) {\n      // providerOrOptions is rpc option\n      this.provider = new RpcProvider(<RpcProviderOptions>providerOrOptions.rpc);\n    } else if (providerOrOptions && 'sequencer' in providerOrOptions) {\n      // providerOrOptions is sequencer option\n      this.provider = new SequencerProvider(<SequencerProviderOptions>providerOrOptions.sequencer);\n    } else {\n      // providerOrOptions is none, create SequencerProvider as default\n      this.provider = new RpcProvider();\n    }\n  }\n\n  public async getChainId(): Promise<StarknetChainId> {\n    return this.provider.getChainId();\n  }\n\n  public async getBlock(blockIdentifier: BlockIdentifier): Promise<GetBlockResponse> {\n    return this.provider.getBlock(blockIdentifier);\n  }\n\n  public async getClassAt(\n    contractAddress: string,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<ContractClassResponse> {\n    return this.provider.getClassAt(contractAddress, blockIdentifier);\n  }\n\n  public async getClassHashAt(\n    contractAddress: string,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<string> {\n    return this.provider.getClassHashAt(contractAddress, blockIdentifier);\n  }\n\n  public getClassByHash(classHash: string): Promise<ContractClassResponse> {\n    return this.provider.getClassByHash(classHash);\n  }\n\n  public async getEstimateFee(\n    invocationWithTxType: Invocation,\n    invocationDetails: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier\n  ): Promise<EstimateFeeResponse> {\n    return this.provider.getEstimateFee(invocationWithTxType, invocationDetails, blockIdentifier);\n  }\n\n  public async getInvokeEstimateFee(\n    invocationWithTxType: Invocation,\n    invocationDetails: InvocationsDetailsWithNonce,\n    blockIdentifier?: BlockIdentifier,\n    skipValidate?: boolean\n  ): Promise<EstimateFeeResponse> {\n    return this.provider.getInvokeEstimateFee(\n      invocationWithTxType,\n      invocationDetails,\n      blockIdentifier,\n      skipValidate\n    );\n  }\n\n  public async getEstimateFeeBulk(\n    invocations: AccountInvocations,\n    options: getEstimateFeeBulkOptions\n  ): Promise<EstimateFeeResponseBulk> {\n    return this.provider.getEstimateFeeBulk(invocations, options);\n  }\n\n  public async getNonceForAddress(\n    contractAddress: string,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<Nonce> {\n    return this.provider.getNonceForAddress(contractAddress, blockIdentifier);\n  }\n\n  public async getStorageAt(\n    contractAddress: string,\n    key: BigNumberish,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<Storage> {\n    return this.provider.getStorageAt(contractAddress, key, blockIdentifier);\n  }\n\n  public async getTransaction(txHash: BigNumberish): Promise<GetTransactionResponse> {\n    return this.provider.getTransaction(txHash);\n  }\n\n  public async getTransactionReceipt(txHash: BigNumberish): Promise<GetTransactionReceiptResponse> {\n    return this.provider.getTransactionReceipt(txHash);\n  }\n\n  public async callContract(\n    request: Call,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<CallContractResponse> {\n    return this.provider.callContract(request, blockIdentifier);\n  }\n\n  public async invokeFunction(\n    functionInvocation: Invocation,\n    details: InvocationsDetailsWithNonce\n  ): Promise<InvokeFunctionResponse> {\n    return this.provider.invokeFunction(functionInvocation, details);\n  }\n\n  public async deployAccountContract(\n    payload: DeployAccountContractTransaction,\n    details: InvocationsDetailsWithNonce\n  ): Promise<DeployContractResponse> {\n    return this.provider.deployAccountContract(payload, details);\n  }\n\n  public async declareContract(\n    transaction: DeclareContractTransaction,\n    details: InvocationsDetailsWithNonce\n  ): Promise<DeclareContractResponse> {\n    return this.provider.declareContract(transaction, details);\n  }\n\n  public async getDeclareEstimateFee(\n    transaction: DeclareContractTransaction,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier?: BlockIdentifier,\n    skipValidate?: boolean\n  ): Promise<EstimateFeeResponse> {\n    return this.provider.getDeclareEstimateFee(transaction, details, blockIdentifier, skipValidate);\n  }\n\n  public getDeployAccountEstimateFee(\n    transaction: DeployAccountContractTransaction,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier?: BlockIdentifier,\n    skipValidate?: boolean\n  ): Promise<EstimateFeeResponse> {\n    return this.provider.getDeployAccountEstimateFee(\n      transaction,\n      details,\n      blockIdentifier,\n      skipValidate\n    );\n  }\n\n  public async getCode(\n    contractAddress: string,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<GetCodeResponse> {\n    return this.provider.getCode(contractAddress, blockIdentifier);\n  }\n\n  public async waitForTransaction(\n    txHash: BigNumberish,\n    options?: waitForTransactionOptions\n  ): Promise<GetTransactionReceiptResponse> {\n    return this.provider.waitForTransaction(txHash, options);\n  }\n\n  public async getSimulateTransaction(\n    invocations: AccountInvocations,\n    options?: getSimulateTransactionOptions\n  ): Promise<SimulateTransactionResponse> {\n    return this.provider.getSimulateTransaction(invocations, options);\n  }\n\n  public async getStateUpdate(blockIdentifier?: BlockIdentifier): Promise<StateUpdateResponse> {\n    return this.provider.getStateUpdate(blockIdentifier);\n  }\n\n  public async getStarkName(address: BigNumberish, StarknetIdContract?: string): Promise<string> {\n    return getStarkName(this, address, StarknetIdContract);\n  }\n\n  public async getAddressFromStarkName(name: string, StarknetIdContract?: string): Promise<string> {\n    return getAddressFromStarkName(this, name, StarknetIdContract);\n  }\n\n  public async getContractVersion(\n    contractAddress: string,\n    classHash?: undefined,\n    options?: getContractVersionOptions\n  ): Promise<ContractVersion>;\n  public async getContractVersion(\n    contractAddress: undefined,\n    classHash: string,\n    options?: getContractVersionOptions\n  ): Promise<ContractVersion>;\n\n  public async getContractVersion(\n    contractAddress?: string,\n    classHash?: string,\n    options?: getContractVersionOptions\n  ) {\n    return this.provider.getContractVersion(contractAddress as any, classHash as any, options);\n  }\n}\n","import {\n  Abi,\n  Call,\n  DeclareSignerDetails,\n  DeployAccountSignerDetails,\n  InvocationsSignerDetails,\n  Signature,\n  TypedData,\n} from '../types';\n\nexport abstract class SignerInterface {\n  /**\n   * Method to get the public key of the signer\n   *\n   * @returns public key of signer as hex string with 0x prefix\n   */\n  public abstract getPubKey(): Promise<string>;\n\n  /**\n   * Sign an JSON object for off-chain usage with the starknet private key and return the signature\n   * This adds a message prefix so it cant be interchanged with transactions\n   *\n   * @param typedData - JSON object to be signed\n   * @param accountAddress - account\n   * @returns the signature of the JSON object\n   * @throws {Error} if the JSON object is not a valid JSON\n   */\n  public abstract signMessage(typedData: TypedData, accountAddress: string): Promise<Signature>;\n\n  /**\n   * Signs a transaction with the starknet private key and returns the signature\n   *\n   * @param invocation the invocation object containing:\n   * - contractAddress - the address of the contract\n   * - entrypoint - the entrypoint of the contract\n   * - calldata - (defaults to []) the calldata\n   * @param abi (optional) the abi of the contract for better displaying\n   *\n   * @returns signature\n   */\n  public abstract signTransaction(\n    transactions: Call[],\n    transactionsDetail: InvocationsSignerDetails,\n    abis?: Abi[]\n  ): Promise<Signature>;\n\n  /**\n   * Signs a DEPLOY_ACCOUNT transaction with the starknet private key and returns the signature\n   *\n   * @param transaction\n   * - contractAddress - the computed address of the contract\n   * - constructorCalldata - calldata to be passed in deploy constructor\n   * - addressSalt - contract address salt\n   * - chainId - the chainId to declare contract on\n   * - maxFee - maxFee for the declare transaction\n   * - version - transaction version\n   * - nonce - Nonce of the declare transaction\n   * @returns signature\n   */\n  public abstract signDeployAccountTransaction(\n    transaction: DeployAccountSignerDetails\n  ): Promise<Signature>;\n\n  /**\n   * Signs a DECLARE transaction with the starknet private key and returns the signature\n   *\n   * @param transaction\n   * - classHash - computed class hash. Will be replaced by ContractClass in future once class hash is present in CompiledContract\n   * - senderAddress - the address of the sender\n   * - chainId - the chainId to declare contract on\n   * - maxFee - maxFee for the declare transaction\n   * - version - transaction version\n   * - nonce - Nonce of the declare transaction\n   * @returns signature\n   */\n  public abstract signDeclareTransaction(transaction: DeclareSignerDetails): Promise<Signature>;\n}\n","import {\n  BigNumberish,\n  CairoVersion,\n  Call,\n  CallStruct,\n  Calldata,\n  ParsedStruct,\n  RawArgs,\n} from '../types';\nimport { CallData } from './calldata';\nimport { getSelectorFromName } from './hash';\nimport { toBigInt } from './num';\n\n/**\n * Transforms a list of Calls, each with their own calldata, into\n * two arrays: one with the entry points, and one with the concatenated calldata\n */\nexport const transformCallsToMulticallArrays = (calls: Call[]) => {\n  const callArray: ParsedStruct[] = [];\n  const calldata: BigNumberish[] = [];\n  calls.forEach((call) => {\n    const data = CallData.compile(call.calldata || []);\n    callArray.push({\n      to: toBigInt(call.contractAddress).toString(10),\n      selector: toBigInt(getSelectorFromName(call.entrypoint)).toString(10),\n      data_offset: calldata.length.toString(),\n      data_len: data.length.toString(),\n    });\n    calldata.push(...data);\n  });\n  return {\n    callArray,\n    calldata: CallData.compile({ calldata }),\n  };\n};\n\n/**\n * Transforms a list of calls into the Cairo 0 `__execute__` calldata.\n */\nexport const fromCallsToExecuteCalldata = (calls: Call[]) => {\n  const { callArray, calldata } = transformCallsToMulticallArrays(calls);\n  const compiledCalls = CallData.compile({ callArray });\n  return [...compiledCalls, ...calldata] as Calldata;\n};\n\n/**\n * Transforms a list of calls into the Cairo 0 `__execute__` calldata including nonce.\n *\n * @deprecated\n */\nexport const fromCallsToExecuteCalldataWithNonce = (calls: Call[], nonce: BigNumberish) => {\n  return [...fromCallsToExecuteCalldata(calls), toBigInt(nonce).toString()] as Calldata;\n};\n\n/**\n * Format Data inside Calls\n *\n * @deprecated Not required for getting execute Calldata\n */\nexport const transformCallsToMulticallArrays_cairo1 = (calls: Call[]) => {\n  const callArray = calls.map<CallStruct>((call) => ({\n    to: toBigInt(call.contractAddress).toString(10),\n    selector: toBigInt(getSelectorFromName(call.entrypoint)).toString(10),\n    calldata: CallData.compile(call.calldata || []),\n  }));\n  return callArray;\n};\n\n/**\n * Transforms a list of calls into the Cairo 1 `__execute__` calldata.\n */\nexport const fromCallsToExecuteCalldata_cairo1 = (calls: Call[]) => {\n  // ensure property order\n  const orderCalls = calls.map((call) => ({\n    contractAddress: call.contractAddress,\n    entrypoint: call.entrypoint,\n    calldata:\n      Array.isArray(call.calldata) && '__compiled__' in call.calldata\n        ? call.calldata // Calldata type\n        : CallData.compile(call.calldata as RawArgs), // RawArgsObject | RawArgsArray type\n  }));\n\n  return CallData.compile({ orderCalls });\n};\n\n/**\n * Create `__execute__` Calldata from Calls based on Cairo versions\n */\nexport const getExecuteCalldata = (calls: Call[], cairoVersion: CairoVersion = '0') => {\n  if (cairoVersion === '1') {\n    return fromCallsToExecuteCalldata_cairo1(calls);\n  }\n  return fromCallsToExecuteCalldata(calls);\n};\n","import { BigNumberish, StarkNetMerkleType, StarkNetType, TypedData } from '../types';\nimport { computeHashOnElements, getSelectorFromName } from './hash';\nimport { MerkleTree } from './merkle';\nimport { isHex, toHex } from './num';\nimport { encodeShortString } from './shortString';\n\n/** @deprecated prefer importing from 'types' over 'typedData' */\nexport * from '../types/typedData';\n\nfunction getHex(value: BigNumberish): string {\n  try {\n    return toHex(value);\n  } catch (e) {\n    if (typeof value === 'string') {\n      return toHex(encodeShortString(value));\n    }\n    throw new Error(`Invalid BigNumberish: ${value}`);\n  }\n}\n\n/**\n * Validates that `data` matches the EIP-712 JSON schema.\n *\n * @param {any} data\n * @return {boolean}\n */\nconst validateTypedData = (data: unknown): data is TypedData => {\n  const typedData = data as TypedData;\n\n  // Validate that the data matches the EIP-712 JSON schema\n  const valid = Boolean(typedData.types && typedData.primaryType && typedData.message);\n\n  return valid;\n};\n\nexport function prepareSelector(selector: string): string {\n  return isHex(selector) ? selector : getSelectorFromName(selector);\n}\n\nexport function isMerkleTreeType(type: StarkNetType): type is StarkNetMerkleType {\n  return type.type === 'merkletree';\n}\n\ninterface Context {\n  parent?: string;\n  key?: string;\n}\n\n/**\n * Get the dependencies of a struct type. If a struct has the same dependency multiple times, it's only included once\n * in the resulting array.\n *\n * @param {TypedData} typedData\n * @param {string} type\n * @param {string[]} [dependencies]\n * @return {string[]}\n */\nexport const getDependencies = (\n  types: TypedData['types'],\n  type: string,\n  dependencies: string[] = []\n): string[] => {\n  // Include pointers (struct arrays)\n  if (type[type.length - 1] === '*') {\n    // eslint-disable-next-line no-param-reassign\n    type = type.slice(0, -1);\n  }\n\n  if (dependencies.includes(type)) {\n    return dependencies;\n  }\n\n  if (!types[type]) {\n    return dependencies;\n  }\n\n  return [\n    type,\n    ...types[type].reduce<string[]>(\n      (previous, t) => [\n        ...previous,\n        ...getDependencies(types, t.type, previous).filter(\n          (dependency) => !previous.includes(dependency)\n        ),\n      ],\n      []\n    ),\n  ];\n};\n\nfunction getMerkleTreeType(types: TypedData['types'], ctx: Context) {\n  if (ctx.parent && ctx.key) {\n    const parentType = types[ctx.parent];\n    const merkleType = parentType.find((t) => t.name === ctx.key)!;\n    const isMerkleTree = isMerkleTreeType(merkleType);\n    if (!isMerkleTree) {\n      throw new Error(`${ctx.key} is not a merkle tree`);\n    }\n    if (merkleType.contains.endsWith('*')) {\n      throw new Error(`Merkle tree contain property must not be an array but was given ${ctx.key}`);\n    }\n    return merkleType.contains;\n  }\n  return 'raw';\n}\n\n/**\n * Encode a type to a string. All dependent types are alphabetically sorted.\n */\nexport const encodeType = (types: TypedData['types'], type: string): string => {\n  const [primary, ...dependencies] = getDependencies(types, type);\n  const newTypes = !primary ? [] : [primary, ...dependencies.sort()];\n\n  return newTypes\n    .map((dependency) => {\n      return `${dependency}(${types[dependency].map((t) => `${t.name}:${t.type}`)})`;\n    })\n    .join('');\n};\n\n/**\n * Get a type string as hash.\n */\nexport const getTypeHash = (types: TypedData['types'], type: string): string => {\n  return getSelectorFromName(encodeType(types, type));\n};\n\n/**\n * Encodes a single value to an ABI serialisable string, number or Buffer. Returns the data as tuple, which consists of\n * an array of ABI compatible types, and an array of corresponding values.\n */\nexport const encodeValue = (\n  types: TypedData['types'],\n  type: string,\n  data: unknown,\n  ctx: Context = {}\n): [string, string] => {\n  if (types[type]) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return [type, getStructHash(types, type, data as Record<string, unknown>)];\n  }\n\n  if (\n    Object.keys(types)\n      .map((x) => `${x}*`)\n      .includes(type)\n  ) {\n    const structHashes: string[] = (data as unknown[]).map((struct) => {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      return getStructHash(types, type.slice(0, -1), struct as Record<string, unknown>);\n    });\n    return [type, computeHashOnElements(structHashes)];\n  }\n\n  if (type === 'merkletree') {\n    const merkleTreeType = getMerkleTreeType(types, ctx);\n    const structHashes: string[] = (data as unknown[]).map((struct) => {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      return encodeValue(types, merkleTreeType, struct as Record<string, unknown>)[1];\n    });\n    const { root } = new MerkleTree(structHashes as string[]);\n    return ['felt', root];\n  }\n\n  if (type === 'felt*') {\n    return ['felt*', computeHashOnElements(data as string[])];\n  }\n\n  if (type === 'selector') {\n    return ['felt', prepareSelector(data as string)];\n  }\n\n  return [type, getHex(data as string)];\n};\n\n/**\n * Encode the data to an ABI encoded Buffer. The data should be a key -> value object with all the required values.\n * All dependent types are automatically encoded.\n */\nexport const encodeData = <T extends TypedData>(\n  types: T['types'],\n  type: string,\n  data: T['message']\n) => {\n  const [returnTypes, values] = types[type].reduce<[string[], string[]]>(\n    ([ts, vs], field) => {\n      if (data[field.name] === undefined || data[field.name] === null) {\n        throw new Error(`Cannot encode data: missing data for '${field.name}'`);\n      }\n\n      const value = data[field.name];\n      const [t, encodedValue] = encodeValue(types, field.type, value, {\n        parent: type,\n        key: field.name,\n      });\n\n      return [\n        [...ts, t],\n        [...vs, encodedValue],\n      ];\n    },\n    [['felt'], [getTypeHash(types, type)]]\n  );\n\n  return [returnTypes, values];\n};\n\n/**\n * Get encoded data as a hash. The data should be a key -> value object with all the required values.\n * All dependent types are automatically encoded.\n */\nexport const getStructHash = <T extends TypedData>(\n  types: T['types'],\n  type: string,\n  data: T['message']\n) => {\n  return computeHashOnElements(encodeData(types, type, data)[1]);\n};\n\n/**\n * Get the EIP-191 encoded message to sign, from the typedData object.\n */\nexport const getMessageHash = (typedData: TypedData, account: BigNumberish): string => {\n  if (!validateTypedData(typedData)) {\n    throw new Error('Typed data does not match JSON schema');\n  }\n\n  const message = [\n    encodeShortString('StarkNet Message'),\n    getStructHash(typedData.types, 'StarkNetDomain', typedData.domain),\n    account,\n    getStructHash(typedData.types, typedData.primaryType, typedData.message),\n  ];\n\n  return computeHashOnElements(message);\n};\n","import { starkCurve } from './ec';\nimport { toBigInt } from './num';\n\nexport class MerkleTree {\n  public leaves: string[];\n\n  public branches: string[][] = [];\n\n  public root: string;\n\n  constructor(leafHashes: string[]) {\n    this.leaves = leafHashes;\n    this.root = this.build(leafHashes);\n  }\n\n  /**\n   * Create Merkle tree\n   * @param leaves hex-string array\n   * @returns format: hex-string; Merkle tree root\n   */\n  private build(leaves: string[]): string {\n    if (leaves.length === 1) {\n      return leaves[0];\n    }\n    if (leaves.length !== this.leaves.length) {\n      this.branches.push(leaves);\n    }\n    const newLeaves: string[] = [];\n    for (let i = 0; i < leaves.length; i += 2) {\n      if (i + 1 === leaves.length) {\n        newLeaves.push(MerkleTree.hash(leaves[i], '0x0'));\n      } else {\n        newLeaves.push(MerkleTree.hash(leaves[i], leaves[i + 1]));\n      }\n    }\n    return this.build(newLeaves);\n  }\n\n  /**\n   * Create pedersen hash from a and b\n   * @returns format: hex-string\n   */\n  static hash(a: string, b: string) {\n    const [aSorted, bSorted] = [toBigInt(a), toBigInt(b)].sort((x, y) => (x >= y ? 1 : -1));\n    return starkCurve.pedersen(aSorted, bSorted);\n  }\n\n  /**\n   * Return path to leaf\n   * @param leaf hex-string\n   * @param branch hex-string array\n   * @param hashPath hex-string array\n   * @returns format: hex-string array\n   */\n  public getProof(leaf: string, branch = this.leaves, hashPath: string[] = []): string[] {\n    const index = branch.indexOf(leaf);\n    if (index === -1) {\n      throw new Error('leaf not found');\n    }\n    if (branch.length === 1) {\n      return hashPath;\n    }\n    const isLeft = index % 2 === 0;\n    const neededBranch = (isLeft ? branch[index + 1] : branch[index - 1]) ?? '0x0';\n    const newHashPath = [...hashPath, neededBranch];\n    const currentBranchLevelIndex =\n      this.leaves.length === branch.length\n        ? -1\n        : this.branches.findIndex((b) => b.length === branch.length);\n    const nextBranch = this.branches[currentBranchLevelIndex + 1] ?? [this.root];\n    return this.getProof(\n      MerkleTree.hash(isLeft ? leaf : neededBranch, isLeft ? neededBranch : leaf),\n      nextBranch,\n      newHashPath\n    );\n  }\n}\n\n/**\n * Test Merkle tree path\n * @param root hex-string\n * @param leaf hex-string\n * @param path hex-string array\n */\nexport function proofMerklePath(root: string, leaf: string, path: string[]): boolean {\n  if (path.length === 0) {\n    return root === leaf;\n  }\n  const [next, ...rest] = path;\n  return proofMerklePath(root, MerkleTree.hash(leaf, next), rest);\n}\n","import {\n  Abi,\n  Call,\n  DeclareSignerDetails,\n  DeployAccountSignerDetails,\n  InvocationsSignerDetails,\n  Signature,\n  TypedData,\n} from '../types';\nimport { CallData } from '../utils/calldata';\nimport { starkCurve } from '../utils/ec';\nimport { buf2hex } from '../utils/encode';\nimport {\n  calculateDeclareTransactionHash,\n  calculateDeployAccountTransactionHash,\n  calculateTransactionHash,\n} from '../utils/hash';\nimport { toHex } from '../utils/num';\nimport { getExecuteCalldata } from '../utils/transaction';\nimport { getMessageHash } from '../utils/typedData';\nimport { SignerInterface } from './interface';\n\nexport class Signer implements SignerInterface {\n  protected pk: Uint8Array | string;\n\n  constructor(pk: Uint8Array | string = starkCurve.utils.randomPrivateKey()) {\n    this.pk = pk instanceof Uint8Array ? buf2hex(pk) : toHex(pk);\n  }\n\n  public async getPubKey(): Promise<string> {\n    return starkCurve.getStarkKey(this.pk);\n  }\n\n  public async signMessage(typedData: TypedData, accountAddress: string): Promise<Signature> {\n    const msgHash = getMessageHash(typedData, accountAddress);\n    return starkCurve.sign(msgHash, this.pk);\n  }\n\n  public async signTransaction(\n    transactions: Call[],\n    transactionsDetail: InvocationsSignerDetails,\n    abis?: Abi[]\n  ): Promise<Signature> {\n    if (abis && abis.length !== transactions.length) {\n      throw new Error('ABI must be provided for each transaction or no transaction');\n    }\n    // now use abi to display decoded data somewhere, but as this signer is headless, we can't do that\n\n    const calldata = getExecuteCalldata(transactions, transactionsDetail.cairoVersion);\n\n    const msgHash = calculateTransactionHash(\n      transactionsDetail.walletAddress,\n      transactionsDetail.version,\n      calldata,\n      transactionsDetail.maxFee,\n      transactionsDetail.chainId,\n      transactionsDetail.nonce\n    );\n\n    return starkCurve.sign(msgHash, this.pk);\n  }\n\n  public async signDeployAccountTransaction({\n    classHash,\n    contractAddress,\n    constructorCalldata,\n    addressSalt,\n    maxFee,\n    version,\n    chainId,\n    nonce,\n  }: DeployAccountSignerDetails): Promise<Signature> {\n    const msgHash = calculateDeployAccountTransactionHash(\n      contractAddress,\n      classHash,\n      CallData.compile(constructorCalldata),\n      addressSalt,\n      version,\n      maxFee,\n      chainId,\n      nonce\n    );\n\n    return starkCurve.sign(msgHash, this.pk);\n  }\n\n  public async signDeclareTransaction(\n    // contractClass: ContractClass,  // Should be used once class hash is present in ContractClass\n    {\n      classHash,\n      senderAddress,\n      chainId,\n      maxFee,\n      version,\n      nonce,\n      compiledClassHash,\n    }: DeclareSignerDetails\n  ): Promise<Signature> {\n    const msgHash = calculateDeclareTransactionHash(\n      classHash,\n      senderAddress,\n      version,\n      maxFee,\n      chainId,\n      nonce,\n      compiledClassHash\n    );\n\n    return starkCurve.sign(msgHash, this.pk);\n  }\n}\n","import { UDC } from '../constants';\nimport { InvokeTransactionReceiptResponse } from '../types/provider';\nimport { cleanHex } from './num';\n\n/**\n * Parse Transaction Receipt Event from UDC invoke transaction and\n * create DeployContractResponse compatible response with addition of the UDC Event data\n *\n * @returns DeployContractResponse | UDC Event Response data\n */\nexport function parseUDCEvent(txReceipt: InvokeTransactionReceiptResponse) {\n  if (!txReceipt.events) {\n    throw new Error('UDC emitted event is empty');\n  }\n  const event = txReceipt.events.find(\n    (it) => cleanHex(it.from_address) === cleanHex(UDC.ADDRESS)\n  ) || {\n    data: [],\n  };\n  return {\n    transaction_hash: txReceipt.transaction_hash,\n    contract_address: event.data[0],\n    address: event.data[0],\n    deployer: event.data[1],\n    unique: event.data[2],\n    classHash: event.data[3],\n    calldata_len: event.data[4],\n    calldata: event.data.slice(5, 5 + parseInt(event.data[4], 16)),\n    salt: event.data[event.data.length - 1],\n  };\n}\n","import { UDC, ZERO } from '../constants';\nimport { ProviderInterface } from '../provider';\nimport { Provider } from '../provider/default';\nimport { Signer, SignerInterface } from '../signer';\nimport {\n  Abi,\n  AccountInvocationItem,\n  AccountInvocations,\n  AccountInvocationsFactoryDetails,\n  AllowArray,\n  BigNumberish,\n  BlockIdentifier,\n  CairoVersion,\n  Call,\n  DeclareAndDeployContractPayload,\n  DeclareContractPayload,\n  DeclareContractResponse,\n  DeclareContractTransaction,\n  DeclareDeployUDCResponse,\n  DeployAccountContractPayload,\n  DeployAccountContractTransaction,\n  DeployContractResponse,\n  DeployContractUDCResponse,\n  DeployTransactionReceiptResponse,\n  Details,\n  EstimateFee,\n  EstimateFeeAction,\n  EstimateFeeBulk,\n  EstimateFeeDetails,\n  Invocation,\n  Invocations,\n  InvocationsDetails,\n  InvocationsSignerDetails,\n  InvokeFunctionResponse,\n  MultiDeployContractResponse,\n  Nonce,\n  ProviderOptions,\n  Signature,\n  SimulateTransactionDetails,\n  SimulateTransactionResponse,\n  TransactionType,\n  TypedData,\n  UniversalDeployerContractPayload,\n} from '../types';\nimport { CallData } from '../utils/calldata';\nimport { extractContractHashes, isSierra } from '../utils/contract';\nimport { starkCurve } from '../utils/ec';\nimport { parseUDCEvent } from '../utils/events';\nimport {\n  calculateContractAddressFromHash,\n  feeTransactionVersion,\n  feeTransactionVersion_2,\n  transactionVersion,\n  transactionVersion_2,\n} from '../utils/hash';\nimport { toBigInt, toCairoBool } from '../utils/num';\nimport { parseContract } from '../utils/provider';\nimport { estimatedFeeToMaxFee, formatSignature, randomAddress } from '../utils/stark';\nimport { getExecuteCalldata } from '../utils/transaction';\nimport { getMessageHash } from '../utils/typedData';\nimport { AccountInterface } from './interface';\n\nexport class Account extends Provider implements AccountInterface {\n  public signer: SignerInterface;\n\n  public address: string;\n\n  public cairoVersion: CairoVersion;\n\n  constructor(\n    providerOrOptions: ProviderOptions | ProviderInterface,\n    address: string,\n    pkOrSigner: Uint8Array | string | SignerInterface,\n    cairoVersion?: CairoVersion\n  ) {\n    super(providerOrOptions);\n    this.address = address.toLowerCase();\n    this.signer =\n      typeof pkOrSigner === 'string' || pkOrSigner instanceof Uint8Array\n        ? new Signer(pkOrSigner)\n        : pkOrSigner;\n\n    if (cairoVersion) {\n      this.cairoVersion = cairoVersion.toString() as CairoVersion;\n    }\n  }\n\n  public async getNonce(blockIdentifier?: BlockIdentifier): Promise<Nonce> {\n    return super.getNonceForAddress(this.address, blockIdentifier);\n  }\n\n  private async getNonceSafe(nonce?: BigNumberish) {\n    // Patch DEPLOY_ACCOUNT: RPC getNonce for non-existing address will result in error, on Sequencer it is '0x0'\n    try {\n      return toBigInt(nonce ?? (await this.getNonce()));\n    } catch (error) {\n      return 0n;\n    }\n  }\n\n  /**\n   * Retrieves the Cairo version from the network and sets `cairoVersion` if not already set in the constructor\n   * @param classHash if provided detects Cairo version from classHash, otherwise from the account address\n   */\n  public async getCairoVersion(classHash?: string) {\n    if (!this.cairoVersion) {\n      const { cairo } = classHash\n        ? await super.getContractVersion(undefined, classHash)\n        : await super.getContractVersion(this.address);\n      this.cairoVersion = cairo;\n    }\n    return this.cairoVersion;\n  }\n\n  public async estimateFee(\n    calls: AllowArray<Call>,\n    estimateFeeDetails?: EstimateFeeDetails | undefined\n  ): Promise<EstimateFee> {\n    return this.estimateInvokeFee(calls, estimateFeeDetails);\n  }\n\n  public async estimateInvokeFee(\n    calls: AllowArray<Call>,\n    { nonce: providedNonce, blockIdentifier, skipValidate }: EstimateFeeDetails = {}\n  ): Promise<EstimateFee> {\n    const transactions = Array.isArray(calls) ? calls : [calls];\n    const nonce = toBigInt(providedNonce ?? (await this.getNonce()));\n    const version = toBigInt(feeTransactionVersion);\n    const chainId = await this.getChainId();\n\n    const signerDetails: InvocationsSignerDetails = {\n      walletAddress: this.address,\n      nonce,\n      maxFee: ZERO,\n      version,\n      chainId,\n      cairoVersion: await this.getCairoVersion(),\n    };\n\n    const invocation = await this.buildInvocation(transactions, signerDetails);\n    const response = await super.getInvokeEstimateFee(\n      { ...invocation },\n      { version, nonce },\n      blockIdentifier,\n      skipValidate\n    );\n\n    const suggestedMaxFee = estimatedFeeToMaxFee(response.overall_fee);\n\n    return {\n      ...response,\n      suggestedMaxFee,\n    };\n  }\n\n  public async estimateDeclareFee(\n    { contract, classHash: providedClassHash, casm, compiledClassHash }: DeclareContractPayload,\n    { blockIdentifier, nonce: providedNonce, skipValidate }: EstimateFeeDetails = {}\n  ): Promise<EstimateFee> {\n    const nonce = toBigInt(providedNonce ?? (await this.getNonce()));\n    const version = !isSierra(contract) ? feeTransactionVersion : feeTransactionVersion_2;\n    const chainId = await this.getChainId();\n\n    const declareContractTransaction = await this.buildDeclarePayload(\n      { classHash: providedClassHash, contract, casm, compiledClassHash },\n      {\n        nonce,\n        chainId,\n        version,\n        walletAddress: this.address,\n        maxFee: ZERO,\n        cairoVersion: undefined, // unused parameter\n      }\n    );\n\n    const response = await super.getDeclareEstimateFee(\n      declareContractTransaction,\n      { version, nonce },\n      blockIdentifier,\n      skipValidate\n    );\n    const suggestedMaxFee = estimatedFeeToMaxFee(response.overall_fee);\n\n    return {\n      ...response,\n      suggestedMaxFee,\n    };\n  }\n\n  public async estimateAccountDeployFee(\n    {\n      classHash,\n      addressSalt = 0,\n      constructorCalldata = [],\n      contractAddress: providedContractAddress,\n    }: DeployAccountContractPayload,\n    { blockIdentifier, skipValidate }: EstimateFeeDetails = {}\n  ): Promise<EstimateFee> {\n    const version = toBigInt(feeTransactionVersion);\n    const nonce = ZERO; // DEPLOY_ACCOUNT transaction will have a nonce zero as it is the first transaction in the account\n    const chainId = await this.getChainId();\n\n    const payload = await this.buildAccountDeployPayload(\n      { classHash, addressSalt, constructorCalldata, contractAddress: providedContractAddress },\n      {\n        nonce,\n        chainId,\n        version,\n        walletAddress: this.address, // unused parameter\n        maxFee: ZERO,\n        cairoVersion: undefined, // unused parameter\n      }\n    );\n\n    const response = await super.getDeployAccountEstimateFee(\n      { ...payload },\n      { version, nonce },\n      blockIdentifier,\n      skipValidate\n    );\n    const suggestedMaxFee = estimatedFeeToMaxFee(response.overall_fee);\n\n    return {\n      ...response,\n      suggestedMaxFee,\n    };\n  }\n\n  public async estimateDeployFee(\n    payload: UniversalDeployerContractPayload | UniversalDeployerContractPayload[],\n    transactionsDetail?: InvocationsDetails | undefined\n  ): Promise<EstimateFee> {\n    const calls = this.buildUDCContractPayload(payload);\n    return this.estimateInvokeFee(calls, transactionsDetail);\n  }\n\n  public async estimateFeeBulk(\n    invocations: Invocations,\n    { nonce, blockIdentifier, skipValidate }: EstimateFeeDetails = {}\n  ): Promise<EstimateFeeBulk> {\n    const accountInvocations = await this.accountInvocationsFactory(invocations, {\n      versions: [feeTransactionVersion, feeTransactionVersion_2],\n      nonce,\n      blockIdentifier,\n    });\n\n    const response = await super.getEstimateFeeBulk(accountInvocations, {\n      blockIdentifier,\n      skipValidate,\n    });\n\n    return [].concat(response as []).map((elem: any) => {\n      const suggestedMaxFee = estimatedFeeToMaxFee(elem.overall_fee);\n      return {\n        ...elem,\n        suggestedMaxFee,\n      };\n    });\n  }\n\n  public async buildInvocation(\n    call: Array<Call>,\n    signerDetails: InvocationsSignerDetails\n  ): Promise<Invocation> {\n    const calldata = getExecuteCalldata(call, await this.getCairoVersion());\n    const signature = await this.signer.signTransaction(call, signerDetails);\n\n    return {\n      contractAddress: this.address,\n      calldata,\n      signature,\n    };\n  }\n\n  public async execute(\n    calls: AllowArray<Call>,\n    abis: Abi[] | undefined = undefined,\n    transactionsDetail: InvocationsDetails = {}\n  ): Promise<InvokeFunctionResponse> {\n    const transactions = Array.isArray(calls) ? calls : [calls];\n    const nonce = toBigInt(transactionsDetail.nonce ?? (await this.getNonce()));\n    const maxFee =\n      transactionsDetail.maxFee ??\n      (await this.getSuggestedMaxFee(\n        { type: TransactionType.INVOKE, payload: calls },\n        transactionsDetail\n      ));\n    const version = toBigInt(transactionVersion);\n    const chainId = await this.getChainId();\n\n    const signerDetails: InvocationsSignerDetails = {\n      walletAddress: this.address,\n      nonce,\n      maxFee,\n      version,\n      chainId,\n      cairoVersion: await this.getCairoVersion(),\n    };\n\n    const signature = await this.signer.signTransaction(transactions, signerDetails, abis);\n\n    const calldata = getExecuteCalldata(transactions, await this.getCairoVersion());\n\n    return this.invokeFunction(\n      { contractAddress: this.address, calldata, signature },\n      {\n        nonce,\n        maxFee,\n        version,\n      }\n    );\n  }\n\n  /**\n   * First check if contract is already declared, if not declare it\n   * If contract already declared returned transaction_hash is ''.\n   * Method will pass even if contract is already declared\n   * @param transactionsDetail (optional)\n   */\n  public async declareIfNot(\n    payload: DeclareContractPayload,\n    transactionsDetail: InvocationsDetails = {}\n  ): Promise<DeclareContractResponse> {\n    const declareContractPayload = extractContractHashes(payload);\n    try {\n      await this.getClassByHash(declareContractPayload.classHash);\n    } catch (error) {\n      return this.declare(payload, transactionsDetail);\n    }\n    return {\n      transaction_hash: '',\n      class_hash: declareContractPayload.classHash,\n    };\n  }\n\n  public async declare(\n    payload: DeclareContractPayload,\n    transactionsDetail: InvocationsDetails = {}\n  ): Promise<DeclareContractResponse> {\n    const declareContractPayload = extractContractHashes(payload);\n    const details = {} as Details;\n\n    details.nonce = toBigInt(transactionsDetail.nonce ?? (await this.getNonce()));\n    details.maxFee =\n      transactionsDetail.maxFee ??\n      (await this.getSuggestedMaxFee(\n        {\n          type: TransactionType.DECLARE,\n          payload: declareContractPayload,\n        },\n        transactionsDetail\n      ));\n    details.version = !isSierra(payload.contract) ? transactionVersion : transactionVersion_2;\n    details.chainId = await this.getChainId();\n\n    const declareContractTransaction = await this.buildDeclarePayload(declareContractPayload, {\n      ...details,\n      walletAddress: this.address,\n      cairoVersion: undefined, // unused parameter\n    });\n\n    return this.declareContract(declareContractTransaction, details);\n  }\n\n  public async deploy(\n    payload: UniversalDeployerContractPayload | UniversalDeployerContractPayload[],\n    details?: InvocationsDetails | undefined\n  ): Promise<MultiDeployContractResponse> {\n    const params = [].concat(payload as []).map((it) => {\n      const {\n        classHash,\n        salt,\n        unique = true,\n        constructorCalldata = [],\n      } = it as UniversalDeployerContractPayload;\n\n      const compiledConstructorCallData = CallData.compile(constructorCalldata);\n      const deploySalt = salt ?? randomAddress();\n\n      return {\n        call: {\n          contractAddress: UDC.ADDRESS,\n          entrypoint: UDC.ENTRYPOINT,\n          calldata: [\n            classHash,\n            deploySalt,\n            toCairoBool(unique),\n            compiledConstructorCallData.length,\n            ...compiledConstructorCallData,\n          ],\n        },\n        address: calculateContractAddressFromHash(\n          unique ? starkCurve.pedersen(this.address, deploySalt) : deploySalt,\n          classHash,\n          compiledConstructorCallData,\n          unique ? UDC.ADDRESS : 0\n        ),\n      };\n    });\n\n    const calls = params.map((it) => it.call);\n    const addresses = params.map((it) => it.address);\n    const invokeResponse = await this.execute(calls, undefined, details);\n\n    return {\n      ...invokeResponse,\n      contract_address: addresses,\n    };\n  }\n\n  public async deployContract(\n    payload: UniversalDeployerContractPayload | UniversalDeployerContractPayload[],\n    details?: InvocationsDetails | undefined\n  ): Promise<DeployContractUDCResponse> {\n    const deployTx = await this.deploy(payload, details);\n    const txReceipt = await this.waitForTransaction(deployTx.transaction_hash);\n    return parseUDCEvent(txReceipt as DeployTransactionReceiptResponse);\n  }\n\n  public async declareAndDeploy(\n    payload: DeclareAndDeployContractPayload,\n    details?: InvocationsDetails | undefined\n  ): Promise<DeclareDeployUDCResponse> {\n    const { constructorCalldata, salt, unique } = payload;\n    let declare = await this.declareIfNot(payload, details);\n    if (declare.transaction_hash !== '') {\n      const tx = await this.waitForTransaction(declare.transaction_hash);\n      declare = { ...declare, ...tx };\n    }\n    const deploy = await this.deployContract(\n      { classHash: declare.class_hash, salt, unique, constructorCalldata },\n      details\n    );\n    return { declare: { ...declare }, deploy };\n  }\n\n  public deploySelf = this.deployAccount;\n\n  public async deployAccount(\n    {\n      classHash,\n      constructorCalldata = [],\n      addressSalt = 0,\n      contractAddress: providedContractAddress,\n    }: DeployAccountContractPayload,\n    transactionsDetail: InvocationsDetails = {}\n  ): Promise<DeployContractResponse> {\n    const version = toBigInt(transactionVersion);\n    const nonce = ZERO; // DEPLOY_ACCOUNT transaction will have a nonce zero as it is the first transaction in the account\n    const chainId = await this.getChainId();\n\n    const compiledCalldata = CallData.compile(constructorCalldata);\n    const contractAddress =\n      providedContractAddress ??\n      calculateContractAddressFromHash(addressSalt, classHash, compiledCalldata, 0);\n\n    const maxFee =\n      transactionsDetail.maxFee ??\n      (await this.getSuggestedMaxFee(\n        {\n          type: TransactionType.DEPLOY_ACCOUNT,\n          payload: {\n            classHash,\n            constructorCalldata: compiledCalldata,\n            addressSalt,\n            contractAddress,\n          },\n        },\n        transactionsDetail\n      ));\n\n    const signature = await this.signer.signDeployAccountTransaction({\n      classHash,\n      constructorCalldata: compiledCalldata,\n      contractAddress,\n      addressSalt,\n      chainId,\n      maxFee,\n      version,\n      nonce,\n    });\n\n    return this.deployAccountContract(\n      { classHash, addressSalt, constructorCalldata, signature },\n      {\n        nonce,\n        maxFee,\n        version,\n      }\n    );\n  }\n\n  public async signMessage(typedData: TypedData): Promise<Signature> {\n    return this.signer.signMessage(typedData, this.address);\n  }\n\n  public async hashMessage(typedData: TypedData): Promise<string> {\n    return getMessageHash(typedData, this.address);\n  }\n\n  public async verifyMessageHash(hash: BigNumberish, signature: Signature): Promise<boolean> {\n    try {\n      await this.callContract({\n        contractAddress: this.address,\n        entrypoint: 'isValidSignature',\n        calldata: CallData.compile({\n          hash: toBigInt(hash).toString(),\n          signature: formatSignature(signature),\n        }),\n      });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  public async verifyMessage(typedData: TypedData, signature: Signature): Promise<boolean> {\n    const hash = await this.hashMessage(typedData);\n    return this.verifyMessageHash(hash, signature);\n  }\n\n  public async getSuggestedMaxFee(\n    { type, payload }: EstimateFeeAction,\n    details: EstimateFeeDetails\n  ) {\n    let feeEstimate: EstimateFee;\n\n    switch (type) {\n      case TransactionType.INVOKE:\n        feeEstimate = await this.estimateInvokeFee(payload, details);\n        break;\n\n      case TransactionType.DECLARE:\n        feeEstimate = await this.estimateDeclareFee(payload, details);\n        break;\n\n      case TransactionType.DEPLOY_ACCOUNT:\n        feeEstimate = await this.estimateAccountDeployFee(payload, details);\n        break;\n\n      case TransactionType.DEPLOY:\n        feeEstimate = await this.estimateDeployFee(payload, details);\n        break;\n\n      default:\n        feeEstimate = { suggestedMaxFee: ZERO, overall_fee: ZERO };\n        break;\n    }\n\n    return feeEstimate.suggestedMaxFee;\n  }\n\n  /**\n   * will be renamed to buildDeclareContractTransaction\n   */\n  public async buildDeclarePayload(\n    payload: DeclareContractPayload,\n    { nonce, chainId, version, walletAddress, maxFee }: InvocationsSignerDetails\n  ): Promise<DeclareContractTransaction> {\n    const { classHash, contract, compiledClassHash } = extractContractHashes(payload);\n    const compressedCompiledContract = parseContract(contract);\n    const signature = await this.signer.signDeclareTransaction({\n      classHash,\n      compiledClassHash,\n      senderAddress: walletAddress,\n      chainId,\n      maxFee,\n      version,\n      nonce,\n    });\n\n    return {\n      senderAddress: walletAddress,\n      signature,\n      contract: compressedCompiledContract,\n      compiledClassHash,\n    };\n  }\n\n  public async buildAccountDeployPayload(\n    {\n      classHash,\n      addressSalt = 0,\n      constructorCalldata = [],\n      contractAddress: providedContractAddress,\n    }: DeployAccountContractPayload,\n    { nonce, chainId, version, maxFee }: InvocationsSignerDetails\n  ): Promise<DeployAccountContractTransaction> {\n    const compiledCalldata = CallData.compile(constructorCalldata);\n    const contractAddress =\n      providedContractAddress ??\n      calculateContractAddressFromHash(addressSalt, classHash, compiledCalldata, 0);\n\n    const signature = await this.signer.signDeployAccountTransaction({\n      classHash,\n      contractAddress,\n      chainId,\n      maxFee,\n      version,\n      nonce,\n      addressSalt,\n      constructorCalldata: compiledCalldata,\n    });\n\n    return {\n      classHash,\n      addressSalt,\n      constructorCalldata: compiledCalldata,\n      signature,\n    };\n  }\n\n  public buildUDCContractPayload(\n    payload: UniversalDeployerContractPayload | UniversalDeployerContractPayload[]\n  ): Call[] {\n    const calls = [].concat(payload as []).map((it) => {\n      const {\n        classHash,\n        salt = '0',\n        unique = true,\n        constructorCalldata = [],\n      } = it as UniversalDeployerContractPayload;\n      const compiledConstructorCallData = CallData.compile(constructorCalldata);\n\n      return {\n        contractAddress: UDC.ADDRESS,\n        entrypoint: UDC.ENTRYPOINT,\n        calldata: [\n          classHash,\n          salt,\n          toCairoBool(unique),\n          compiledConstructorCallData.length,\n          ...compiledConstructorCallData,\n        ],\n      };\n    });\n    return calls;\n  }\n\n  public async simulateTransaction(\n    invocations: Invocations,\n    { nonce, blockIdentifier, skipValidate, skipExecute }: SimulateTransactionDetails = {}\n  ): Promise<SimulateTransactionResponse> {\n    const accountInvocations = await this.accountInvocationsFactory(invocations, {\n      versions: [transactionVersion, transactionVersion_2],\n      nonce,\n      blockIdentifier,\n    });\n\n    return super.getSimulateTransaction(accountInvocations, {\n      blockIdentifier,\n      skipValidate,\n      skipExecute,\n    });\n  }\n\n  public async accountInvocationsFactory(\n    invocations: Invocations,\n    { versions, nonce, blockIdentifier }: AccountInvocationsFactoryDetails\n  ) {\n    const version = versions[0];\n    const safeNonce = await this.getNonceSafe(nonce);\n    const chainId = await this.getChainId();\n\n    // BULK ACTION FROM NEW ACCOUNT START WITH DEPLOY_ACCOUNT\n    const tx0Payload: any = 'payload' in invocations[0] ? invocations[0].payload : invocations[0];\n    const cairoVersion =\n      invocations[0].type === TransactionType.DEPLOY_ACCOUNT\n        ? await this.getCairoVersion(tx0Payload.classHash)\n        : await this.getCairoVersion();\n\n    return Promise.all(\n      ([] as Invocations).concat(invocations).map(async (transaction, index: number) => {\n        const txPayload: any = 'payload' in transaction ? transaction.payload : transaction;\n        const signerDetails: InvocationsSignerDetails = {\n          walletAddress: this.address,\n          nonce: toBigInt(Number(safeNonce) + index),\n          maxFee: ZERO,\n          version,\n          chainId,\n          cairoVersion,\n        };\n        const common = {\n          type: transaction.type,\n          version,\n          nonce: toBigInt(Number(safeNonce) + index),\n          blockIdentifier,\n        };\n\n        if (transaction.type === TransactionType.INVOKE) {\n          const payload = await this.buildInvocation(\n            ([] as Call[]).concat(txPayload),\n            signerDetails\n          );\n          return {\n            ...common,\n            ...payload,\n          } as AccountInvocationItem;\n        }\n        if (transaction.type === TransactionType.DECLARE) {\n          signerDetails.version = !isSierra(txPayload.contract)\n            ? toBigInt(versions[0])\n            : toBigInt(versions[1]);\n          const payload = await this.buildDeclarePayload(txPayload, signerDetails);\n          return {\n            ...common,\n            ...payload,\n            version: signerDetails.version,\n          } as AccountInvocationItem;\n        }\n        if (transaction.type === TransactionType.DEPLOY_ACCOUNT) {\n          const payload = await this.buildAccountDeployPayload(txPayload, signerDetails);\n          return {\n            ...common,\n            ...payload,\n          } as AccountInvocationItem;\n        }\n        if (transaction.type === TransactionType.DEPLOY) {\n          const calls = this.buildUDCContractPayload(txPayload);\n          const payload = await this.buildInvocation(calls, signerDetails);\n          return {\n            ...common,\n            ...payload,\n            type: TransactionType.INVOKE,\n          } as AccountInvocationItem;\n        }\n        throw Error(`accountInvocationsFactory: unsupported transaction type: ${transaction}`);\n      })\n    ) as Promise<AccountInvocations>;\n  }\n\n  public override async getStarkName(\n    address: BigNumberish = this.address, // default to the wallet address\n    StarknetIdContract?: string\n  ): Promise<string> {\n    return super.getStarkName(address, StarknetIdContract);\n  }\n}\n","import { StarknetChainId } from '../constants';\nimport type {\n  AccountInvocations,\n  BigNumberish,\n  BlockIdentifier,\n  Call,\n  CallContractResponse,\n  ContractClassResponse,\n  ContractVersion,\n  DeclareContractResponse,\n  DeclareContractTransaction,\n  DeployAccountContractPayload,\n  DeployAccountContractTransaction,\n  DeployContractResponse,\n  EstimateFeeResponse,\n  EstimateFeeResponseBulk,\n  GetBlockResponse,\n  GetCodeResponse,\n  GetTransactionReceiptResponse,\n  GetTransactionResponse,\n  Invocation,\n  InvocationsDetailsWithNonce,\n  InvokeFunctionResponse,\n  Nonce,\n  SimulateTransactionResponse,\n  StateUpdateResponse,\n  Storage,\n  getContractVersionOptions,\n  getEstimateFeeBulkOptions,\n  getSimulateTransactionOptions,\n  waitForTransactionOptions,\n} from '../types';\n\nexport abstract class ProviderInterface {\n  /**\n   * Gets the Starknet chain Id\n   *\n   * @returns the chain Id\n   */\n  public abstract getChainId(): Promise<StarknetChainId>;\n\n  /**\n   * Calls a function on the Starknet contract.\n   *\n   * @param call transaction to be called\n   * @param blockIdentifier block identifier\n   * @returns the result of the function on the smart contract.\n   */\n  public abstract callContract(\n    call: Call,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<CallContractResponse>;\n\n  /**\n   * Gets the block information\n   *\n   * @param blockIdentifier block identifier\n   * @returns the block object\n   */\n  public abstract getBlock(blockIdentifier: BlockIdentifier): Promise<GetBlockResponse>;\n\n  /**\n   * @deprecated The method should not be used\n   */\n  public abstract getCode(\n    contractAddress: string,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<GetCodeResponse>;\n\n  /**\n   * Gets the contract class of the deployed contract.\n   *\n   * @param contractAddress - contract address\n   * @param blockIdentifier - block identifier\n   * @returns Contract class of compiled contract\n   */\n  public abstract getClassAt(\n    contractAddress: string,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<ContractClassResponse>;\n\n  /**\n   * Returns the contract class hash in the given block for the contract deployed at the given address\n   *\n   * @param contractAddress - contract address\n   * @param blockIdentifier - block identifier\n   * @returns Class hash\n   */\n  public abstract getClassHashAt(\n    contractAddress: string,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<string>;\n\n  /**\n   * Returns the contract class deployed under the given class hash.\n   *\n   * @param classHash - class hash\n   * @returns Contract class of compiled contract\n   */\n  public abstract getClassByHash(classHash: string): Promise<ContractClassResponse>;\n\n  /**\n   * Returns the nonce associated with the given address in the given block\n   *\n   * @param contractAddress - contract address\n   * @returns the hex nonce\n   */\n  public abstract getNonceForAddress(\n    contractAddress: string,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<Nonce>;\n\n  /**\n   * Get the value of the storage (contract's variable) at the given address and key\n   *\n   * @param contractAddress\n   * @param key - from getStorageVarAddress('<STORAGE_VARIABLE_NAME>') (WIP)\n   * @param blockIdentifier - block identifier\n   * @returns the value of the storage variable\n   */\n  public abstract getStorageAt(\n    contractAddress: string,\n    key: BigNumberish,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<Storage>;\n\n  /**\n   * Gets the transaction information from a tx id.\n   *\n   * @param txHash\n   * @returns the transaction object \\{ transaction_id, status, transaction, block_number?, block_number?, transaction_index?, transaction_failure_reason? \\}\n   */\n  public abstract getTransaction(transactionHash: BigNumberish): Promise<GetTransactionResponse>;\n\n  /**\n   * Gets the transaction receipt from a tx hash.\n   *\n   * @param txHash\n   * @returns the transaction receipt object\n   */\n  public abstract getTransactionReceipt(\n    transactionHash: BigNumberish\n  ): Promise<GetTransactionReceiptResponse>;\n\n  /**\n   * Deploys a given compiled Account contract (json) to starknet\n   *\n   * @param payload payload to be deployed containing:\n   * - compiled contract code\n   * - constructor calldata\n   * - address salt\n   * @returns a confirmation of sending a transaction on the starknet contract\n   */\n  public abstract deployAccountContract(\n    payload: DeployAccountContractPayload,\n    details: InvocationsDetailsWithNonce\n  ): Promise<DeployContractResponse>;\n\n  /**\n   * Invokes a function on starknet\n   * @deprecated This method wont be supported as soon as fees are mandatory. Should not be used outside of Account class\n   *\n   * @param invocation the invocation object containing:\n   * - contractAddress - the address of the contract\n   * - entrypoint - the entrypoint of the contract\n   * - calldata - (defaults to []) the calldata\n   * - signature - (defaults to []) the signature\n   * @param details - optional details containing:\n   * - nonce - optional nonce\n   * - version - optional version\n   * - maxFee - optional maxFee\n   * @returns response from addTransaction\n   */\n  public abstract invokeFunction(\n    invocation: Invocation,\n    details: InvocationsDetailsWithNonce\n  ): Promise<InvokeFunctionResponse>;\n\n  /**\n   * Declares a given compiled contract (json) to starknet\n   * @param transaction transaction payload to be deployed containing:\n   * - compiled contract code\n   * - sender address\n   * - signature\n   * @param details Invocation Details containing:\n   * - nonce\n   * - optional version\n   * - optional maxFee\n   * @returns a confirmation of sending a transaction on the starknet contract\n   */\n  public abstract declareContract(\n    transaction: DeclareContractTransaction,\n    details: InvocationsDetailsWithNonce\n  ): Promise<DeclareContractResponse>;\n\n  /**\n   * Estimates the fee for a given INVOKE transaction\n   * @deprecated Please use getInvokeEstimateFee or getDeclareEstimateFee instead. Should not be used outside of Account class\n   *\n   * @param invocation the invocation object containing:\n   * - contractAddress - the address of the contract\n   * - entrypoint - the entrypoint of the contract\n   * - calldata - (defaults to []) the calldata\n   * - signature - (defaults to []) the signature\n   * @param details - optional details containing:\n   * - nonce - optional nonce\n   * - version - optional version\n   * @param blockIdentifier - (optional) block identifier\n   * @param skipValidate - (optional) skip cairo __validate__ method\n   * @returns the estimated fee\n   */\n  public abstract getEstimateFee(\n    invocation: Invocation,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier: BlockIdentifier,\n    skipValidate?: boolean\n  ): Promise<EstimateFeeResponse>;\n\n  /**\n   * Estimates the fee for a given INVOKE transaction\n   *\n   * @param invocation the invocation object containing:\n   * - contractAddress - the address of the contract\n   * - entrypoint - the entrypoint of the contract\n   * - calldata - (defaults to []) the calldata\n   * - signature - (defaults to []) the signature\n   * @param details - optional details containing:\n   * - nonce - optional nonce\n   * - version - optional version\n   * @param blockIdentifier - (optional) block identifier\n   * @param skipValidate - (optional) skip cairo __validate__ method\n   * @returns the estimated fee\n   */\n  public abstract getInvokeEstimateFee(\n    invocation: Invocation,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier?: BlockIdentifier,\n    skipValidate?: boolean\n  ): Promise<EstimateFeeResponse>;\n\n  /**\n   * Estimates the fee for a given DECLARE transaction\n   *\n   * @param transaction transaction payload to be declared containing:\n   * - compiled contract code\n   * - sender address\n   * - signature - (defaults to []) the signature\n   * @param details - optional details containing:\n   * - nonce\n   * - version - optional version\n   * - optional maxFee\n   * @param blockIdentifier - (optional) block identifier\n   * @param skipValidate - (optional) skip cairo __validate__ method\n   * @returns the estimated fee\n   */\n  public abstract getDeclareEstimateFee(\n    transaction: DeclareContractTransaction,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier?: BlockIdentifier,\n    skipValidate?: boolean\n  ): Promise<EstimateFeeResponse>;\n\n  /**\n   * Estimates the fee for a given DEPLOY_ACCOUNT transaction\n   *\n   * @param transaction transaction payload to be deployed containing:\n   * - classHash\n   * - constructorCalldata\n   * - addressSalt\n   * - signature - (defaults to []) the signature\n   * @param details - optional details containing:\n   * - nonce\n   * - version - optional version\n   * - optional maxFee\n   * @param blockIdentifier - (optional) block identifier\n   * @param skipValidate - (optional) skip cairo __validate__ method\n   * @returns the estimated fee\n   */\n  public abstract getDeployAccountEstimateFee(\n    transaction: DeployAccountContractTransaction,\n    details: InvocationsDetailsWithNonce,\n    blockIdentifier?: BlockIdentifier,\n    skipValidate?: boolean\n  ): Promise<EstimateFeeResponse>;\n\n  /**\n   * Estimates the fee for a list of INVOKE transaction\n   *\n   * @param invocations AccountInvocations - Complete invocations array with account details\n   * @param options getEstimateFeeBulkOptions\n   * - (optional) blockIdentifier - BlockIdentifier\n   * - (optional) skipValidate - boolean (default false)\n   * @returns the estimated fee\n   */\n  public abstract getEstimateFeeBulk(\n    invocations: AccountInvocations,\n    options?: getEstimateFeeBulkOptions\n  ): Promise<EstimateFeeResponseBulk>;\n\n  /**\n   * Wait for the transaction to be accepted\n   * @param txHash - transaction hash\n   * @param options waitForTransactionOptions\n   * - (optional) retryInterval: number | undefined;\n   * - (optional) successStates: TransactionStatus[] | undefined;\n   * @return GetTransactionReceiptResponse\n   */\n  public abstract waitForTransaction(\n    txHash: BigNumberish,\n    options?: waitForTransactionOptions\n  ): Promise<GetTransactionReceiptResponse>;\n\n  /**\n   * Simulates the transaction and returns the transaction trace and estimated fee.\n   *\n   * @param invocations AccountInvocations - Complete invocations array with account details\n   * @param options - getSimulateTransactionOptions\n   *  - (optional) blockIdentifier - block identifier\n   *  - (optional) skipValidate - skip cairo __validate__ method\n   *  - (optional) skipExecute - skip cairo __execute__ method\n   * @returns an array of transaction trace and estimated fee\n   */\n  public abstract getSimulateTransaction(\n    invocations: AccountInvocations,\n    options?: getSimulateTransactionOptions\n  ): Promise<SimulateTransactionResponse>;\n\n  /**\n   * Gets the state changes in a specific block (result of executing the requested block)\n   *\n   * @param blockIdentifier - block identifier\n   * @returns StateUpdateResponse\n   */\n  public abstract getStateUpdate(blockIdentifier?: BlockIdentifier): Promise<StateUpdateResponse>;\n\n  /**\n   * Gets the contract version from the provided address\n   * @param contractAddress string\n   * @param classHash undefined\n   * @param options - getContractVersionOptions\n   *   - (optional) compiler - (default true) extract compiler version using type tactic from abi\n   *   - (optional) blockIdentifier - block identifier\n   */\n  public abstract getContractVersion(\n    contractAddress: string,\n    classHash?: undefined,\n    options?: getContractVersionOptions\n  ): Promise<ContractVersion>;\n\n  /**\n   * Gets the contract version from the provided address\n   * @param contractAddress undefined\n   * @param classHash\n   * @param options - getContractVersionOptions\n   *   - (optional) compiler - (default true) extract compiler version using type tactic from abi\n   *   - (optional) blockIdentifier - block identifier\n   */\n  public abstract getContractVersion(\n    contractAddress: undefined,\n    classHash: string,\n    options?: getContractVersionOptions\n  ): Promise<ContractVersion>;\n}\n","import { Provider } from './default';\n\nexport * from './default';\nexport * from './errors';\nexport * from './sequencer';\nexport * from './interface';\nexport * from './rpc';\n\nexport const defaultProvider = new Provider({ rpc: { default: true } });\n","import { ProviderInterface } from '../provider';\nimport { SignerInterface } from '../signer';\nimport {\n  Abi,\n  AllowArray,\n  BigNumberish,\n  BlockIdentifier,\n  CairoVersion,\n  Call,\n  DeclareAndDeployContractPayload,\n  DeclareContractPayload,\n  DeclareContractResponse,\n  DeclareDeployUDCResponse,\n  DeployAccountContractPayload,\n  DeployContractResponse,\n  DeployContractUDCResponse,\n  EstimateFeeAction,\n  EstimateFeeDetails,\n  EstimateFeeResponse,\n  EstimateFeeResponseBulk,\n  Invocations,\n  InvocationsDetails,\n  InvokeFunctionResponse,\n  MultiDeployContractResponse,\n  Nonce,\n  Signature,\n  SimulateTransactionDetails,\n  SimulateTransactionResponse,\n  TypedData,\n  UniversalDeployerContractPayload,\n} from '../types';\n\nexport abstract class AccountInterface extends ProviderInterface {\n  public abstract address: string;\n\n  public abstract signer: SignerInterface;\n\n  public abstract cairoVersion: CairoVersion;\n\n  /**\n   * Estimate Fee for executing an INVOKE transaction on starknet\n   *\n   * @param calls the invocation object containing:\n   * - contractAddress - the address of the contract\n   * - entrypoint - the entrypoint of the contract\n   * - calldata - (defaults to []) the calldata\n   *\n   * @returns response from estimate_fee\n   */\n  public abstract estimateInvokeFee(\n    calls: AllowArray<Call>,\n    estimateFeeDetails?: EstimateFeeDetails\n  ): Promise<EstimateFeeResponse>;\n\n  /**\n   * Estimate Fee for executing a DECLARE transaction on starknet\n   *\n   * @param contractPayload the payload object containing:\n   * - contract - the compiled contract to be declared\n   * - classHash - the class hash of the compiled contract. This can be obtained by using starknet-cli.\n   *\n   * @returns response from estimate_fee\n   */\n  public abstract estimateDeclareFee(\n    contractPayload: DeclareContractPayload,\n    estimateFeeDetails?: EstimateFeeDetails\n  ): Promise<EstimateFeeResponse>;\n\n  /**\n   * Estimate Fee for executing a DEPLOY_ACCOUNT transaction on starknet\n   *\n   * @param contractPayload -\n   * - contract - the compiled contract to be deployed\n   * - classHash - the class hash of the compiled contract. This can be obtained by using starknet-cli.\n   * @param estimateFeeDetails -\n   * - optional blockIdentifier\n   * - constant nonce = 0\n   * @returns response from estimate_fee\n   */\n  public abstract estimateAccountDeployFee(\n    contractPayload: DeployAccountContractPayload,\n    estimateFeeDetails?: EstimateFeeDetails\n  ): Promise<EstimateFeeResponse>;\n\n  /**\n   * Estimate Fee for executing a UDC DEPLOY transaction on starknet\n   * This is different from the normal DEPLOY transaction as it goes through the Universal Deployer Contract (UDC)\n   \n  * @param deployContractPayload containing\n   * - classHash: computed class hash of compiled contract\n   * - salt: address salt\n   * - unique: bool if true ensure unique salt\n   * - calldata: constructor calldata\n   * \n   * @param transactionsDetail Invocation Details containing:\n   *  - optional nonce\n   *  - optional version\n   *  - optional maxFee\n   */\n  public abstract estimateDeployFee(\n    deployContractPayload: UniversalDeployerContractPayload | UniversalDeployerContractPayload[],\n    transactionsDetail?: InvocationsDetails\n  ): Promise<EstimateFeeResponse>;\n\n  /**\n   * Estimate Fee for executing a list of transactions on starknet\n   * Contract must be deployed for fee estimation to be possible\n   *\n   * @param transactions array of transaction object containing :\n   * - type - the type of transaction : 'DECLARE' | (multi)'DEPLOY' | (multi)'INVOKE_FUNCTION' | 'DEPLOY_ACCOUNT'\n   * - payload - the payload of the transaction\n   *\n   * @returns response from estimate_fee\n   */\n  public abstract estimateFeeBulk(\n    invocations: Invocations,\n    details?: EstimateFeeDetails\n  ): Promise<EstimateFeeResponseBulk>;\n\n  /**\n   * Invoke execute function in account contract\n   *\n   * @param transactions the invocation object or an array of them, containing:\n   * - contractAddress - the address of the contract\n   * - entrypoint - the entrypoint of the contract\n   * - calldata - (defaults to []) the calldata\n   * - signature - (defaults to []) the signature\n   * @param abi (optional) the abi of the contract for better displaying\n   *\n   * @returns response from addTransaction\n   */\n  public abstract execute(\n    transactions: AllowArray<Call>,\n    abis?: Abi[],\n    transactionsDetail?: InvocationsDetails\n  ): Promise<InvokeFunctionResponse>;\n\n  /**\n   * Declares a given compiled contract (json) to starknet\n   * \n   * @param contractPayload transaction payload to be deployed containing:\n  - contract: compiled contract code\n  - (optional) classHash: computed class hash of compiled contract. Pre-compute it for faster execution.\n  - (required for Cairo1 without compiledClassHash) casm: CompiledContract | string;\n  - (optional for Cairo1 with casm) compiledClassHash: compiled class hash from casm. Pre-compute it for faster execution.\n   * @param transactionsDetail Invocation Details containing:\n  - optional nonce\n  - optional version\n  - optional maxFee\n   * @returns a confirmation of sending a transaction on the starknet contract\n   */\n  public abstract declare(\n    contractPayload: DeclareContractPayload,\n    transactionsDetail?: InvocationsDetails\n  ): Promise<DeclareContractResponse>;\n\n  /**\n   * Deploys a declared contract to starknet - using Universal Deployer Contract (UDC)\n   * support multicall\n   *\n   * @param payload -\n   * - classHash: computed class hash of compiled contract\n   * - [constructorCalldata] contract constructor calldata\n   * - [salt=pseudorandom] deploy address salt\n   * - [unique=true] ensure unique salt\n   * @param details -\n   * - [nonce=getNonce]\n   * - [version=transactionVersion]\n   * - [maxFee=getSuggestedMaxFee]\n   * @returns\n   * - contract_address[]\n   * - transaction_hash\n   */\n  public abstract deploy(\n    payload: UniversalDeployerContractPayload | UniversalDeployerContractPayload[],\n    details?: InvocationsDetails | undefined\n  ): Promise<MultiDeployContractResponse>;\n\n  /**\n   * Simplify deploy simulating old DeployContract with same response + UDC specific response\n   * Internal wait for L2 transaction, support multicall\n   *\n   * @param payload -\n   * - classHash: computed class hash of compiled contract\n   * - [constructorCalldata] contract constructor calldata\n   * - [salt=pseudorandom] deploy address salt\n   * - [unique=true] ensure unique salt\n   * @param details -\n   * - [nonce=getNonce]\n   * - [version=transactionVersion]\n   * - [maxFee=getSuggestedMaxFee]\n   * @returns\n   *  - contract_address\n   *  - transaction_hash\n   *  - address\n   *  - deployer\n   *  - unique\n   *  - classHash\n   *  - calldata_len\n   *  - calldata\n   *  - salt\n   */\n  public abstract deployContract(\n    payload: UniversalDeployerContractPayload | UniversalDeployerContractPayload[],\n    details?: InvocationsDetails | undefined\n  ): Promise<DeployContractUDCResponse>;\n\n  /**\n   * Declares and Deploy a given compiled contract (json) to starknet using UDC\n   * Internal wait for L2 transaction, do not support multicall\n   * Method will pass even if contract is already declared (internal using DeclareIfNot)\n   *\n   * @param payload\n   * - contract: compiled contract code\n   * - [casm=cairo1]: CairoAssembly | undefined;\n   * - [compiledClassHash]: string | undefined;\n   * - [classHash]: computed class hash of compiled contract\n   * - [constructorCalldata] contract constructor calldata\n   * - [salt=pseudorandom] deploy address salt\n   * - [unique=true] ensure unique salt\n   * @param details\n   * - [nonce=getNonce]\n   * - [version=transactionVersion]\n   * - [maxFee=getSuggestedMaxFee]\n   * @returns\n   * - declare\n   *    - transaction_hash\n   * - deploy\n   *    - contract_address\n   *    - transaction_hash\n   *    - address\n   *    - deployer\n   *    - unique\n   *    - classHash\n   *    - calldata_len\n   *    - calldata\n   *    - salt\n   */\n  public abstract declareAndDeploy(\n    payload: DeclareAndDeployContractPayload,\n    details?: InvocationsDetails | undefined\n  ): Promise<DeclareDeployUDCResponse>;\n\n  /**\n   * Deploy the account on Starknet\n   * \n   * @param contractPayload transaction payload to be deployed containing:\n  - classHash: computed class hash of compiled contract\n  - optional constructor calldata\n  - optional address salt  \n  - optional contractAddress\n   * @param transactionsDetail Invocation Details containing:\n  - constant nonce = 0\n  - optional version\n  - optional maxFee\n   * @returns a confirmation of sending a transaction on the starknet contract\n   */\n  public abstract deployAccount(\n    contractPayload: DeployAccountContractPayload,\n    transactionsDetail?: InvocationsDetails\n  ): Promise<DeployContractResponse>;\n\n  /**\n   * Sign an JSON object for off-chain usage with the starknet private key and return the signature\n   * This adds a message prefix so it cant be interchanged with transactions\n   *\n   * @param json - JSON object to be signed\n   * @returns the signature of the JSON object\n   * @throws {Error} if the JSON object is not a valid JSON\n   */\n  public abstract signMessage(typedData: TypedData): Promise<Signature>;\n\n  /**\n   * Hash a JSON object with pederson hash and return the hash\n   * This adds a message prefix so it cant be interchanged with transactions\n   *\n   * @param json - JSON object to be hashed\n   * @returns the hash of the JSON object\n   * @throws {Error} if the JSON object is not a valid JSON\n   */\n  public abstract hashMessage(typedData: TypedData): Promise<string>;\n\n  /**\n   * Verify a signature of a JSON object\n   *\n   * @param typedData - JSON object to be verified\n   * @param signature - signature of the JSON object\n   * @returns true if the signature is valid, false otherwise\n   * @throws {Error} if the JSON object is not a valid JSON or the signature is not a valid signature\n   */\n  public abstract verifyMessage(typedData: TypedData, signature: Signature): Promise<boolean>;\n\n  /**\n   * Verify a signature of a given hash\n   * @warning This method is not recommended, use verifyMessage instead\n   *\n   * @param hash - hash to be verified\n   * @param signature - signature of the hash\n   * @returns true if the signature is valid, false otherwise\n   * @throws {Error} if the signature is not a valid signature\n   */\n  public abstract verifyMessageHash(hash: BigNumberish, signature: Signature): Promise<boolean>;\n\n  /**\n   * Gets the nonce of the account with respect to a specific block\n   *\n   * @param  {BlockIdentifier} blockIdentifier - optional blockIdentifier. Defaults to 'pending'\n   * @returns nonce of the account\n   */\n  public abstract getNonce(blockIdentifier?: BlockIdentifier): Promise<Nonce>;\n\n  /**\n   * Gets Suggested Max Fee based on the transaction type\n   *\n   * @param  {EstimateFeeAction} estimateFeeAction\n   * @param  {EstimateFeeDetails} details\n   * @returns suggestedMaxFee\n   */\n  public abstract getSuggestedMaxFee(\n    estimateFeeAction: EstimateFeeAction,\n    details: EstimateFeeDetails\n  ): Promise<bigint>;\n\n  /**\n   * Simulates an array of transaction and returns an array of transaction trace and estimated fee.\n   *\n   * @param invocations Invocations containing:\n   * - type - transaction type: DECLARE, (multi)DEPLOY, DEPLOY_ACCOUNT, (multi)INVOKE_FUNCTION\n   * @param details SimulateTransactionDetails\n   *\n   * @returns response from simulate_transaction\n   */\n  public abstract simulateTransaction(\n    invocations: Invocations,\n    details?: SimulateTransactionDetails\n  ): Promise<SimulateTransactionResponse>;\n}\n","import {\n  Abi,\n  AbiEnums,\n  AbiEvents,\n  AbiStructs,\n  Cairo1Event,\n  EventAbi,\n  LegacyEvent,\n  ParsedEvent,\n  ParsedEvents,\n} from '../../types';\nimport { Event as ProviderEvent } from '../../types/provider/response';\nimport responseParser from '../calldata/responseParser';\nimport { starkCurve } from '../ec';\nimport { addHexPrefix, utf8ToArray } from '../encode';\n\nexport function getAbiEvents(abi: Abi): AbiEvents {\n  return abi\n    .filter((abiEntry) => abiEntry.type === 'event' && (abiEntry.size || abiEntry.kind !== 'enum'))\n    .reduce((acc, abiEntry) => {\n      const entryName = abiEntry.name.slice(abiEntry.name.lastIndexOf(':') + 1);\n      const abiEntryMod = { ...abiEntry };\n      abiEntryMod.name = entryName;\n      return {\n        ...acc,\n        [addHexPrefix(starkCurve.keccak(utf8ToArray(entryName)).toString(16))]: abiEntryMod,\n      };\n    }, {});\n}\n\n/**\n * Parse raw events and structure them into response object based on a contract structs and defined events\n * @param providerReceivedEvents ProviderEvent[] - Array of raw events\n * @param abiEvents AbiEvents - Events defined in the abi\n * @param abiStructs AbiStructs - Structs defined in the abi\n * @return ParsedEvents - parsed events corresponding to the abi\n */\nexport function parseEvents(\n  providerReceivedEvents: Array<ProviderEvent>,\n  abiEvents: AbiEvents,\n  abiStructs: AbiStructs,\n  abiEnums: AbiEnums\n): ParsedEvents {\n  const ret = providerReceivedEvents.flat().reduce((acc, recEvent) => {\n    const abiEvent: EventAbi = abiEvents[recEvent.keys[0]];\n    if (!abiEvent) {\n      return acc;\n    }\n\n    // Create our final event object\n    const parsedEvent: ParsedEvent = {};\n    parsedEvent[abiEvent.name] = {};\n    // Remove the event's name hashed from the keys array\n    recEvent.keys.shift();\n\n    const keysIter = recEvent.keys[Symbol.iterator]();\n    const dataIter = recEvent.data[Symbol.iterator]();\n\n    const abiEventKeys =\n      (abiEvent as Cairo1Event).members?.filter((it) => it.kind === 'key') ||\n      (abiEvent as LegacyEvent).keys;\n    const abiEventData =\n      (abiEvent as Cairo1Event).members?.filter((it) => it.kind === 'data') ||\n      (abiEvent as LegacyEvent).data;\n\n    abiEventKeys.forEach((key) => {\n      parsedEvent[abiEvent.name][key.name] = responseParser(\n        keysIter,\n        key,\n        abiStructs,\n        abiEnums,\n        parsedEvent[abiEvent.name]\n      );\n    });\n\n    abiEventData.forEach((data) => {\n      parsedEvent[abiEvent.name][data.name] = responseParser(\n        dataIter,\n        data,\n        abiStructs,\n        abiEnums,\n        parsedEvent[abiEvent.name]\n      );\n    });\n    acc.push(parsedEvent);\n    return acc;\n  }, [] as ParsedEvents);\n  return ret;\n}\n","import type { Abi as AbiKanabi } from 'abi-wan-kanabi';\n\nimport { AccountInterface } from '../account';\nimport { ProviderInterface, defaultProvider } from '../provider';\nimport {\n  Abi,\n  AbiEvents,\n  ArgsOrCalldata,\n  ArgsOrCalldataWithOptions,\n  AsyncContractFunction,\n  Call,\n  CallOptions,\n  Calldata,\n  ContractFunction,\n  ContractOptions,\n  EstimateFeeResponse,\n  FunctionAbi,\n  GetTransactionReceiptResponse,\n  InvokeFunctionResponse,\n  InvokeOptions,\n  InvokeTransactionReceiptResponse,\n  ParsedEvents,\n  RawArgs,\n  Result,\n  StructAbi,\n  ValidateType,\n} from '../types';\nimport assert from '../utils/assert';\nimport { CallData, cairo } from '../utils/calldata';\nimport { createAbiParser } from '../utils/calldata/parser';\nimport { getAbiEvents, parseEvents as parseRawEvents } from '../utils/events/index';\nimport { cleanHex } from '../utils/num';\nimport { ContractInterface, TypedContract } from './interface';\n\nexport const splitArgsAndOptions = (args: ArgsOrCalldataWithOptions) => {\n  const options = [\n    'blockIdentifier',\n    'parseRequest',\n    'parseResponse',\n    'formatResponse',\n    'maxFee',\n    'nonce',\n    'signature',\n    'addressSalt',\n  ];\n  const lastArg = args[args.length - 1];\n  if (typeof lastArg === 'object' && options.some((x) => x in lastArg)) {\n    return { args: args as ArgsOrCalldata, options: args.pop() as ContractOptions };\n  }\n  return { args: args as ArgsOrCalldata };\n};\n\n/**\n * Adds call methods to the contract\n */\nfunction buildCall(contract: Contract, functionAbi: FunctionAbi): AsyncContractFunction {\n  return async function (...args: ArgsOrCalldataWithOptions): Promise<any> {\n    const params = splitArgsAndOptions(args);\n    return contract.call(functionAbi.name, params.args, {\n      parseRequest: true,\n      parseResponse: true,\n      ...params.options,\n    });\n  };\n}\n\n/**\n * Adds invoke methods to the contract\n */\nfunction buildInvoke(contract: Contract, functionAbi: FunctionAbi): AsyncContractFunction {\n  return async function (...args: Array<any>): Promise<any> {\n    const params = splitArgsAndOptions(args);\n    return contract.invoke(functionAbi.name, params.args, {\n      parseRequest: true,\n      ...params.options,\n    });\n  };\n}\n\n/**\n * Adds call/invoke methods to the contract\n */\nfunction buildDefault(contract: Contract, functionAbi: FunctionAbi): AsyncContractFunction {\n  if (functionAbi.stateMutability === 'view' || functionAbi.state_mutability === 'view') {\n    return buildCall(contract, functionAbi);\n  }\n  return buildInvoke(contract, functionAbi);\n}\n\n/**\n * Adds populate for methods to the contract\n */\nfunction buildPopulate(contract: Contract, functionAbi: FunctionAbi): ContractFunction {\n  return function (...args: Array<any>): any {\n    return contract.populate(functionAbi.name, args);\n  };\n}\n\n/**\n * Adds estimateFee for methods to the contract\n */\nfunction buildEstimate(contract: Contract, functionAbi: FunctionAbi): ContractFunction {\n  return function (...args: Array<any>): any {\n    return contract.estimate(functionAbi.name, args);\n  };\n}\n\nexport function getCalldata(args: RawArgs, callback: Function): Calldata {\n  // Check if Calldata in args or args[0] else compile\n  if (Array.isArray(args) && '__compiled__' in args) return args as Calldata;\n  if (Array.isArray(args) && Array.isArray(args[0]) && '__compiled__' in args[0])\n    return args[0] as Calldata;\n  return callback();\n}\n\nexport class Contract implements ContractInterface {\n  abi: Abi;\n\n  address: string;\n\n  providerOrAccount: ProviderInterface | AccountInterface;\n\n  deployTransactionHash?: string;\n\n  protected readonly structs: { [name: string]: StructAbi };\n\n  protected readonly events: AbiEvents;\n\n  readonly functions!: { [name: string]: AsyncContractFunction };\n\n  readonly callStatic!: { [name: string]: AsyncContractFunction };\n\n  readonly populateTransaction!: { [name: string]: ContractFunction };\n\n  readonly estimateFee!: { [name: string]: ContractFunction };\n\n  readonly [key: string]: AsyncContractFunction | any;\n\n  private callData: CallData;\n\n  /**\n   * Contract class to handle contract methods\n   *\n   * @param abi - Abi of the contract object\n   * @param address (optional) - address to connect to\n   * @param providerOrAccount (optional) - Provider or Account to attach to\n   */\n  constructor(\n    abi: Abi,\n    address: string,\n    providerOrAccount: ProviderInterface | AccountInterface = defaultProvider\n  ) {\n    this.address = address && address.toLowerCase();\n    this.providerOrAccount = providerOrAccount;\n    this.callData = new CallData(abi);\n    this.structs = CallData.getAbiStruct(abi);\n    this.events = getAbiEvents(abi);\n    const parser = createAbiParser(abi);\n    this.abi = parser.getLegacyFormat();\n\n    const options = { enumerable: true, value: {}, writable: false };\n    Object.defineProperties(this, {\n      functions: { enumerable: true, value: {}, writable: false },\n      callStatic: { enumerable: true, value: {}, writable: false },\n      populateTransaction: { enumerable: true, value: {}, writable: false },\n      estimateFee: { enumerable: true, value: {}, writable: false },\n    });\n    this.abi.forEach((abiElement) => {\n      if (abiElement.type !== 'function') return;\n      const signature = abiElement.name;\n      if (!this[signature]) {\n        Object.defineProperty(this, signature, {\n          ...options,\n          value: buildDefault(this, abiElement),\n        });\n      }\n      if (!this.functions[signature]) {\n        Object.defineProperty(this.functions, signature, {\n          ...options,\n          value: buildDefault(this, abiElement),\n        });\n      }\n      if (!this.callStatic[signature]) {\n        Object.defineProperty(this.callStatic, signature, {\n          ...options,\n          value: buildCall(this, abiElement),\n        });\n      }\n      if (!this.populateTransaction[signature]) {\n        Object.defineProperty(this.populateTransaction, signature, {\n          ...options,\n          value: buildPopulate(this, abiElement),\n        });\n      }\n      if (!this.estimateFee[signature]) {\n        Object.defineProperty(this.estimateFee, signature, {\n          ...options,\n          value: buildEstimate(this, abiElement),\n        });\n      }\n    });\n  }\n\n  public attach(address: string): void {\n    this.address = address;\n  }\n\n  public connect(providerOrAccount: ProviderInterface | AccountInterface) {\n    this.providerOrAccount = providerOrAccount;\n  }\n\n  public async deployed(): Promise<Contract> {\n    if (this.deployTransactionHash) {\n      await this.providerOrAccount.waitForTransaction(this.deployTransactionHash);\n      this.deployTransactionHash = undefined;\n    }\n    return this;\n  }\n\n  public async call(\n    method: string,\n    args: ArgsOrCalldata = [],\n    {\n      parseRequest = true,\n      parseResponse = true,\n      formatResponse = undefined,\n      blockIdentifier = undefined,\n    }: CallOptions = {}\n  ): Promise<Result> {\n    assert(this.address !== null, 'contract is not connected to an address');\n\n    const calldata = getCalldata(args, () => {\n      if (parseRequest) {\n        this.callData.validate(ValidateType.CALL, method, args);\n        return this.callData.compile(method, args);\n      }\n      // eslint-disable-next-line no-console\n      console.warn('Call skipped parsing but provided rawArgs, possible malfunction request');\n      return args;\n    });\n\n    return this.providerOrAccount\n      .callContract(\n        {\n          contractAddress: this.address,\n          calldata,\n          entrypoint: method,\n        },\n        blockIdentifier\n      )\n      .then((x) => {\n        if (!parseResponse) {\n          return x.result;\n        }\n        if (formatResponse) {\n          return this.callData.format(method, x.result, formatResponse);\n        }\n        return this.callData.parse(method, x.result);\n      });\n  }\n\n  public invoke(\n    method: string,\n    args: ArgsOrCalldata = [],\n    { parseRequest = true, maxFee, nonce, signature }: InvokeOptions = {}\n  ): Promise<InvokeFunctionResponse> {\n    assert(this.address !== null, 'contract is not connected to an address');\n\n    const calldata = getCalldata(args, () => {\n      if (parseRequest) {\n        this.callData.validate(ValidateType.INVOKE, method, args);\n        return this.callData.compile(method, args);\n      }\n      // eslint-disable-next-line no-console\n      console.warn('Invoke skipped parsing but provided rawArgs, possible malfunction request');\n      return args;\n    });\n\n    const invocation = {\n      contractAddress: this.address,\n      calldata,\n      entrypoint: method,\n    };\n    if ('execute' in this.providerOrAccount) {\n      return this.providerOrAccount.execute(invocation, undefined, {\n        maxFee,\n        nonce,\n      });\n    }\n\n    if (!nonce) throw new Error(`Nonce is required when invoking a function without an account`);\n    // eslint-disable-next-line no-console\n    console.warn(`Invoking ${method} without an account. This will not work on a public node.`);\n\n    return this.providerOrAccount.invokeFunction(\n      {\n        ...invocation,\n        signature,\n      },\n      {\n        nonce,\n      }\n    );\n  }\n\n  public async estimate(method: string, args: ArgsOrCalldata = []): Promise<EstimateFeeResponse> {\n    assert(this.address !== null, 'contract is not connected to an address');\n\n    if (!getCalldata(args, () => false)) {\n      this.callData.validate(ValidateType.INVOKE, method, args);\n    }\n\n    const invocation = this.populate(method, args);\n    if ('estimateInvokeFee' in this.providerOrAccount) {\n      return this.providerOrAccount.estimateInvokeFee(invocation);\n    }\n    throw Error('Contract must be connected to the account contract to estimate');\n  }\n\n  public populate(method: string, args: RawArgs = []): Call {\n    const calldata: Calldata = getCalldata(args, () => this.callData.compile(method, args));\n    return {\n      contractAddress: this.address,\n      entrypoint: method,\n      calldata,\n    };\n  }\n\n  public parseEvents(receipt: GetTransactionReceiptResponse): ParsedEvents {\n    return parseRawEvents(\n      (receipt as InvokeTransactionReceiptResponse).events?.filter(\n        (event) => cleanHex(event.from_address) === cleanHex(this.address),\n        []\n      ) || [],\n      this.events,\n      this.structs,\n      CallData.getAbiEnum(this.abi)\n    );\n  }\n\n  public isCairo1(): boolean {\n    return cairo.isCairo1Abi(this.abi);\n  }\n\n  public async getVersion() {\n    return this.providerOrAccount.getContractVersion(this.address);\n  }\n\n  public typed<TAbi extends AbiKanabi>(tAbi: TAbi): TypedContract<TAbi> {\n    return this as TypedContract<typeof tAbi>;\n  }\n}\n","import type { Abi as AbiKanabi, TypedContract as AbiWanTypedContract } from 'abi-wan-kanabi';\n\nimport { AccountInterface } from '../account';\nimport { ProviderInterface } from '../provider';\nimport {\n  Abi,\n  ArgsOrCalldata,\n  AsyncContractFunction,\n  BlockIdentifier,\n  CallOptions,\n  ContractFunction,\n  ContractVersion,\n  EstimateFeeResponse,\n  GetTransactionReceiptResponse,\n  Invocation,\n  InvokeFunctionResponse,\n  InvokeOptions,\n  ParsedEvents,\n  Result,\n} from '../types';\n\nexport type TypedContract<TAbi extends AbiKanabi> = AbiWanTypedContract<TAbi> & ContractInterface;\n\nexport abstract class ContractInterface {\n  public abstract abi: Abi;\n\n  public abstract address: string;\n\n  public abstract providerOrAccount: ProviderInterface | AccountInterface;\n\n  public abstract deployTransactionHash?: string;\n\n  readonly functions!: { [name: string]: AsyncContractFunction };\n\n  readonly callStatic!: { [name: string]: AsyncContractFunction };\n\n  readonly populateTransaction!: { [name: string]: ContractFunction };\n\n  readonly estimateFee!: { [name: string]: ContractFunction };\n\n  readonly [key: string]: AsyncContractFunction | any;\n\n  /**\n   * Saves the address of the contract deployed on network that will be used for interaction\n   *\n   * @param address - address of the contract\n   */\n  public abstract attach(address: string): void;\n\n  /**\n   * Attaches to new Provider or Account\n   *\n   * @param providerOrAccount - new Provider or Account to attach to\n   */\n  public abstract connect(providerOrAccount: ProviderInterface | AccountInterface): void;\n\n  /**\n   * Resolves when contract is deployed on the network or when no deployment transaction is found\n   *\n   * @returns Promise that resolves when contract is deployed on the network or when no deployment transaction is found\n   * @throws When deployment fails\n   */\n  public abstract deployed(): Promise<ContractInterface>;\n\n  /**\n   * Calls a method on a contract\n   *\n   * @param method name of the method\n   * @param args Array of the arguments for the call\n   * @param options optional blockIdentifier\n   * @returns Result of the call as an array with key value pars\n   */\n  public abstract call(\n    method: string,\n    args?: ArgsOrCalldata,\n    options?: CallOptions\n  ): Promise<Result>;\n\n  /**\n   * Invokes a method on a contract\n   *\n   * @param method name of the method\n   * @param args Array of the arguments for the invoke or Calldata\n   * @param options\n   * @returns Add Transaction Response\n   */\n  public abstract invoke(\n    method: string,\n    args?: ArgsOrCalldata,\n    options?: InvokeOptions\n  ): Promise<InvokeFunctionResponse>;\n\n  /**\n   * Estimates a method on a contract\n   *\n   * @param method name of the method\n   * @param args Array of the arguments for the call or Calldata\n   * @param options optional blockIdentifier\n   */\n  public abstract estimate(\n    method: string,\n    args?: ArgsOrCalldata,\n    options?: {\n      blockIdentifier?: BlockIdentifier;\n    }\n  ): Promise<EstimateFeeResponse>;\n\n  /**\n   * Calls a method on a contract\n   *\n   * @param method name of the method\n   * @param args Array of the arguments for the call or Calldata\n   * @returns Invocation object\n   */\n  public abstract populate(method: string, args?: ArgsOrCalldata): Invocation;\n\n  /**\n   * Parse contract events of a GetTransactionReceiptResponse received from waitForTransaction. Based on contract's abi\n   *\n   * @param receipt transaction receipt\n   * @returns Events parsed\n   */\n  public abstract parseEvents(receipt: GetTransactionReceiptResponse): ParsedEvents;\n\n  /**\n   * tells if the contract comes from a Cairo 1 contract\n   *\n   * @returns TRUE if the contract comes from a Cairo1 contract\n   * @example\n   * ```typescript\n   * const isCairo1: boolean = myContract.isCairo1();\n   * ```\n   */\n  public abstract isCairo1(): boolean;\n\n  /**\n   * Retrieves the version of the contract (cairo version & compiler version)\n   */\n  public abstract getVersion(): Promise<ContractVersion>;\n\n  public abstract typed<TAbi extends AbiKanabi>(tAbi: TAbi): TypedContract<TAbi>;\n}\n","import { AccountInterface } from '../account';\nimport {\n  Abi,\n  ArgsOrCalldataWithOptions,\n  CairoAssembly,\n  CompiledContract,\n  ValidateType,\n} from '../types';\nimport assert from '../utils/assert';\nimport { CallData } from '../utils/calldata';\nimport { Contract, getCalldata, splitArgsAndOptions } from './default';\n\nexport type ContractFactoryParams = {\n  compiledContract: CompiledContract;\n  account: any;\n  casm?: CairoAssembly;\n  classHash?: string;\n  compiledClassHash?: string;\n  abi?: Abi;\n};\n\nexport class ContractFactory {\n  compiledContract: CompiledContract;\n\n  account: AccountInterface;\n\n  abi: Abi;\n\n  classHash?: string;\n\n  casm?: CairoAssembly;\n\n  compiledClassHash?: string;\n\n  private CallData: CallData;\n\n  /**\n   * @param params CFParams\n   *  - compiledContract: CompiledContract;\n   *  - account: AccountInterface;\n   *  - casm?: CairoAssembly;\n   *  - classHash?: string;\n   *  - compiledClassHash?: string;\n   *  - abi?: Abi;\n   */\n  constructor(params: ContractFactoryParams) {\n    this.compiledContract = params.compiledContract;\n    this.account = params.account;\n    this.casm = params.casm;\n    this.abi = params.abi ?? params.compiledContract.abi;\n    this.classHash = params.classHash;\n    this.compiledClassHash = params.compiledClassHash;\n    this.CallData = new CallData(this.abi);\n  }\n\n  /**\n   * Deploys contract and returns new instance of the Contract\n   *\n   * If contract is not declared it will first declare it, and then deploy\n   */\n  public async deploy(...args: ArgsOrCalldataWithOptions): Promise<Contract> {\n    const { args: param, options = { parseRequest: true } } = splitArgsAndOptions(args);\n\n    const constructorCalldata = getCalldata(param, () => {\n      if (options.parseRequest) {\n        this.CallData.validate(ValidateType.DEPLOY, 'constructor', param);\n        return this.CallData.compile('constructor', param);\n      }\n      // eslint-disable-next-line no-console\n      console.warn('Call skipped parsing but provided rawArgs, possible malfunction request');\n      return param;\n    });\n\n    const {\n      deploy: { contract_address, transaction_hash },\n    } = await this.account.declareAndDeploy({\n      contract: this.compiledContract,\n      casm: this.casm,\n      classHash: this.classHash,\n      compiledClassHash: this.compiledClassHash,\n      constructorCalldata,\n      salt: options.addressSalt,\n    });\n    assert(Boolean(contract_address), 'Deployment of the contract failed');\n\n    const contractInstance = new Contract(\n      this.compiledContract.abi,\n      contract_address!,\n      this.account\n    );\n    contractInstance.deployTransactionHash = transaction_hash;\n\n    return contractInstance;\n  }\n\n  /**\n   * Attaches to new Account\n   *\n   * @param account - new Account to attach to\n   */\n  connect(account: AccountInterface): ContractFactory {\n    this.account = account;\n    return this;\n  }\n\n  /**\n   * Attaches current abi and account to the new address\n   */\n  attach(address: string): Contract {\n    return new Contract(this.abi, address, this.account);\n  }\n\n  // ethers.js' getDeployTransaction cant be supported as it requires the account or signer to return a signed transaction which is not possible with the current implementation\n}\n","/* eslint-disable no-bitwise */\nimport { hexToBytes } from '@noble/curves/abstract/utils';\n\nimport { MASK_251, ZERO } from '../constants';\nimport { BigNumberish } from '../types';\nimport { addHexPrefix, removeHexPrefix } from './encode';\nimport { keccakBn } from './hash';\nimport { assertInRange, toHex } from './num';\n\nexport function addAddressPadding(address: BigNumberish): string {\n  return addHexPrefix(removeHexPrefix(toHex(address)).padStart(64, '0'));\n}\n\nexport function validateAndParseAddress(address: BigNumberish): string {\n  assertInRange(address, ZERO, MASK_251, 'Starknet Address');\n\n  const result = addAddressPadding(address);\n\n  if (!result.match(/^(0x)?[0-9a-fA-F]{64}$/)) {\n    throw new Error('Invalid Address Format');\n  }\n\n  return result;\n}\n\n// from https://github.com/ethers-io/ethers.js/blob/fc1e006575d59792fa97b4efb9ea2f8cca1944cf/packages/address/src.ts/index.ts#L12\nexport function getChecksumAddress(address: BigNumberish): string {\n  const chars = removeHexPrefix(validateAndParseAddress(address)).toLowerCase().split('');\n  const hex = removeHexPrefix(keccakBn(address));\n  const hashed = hexToBytes(hex.padStart(64, '0'));\n\n  for (let i = 0; i < chars.length; i += 2) {\n    if (hashed[i >> 1] >> 4 >= 8) {\n      chars[i] = chars[i].toUpperCase();\n    }\n    if ((hashed[i >> 1] & 0x0f) >= 8) {\n      chars[i + 1] = chars[i + 1].toUpperCase();\n    }\n  }\n\n  return addHexPrefix(chars.join(''));\n}\n\nexport function validateChecksumAddress(address: string): boolean {\n  return getChecksumAddress(address) === address;\n}\n","/**\n * Main\n */\nexport * from './account';\nexport * from './contract';\nexport * from './provider';\nexport * from './signer';\n\n// TODO: decide on final export style\nexport * from './types';\nexport * as types from './types';\n\n/**\n * Utils\n */\nexport * as constants from './constants';\nexport * as encode from './utils/encode';\nexport * as hash from './utils/hash';\nexport * as json from './utils/json';\nexport * as num from './utils/num';\nexport * as transaction from './utils/transaction';\nexport * as stark from './utils/stark';\nexport * as merkle from './utils/merkle';\nexport * as uint256 from './utils/uint256';\nexport * as shortString from './utils/shortString';\nexport * as typedData from './utils/typedData';\nexport * as ec from './utils/ec';\nexport * as starknetId from './utils/starknetId';\nexport * as provider from './utils/provider';\nexport * as selector from './utils/selector';\nexport * as events from './utils/events/index';\nexport * from './utils/address';\nexport * from './utils/url';\nexport * from './utils/calldata';\nexport * from './utils/calldata/enum';\nexport * from './utils/contract';\nexport * from './utils/events';\n\n/**\n * Deprecated\n */\n/* eslint-disable import/first */\nimport * as num from './utils/num';\n\n/** @deprecated prefer the 'num' naming */\nexport const number = num;\n","[\r\n  {\r\n    \"name\": \"PositionsHasInterface\",\r\n    \"type\": \"impl\",\r\n    \"interface_name\": \"ekubo::components::upgradeable::IHasInterface\"\r\n  },\r\n  {\r\n    \"name\": \"ekubo::components::upgradeable::IHasInterface\",\r\n    \"type\": \"interface\",\r\n    \"items\": [\r\n      {\r\n        \"name\": \"get_primary_interface_id\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"core::felt252\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"view\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"ILockerImpl\",\r\n    \"type\": \"impl\",\r\n    \"interface_name\": \"ekubo::interfaces::core::ILocker\"\r\n  },\r\n  {\r\n    \"name\": \"core::array::Span::<core::felt252>\",\r\n    \"type\": \"struct\",\r\n    \"members\": [\r\n      {\r\n        \"name\": \"snapshot\",\r\n        \"type\": \"@core::array::Array::<core::felt252>\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"ekubo::interfaces::core::ILocker\",\r\n    \"type\": \"interface\",\r\n    \"items\": [\r\n      {\r\n        \"name\": \"locked\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"id\",\r\n            \"type\": \"core::integer::u32\"\r\n          },\r\n          {\r\n            \"name\": \"data\",\r\n            \"type\": \"core::array::Span::<core::felt252>\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"core::array::Span::<core::felt252>\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"PositionsImpl\",\r\n    \"type\": \"impl\",\r\n    \"interface_name\": \"ekubo::interfaces::positions::IPositions\"\r\n  },\r\n  {\r\n    \"name\": \"ekubo::types::keys::PoolKey\",\r\n    \"type\": \"struct\",\r\n    \"members\": [\r\n      {\r\n        \"name\": \"token0\",\r\n        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n      },\r\n      {\r\n        \"name\": \"token1\",\r\n        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n      },\r\n      {\r\n        \"name\": \"fee\",\r\n        \"type\": \"core::integer::u128\"\r\n      },\r\n      {\r\n        \"name\": \"tick_spacing\",\r\n        \"type\": \"core::integer::u128\"\r\n      },\r\n      {\r\n        \"name\": \"extension\",\r\n        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"core::bool\",\r\n    \"type\": \"enum\",\r\n    \"variants\": [\r\n      {\r\n        \"name\": \"False\",\r\n        \"type\": \"()\"\r\n      },\r\n      {\r\n        \"name\": \"True\",\r\n        \"type\": \"()\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"ekubo::types::i129::i129\",\r\n    \"type\": \"struct\",\r\n    \"members\": [\r\n      {\r\n        \"name\": \"mag\",\r\n        \"type\": \"core::integer::u128\"\r\n      },\r\n      {\r\n        \"name\": \"sign\",\r\n        \"type\": \"core::bool\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"ekubo::types::bounds::Bounds\",\r\n    \"type\": \"struct\",\r\n    \"members\": [\r\n      {\r\n        \"name\": \"lower\",\r\n        \"type\": \"ekubo::types::i129::i129\"\r\n      },\r\n      {\r\n        \"name\": \"upper\",\r\n        \"type\": \"ekubo::types::i129::i129\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"ekubo::interfaces::positions::GetTokenInfoRequest\",\r\n    \"type\": \"struct\",\r\n    \"members\": [\r\n      {\r\n        \"name\": \"id\",\r\n        \"type\": \"core::integer::u64\"\r\n      },\r\n      {\r\n        \"name\": \"pool_key\",\r\n        \"type\": \"ekubo::types::keys::PoolKey\"\r\n      },\r\n      {\r\n        \"name\": \"bounds\",\r\n        \"type\": \"ekubo::types::bounds::Bounds\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"core::array::Span::<ekubo::interfaces::positions::GetTokenInfoRequest>\",\r\n    \"type\": \"struct\",\r\n    \"members\": [\r\n      {\r\n        \"name\": \"snapshot\",\r\n        \"type\": \"@core::array::Array::<ekubo::interfaces::positions::GetTokenInfoRequest>\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"core::integer::u256\",\r\n    \"type\": \"struct\",\r\n    \"members\": [\r\n      {\r\n        \"name\": \"low\",\r\n        \"type\": \"core::integer::u128\"\r\n      },\r\n      {\r\n        \"name\": \"high\",\r\n        \"type\": \"core::integer::u128\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"ekubo::types::pool_price::PoolPrice\",\r\n    \"type\": \"struct\",\r\n    \"members\": [\r\n      {\r\n        \"name\": \"sqrt_ratio\",\r\n        \"type\": \"core::integer::u256\"\r\n      },\r\n      {\r\n        \"name\": \"tick\",\r\n        \"type\": \"ekubo::types::i129::i129\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"ekubo::interfaces::positions::GetTokenInfoResult\",\r\n    \"type\": \"struct\",\r\n    \"members\": [\r\n      {\r\n        \"name\": \"pool_price\",\r\n        \"type\": \"ekubo::types::pool_price::PoolPrice\"\r\n      },\r\n      {\r\n        \"name\": \"liquidity\",\r\n        \"type\": \"core::integer::u128\"\r\n      },\r\n      {\r\n        \"name\": \"amount0\",\r\n        \"type\": \"core::integer::u128\"\r\n      },\r\n      {\r\n        \"name\": \"amount1\",\r\n        \"type\": \"core::integer::u128\"\r\n      },\r\n      {\r\n        \"name\": \"fees0\",\r\n        \"type\": \"core::integer::u128\"\r\n      },\r\n      {\r\n        \"name\": \"fees1\",\r\n        \"type\": \"core::integer::u128\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"core::array::Span::<ekubo::interfaces::positions::GetTokenInfoResult>\",\r\n    \"type\": \"struct\",\r\n    \"members\": [\r\n      {\r\n        \"name\": \"snapshot\",\r\n        \"type\": \"@core::array::Array::<ekubo::interfaces::positions::GetTokenInfoResult>\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"ekubo::extensions::interfaces::twamm::OrderKey\",\r\n    \"type\": \"struct\",\r\n    \"members\": [\r\n      {\r\n        \"name\": \"sell_token\",\r\n        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n      },\r\n      {\r\n        \"name\": \"buy_token\",\r\n        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n      },\r\n      {\r\n        \"name\": \"fee\",\r\n        \"type\": \"core::integer::u128\"\r\n      },\r\n      {\r\n        \"name\": \"start_time\",\r\n        \"type\": \"core::integer::u64\"\r\n      },\r\n      {\r\n        \"name\": \"end_time\",\r\n        \"type\": \"core::integer::u64\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"core::array::Span::<(core::integer::u64, ekubo::extensions::interfaces::twamm::OrderKey)>\",\r\n    \"type\": \"struct\",\r\n    \"members\": [\r\n      {\r\n        \"name\": \"snapshot\",\r\n        \"type\": \"@core::array::Array::<(core::integer::u64, ekubo::extensions::interfaces::twamm::OrderKey)>\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"ekubo::extensions::interfaces::twamm::OrderInfo\",\r\n    \"type\": \"struct\",\r\n    \"members\": [\r\n      {\r\n        \"name\": \"sale_rate\",\r\n        \"type\": \"core::integer::u128\"\r\n      },\r\n      {\r\n        \"name\": \"remaining_sell_amount\",\r\n        \"type\": \"core::integer::u128\"\r\n      },\r\n      {\r\n        \"name\": \"purchased_amount\",\r\n        \"type\": \"core::integer::u128\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"core::array::Span::<ekubo::extensions::interfaces::twamm::OrderInfo>\",\r\n    \"type\": \"struct\",\r\n    \"members\": [\r\n      {\r\n        \"name\": \"snapshot\",\r\n        \"type\": \"@core::array::Array::<ekubo::extensions::interfaces::twamm::OrderInfo>\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"ekubo::interfaces::positions::IPositions\",\r\n    \"type\": \"interface\",\r\n    \"items\": [\r\n      {\r\n        \"name\": \"get_nft_address\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"view\"\r\n      },\r\n      {\r\n        \"name\": \"upgrade_nft\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"class_hash\",\r\n            \"type\": \"core::starknet::class_hash::ClassHash\"\r\n          }\r\n        ],\r\n        \"outputs\": [],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"set_twamm\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"twamm_address\",\r\n            \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n          }\r\n        ],\r\n        \"outputs\": [],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"get_twamm_address\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"view\"\r\n      },\r\n      {\r\n        \"name\": \"get_tokens_info\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"params\",\r\n            \"type\": \"core::array::Span::<ekubo::interfaces::positions::GetTokenInfoRequest>\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"core::array::Span::<ekubo::interfaces::positions::GetTokenInfoResult>\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"view\"\r\n      },\r\n      {\r\n        \"name\": \"get_token_info\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"id\",\r\n            \"type\": \"core::integer::u64\"\r\n          },\r\n          {\r\n            \"name\": \"pool_key\",\r\n            \"type\": \"ekubo::types::keys::PoolKey\"\r\n          },\r\n          {\r\n            \"name\": \"bounds\",\r\n            \"type\": \"ekubo::types::bounds::Bounds\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"ekubo::interfaces::positions::GetTokenInfoResult\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"view\"\r\n      },\r\n      {\r\n        \"name\": \"get_orders_info\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"params\",\r\n            \"type\": \"core::array::Span::<(core::integer::u64, ekubo::extensions::interfaces::twamm::OrderKey)>\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"core::array::Span::<ekubo::extensions::interfaces::twamm::OrderInfo>\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"view\"\r\n      },\r\n      {\r\n        \"name\": \"get_order_info\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"id\",\r\n            \"type\": \"core::integer::u64\"\r\n          },\r\n          {\r\n            \"name\": \"order_key\",\r\n            \"type\": \"ekubo::extensions::interfaces::twamm::OrderKey\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"ekubo::extensions::interfaces::twamm::OrderInfo\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"view\"\r\n      },\r\n      {\r\n        \"name\": \"mint\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"pool_key\",\r\n            \"type\": \"ekubo::types::keys::PoolKey\"\r\n          },\r\n          {\r\n            \"name\": \"bounds\",\r\n            \"type\": \"ekubo::types::bounds::Bounds\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"core::integer::u64\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"mint_with_referrer\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"pool_key\",\r\n            \"type\": \"ekubo::types::keys::PoolKey\"\r\n          },\r\n          {\r\n            \"name\": \"bounds\",\r\n            \"type\": \"ekubo::types::bounds::Bounds\"\r\n          },\r\n          {\r\n            \"name\": \"referrer\",\r\n            \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"core::integer::u64\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"mint_v2\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"referrer\",\r\n            \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"core::integer::u64\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"check_liquidity_is_zero\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"id\",\r\n            \"type\": \"core::integer::u64\"\r\n          },\r\n          {\r\n            \"name\": \"pool_key\",\r\n            \"type\": \"ekubo::types::keys::PoolKey\"\r\n          },\r\n          {\r\n            \"name\": \"bounds\",\r\n            \"type\": \"ekubo::types::bounds::Bounds\"\r\n          }\r\n        ],\r\n        \"outputs\": [],\r\n        \"state_mutability\": \"view\"\r\n      },\r\n      {\r\n        \"name\": \"unsafe_burn\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"id\",\r\n            \"type\": \"core::integer::u64\"\r\n          }\r\n        ],\r\n        \"outputs\": [],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"deposit_last\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"pool_key\",\r\n            \"type\": \"ekubo::types::keys::PoolKey\"\r\n          },\r\n          {\r\n            \"name\": \"bounds\",\r\n            \"type\": \"ekubo::types::bounds::Bounds\"\r\n          },\r\n          {\r\n            \"name\": \"min_liquidity\",\r\n            \"type\": \"core::integer::u128\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"core::integer::u128\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"deposit_amounts_last\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"pool_key\",\r\n            \"type\": \"ekubo::types::keys::PoolKey\"\r\n          },\r\n          {\r\n            \"name\": \"bounds\",\r\n            \"type\": \"ekubo::types::bounds::Bounds\"\r\n          },\r\n          {\r\n            \"name\": \"amount0\",\r\n            \"type\": \"core::integer::u128\"\r\n          },\r\n          {\r\n            \"name\": \"amount1\",\r\n            \"type\": \"core::integer::u128\"\r\n          },\r\n          {\r\n            \"name\": \"min_liquidity\",\r\n            \"type\": \"core::integer::u128\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"core::integer::u128\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"deposit\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"id\",\r\n            \"type\": \"core::integer::u64\"\r\n          },\r\n          {\r\n            \"name\": \"pool_key\",\r\n            \"type\": \"ekubo::types::keys::PoolKey\"\r\n          },\r\n          {\r\n            \"name\": \"bounds\",\r\n            \"type\": \"ekubo::types::bounds::Bounds\"\r\n          },\r\n          {\r\n            \"name\": \"min_liquidity\",\r\n            \"type\": \"core::integer::u128\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"core::integer::u128\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"deposit_amounts\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"id\",\r\n            \"type\": \"core::integer::u64\"\r\n          },\r\n          {\r\n            \"name\": \"pool_key\",\r\n            \"type\": \"ekubo::types::keys::PoolKey\"\r\n          },\r\n          {\r\n            \"name\": \"bounds\",\r\n            \"type\": \"ekubo::types::bounds::Bounds\"\r\n          },\r\n          {\r\n            \"name\": \"amount0\",\r\n            \"type\": \"core::integer::u128\"\r\n          },\r\n          {\r\n            \"name\": \"amount1\",\r\n            \"type\": \"core::integer::u128\"\r\n          },\r\n          {\r\n            \"name\": \"min_liquidity\",\r\n            \"type\": \"core::integer::u128\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"core::integer::u128\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"mint_and_deposit\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"pool_key\",\r\n            \"type\": \"ekubo::types::keys::PoolKey\"\r\n          },\r\n          {\r\n            \"name\": \"bounds\",\r\n            \"type\": \"ekubo::types::bounds::Bounds\"\r\n          },\r\n          {\r\n            \"name\": \"min_liquidity\",\r\n            \"type\": \"core::integer::u128\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"(core::integer::u64, core::integer::u128)\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"mint_and_deposit_with_referrer\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"pool_key\",\r\n            \"type\": \"ekubo::types::keys::PoolKey\"\r\n          },\r\n          {\r\n            \"name\": \"bounds\",\r\n            \"type\": \"ekubo::types::bounds::Bounds\"\r\n          },\r\n          {\r\n            \"name\": \"min_liquidity\",\r\n            \"type\": \"core::integer::u128\"\r\n          },\r\n          {\r\n            \"name\": \"referrer\",\r\n            \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"(core::integer::u64, core::integer::u128)\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"mint_and_deposit_and_clear_both\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"pool_key\",\r\n            \"type\": \"ekubo::types::keys::PoolKey\"\r\n          },\r\n          {\r\n            \"name\": \"bounds\",\r\n            \"type\": \"ekubo::types::bounds::Bounds\"\r\n          },\r\n          {\r\n            \"name\": \"min_liquidity\",\r\n            \"type\": \"core::integer::u128\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"(core::integer::u64, core::integer::u128, core::integer::u256, core::integer::u256)\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"collect_fees\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"id\",\r\n            \"type\": \"core::integer::u64\"\r\n          },\r\n          {\r\n            \"name\": \"pool_key\",\r\n            \"type\": \"ekubo::types::keys::PoolKey\"\r\n          },\r\n          {\r\n            \"name\": \"bounds\",\r\n            \"type\": \"ekubo::types::bounds::Bounds\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"(core::integer::u128, core::integer::u128)\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"withdraw\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"id\",\r\n            \"type\": \"core::integer::u64\"\r\n          },\r\n          {\r\n            \"name\": \"pool_key\",\r\n            \"type\": \"ekubo::types::keys::PoolKey\"\r\n          },\r\n          {\r\n            \"name\": \"bounds\",\r\n            \"type\": \"ekubo::types::bounds::Bounds\"\r\n          },\r\n          {\r\n            \"name\": \"liquidity\",\r\n            \"type\": \"core::integer::u128\"\r\n          },\r\n          {\r\n            \"name\": \"min_token0\",\r\n            \"type\": \"core::integer::u128\"\r\n          },\r\n          {\r\n            \"name\": \"min_token1\",\r\n            \"type\": \"core::integer::u128\"\r\n          },\r\n          {\r\n            \"name\": \"collect_fees\",\r\n            \"type\": \"core::bool\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"(core::integer::u128, core::integer::u128)\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"withdraw_v2\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"id\",\r\n            \"type\": \"core::integer::u64\"\r\n          },\r\n          {\r\n            \"name\": \"pool_key\",\r\n            \"type\": \"ekubo::types::keys::PoolKey\"\r\n          },\r\n          {\r\n            \"name\": \"bounds\",\r\n            \"type\": \"ekubo::types::bounds::Bounds\"\r\n          },\r\n          {\r\n            \"name\": \"liquidity\",\r\n            \"type\": \"core::integer::u128\"\r\n          },\r\n          {\r\n            \"name\": \"min_token0\",\r\n            \"type\": \"core::integer::u128\"\r\n          },\r\n          {\r\n            \"name\": \"min_token1\",\r\n            \"type\": \"core::integer::u128\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"(core::integer::u128, core::integer::u128)\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"get_pool_price\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"pool_key\",\r\n            \"type\": \"ekubo::types::keys::PoolKey\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"ekubo::types::pool_price::PoolPrice\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"view\"\r\n      },\r\n      {\r\n        \"name\": \"mint_and_increase_sell_amount\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"order_key\",\r\n            \"type\": \"ekubo::extensions::interfaces::twamm::OrderKey\"\r\n          },\r\n          {\r\n            \"name\": \"amount\",\r\n            \"type\": \"core::integer::u128\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"(core::integer::u64, core::integer::u128)\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"increase_sell_amount_last\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"order_key\",\r\n            \"type\": \"ekubo::extensions::interfaces::twamm::OrderKey\"\r\n          },\r\n          {\r\n            \"name\": \"amount\",\r\n            \"type\": \"core::integer::u128\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"core::integer::u128\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"increase_sell_amount\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"id\",\r\n            \"type\": \"core::integer::u64\"\r\n          },\r\n          {\r\n            \"name\": \"order_key\",\r\n            \"type\": \"ekubo::extensions::interfaces::twamm::OrderKey\"\r\n          },\r\n          {\r\n            \"name\": \"amount\",\r\n            \"type\": \"core::integer::u128\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"core::integer::u128\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"decrease_sale_rate\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"id\",\r\n            \"type\": \"core::integer::u64\"\r\n          },\r\n          {\r\n            \"name\": \"order_key\",\r\n            \"type\": \"ekubo::extensions::interfaces::twamm::OrderKey\"\r\n          },\r\n          {\r\n            \"name\": \"sale_rate_delta\",\r\n            \"type\": \"core::integer::u128\"\r\n          }\r\n        ],\r\n        \"outputs\": [],\r\n        \"state_mutability\": \"external\"\r\n      },\r\n      {\r\n        \"name\": \"withdraw_proceeds_from_sale\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"id\",\r\n            \"type\": \"core::integer::u64\"\r\n          },\r\n          {\r\n            \"name\": \"order_key\",\r\n            \"type\": \"ekubo::extensions::interfaces::twamm::OrderKey\"\r\n          }\r\n        ],\r\n        \"outputs\": [],\r\n        \"state_mutability\": \"external\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Owned\",\r\n    \"type\": \"impl\",\r\n    \"interface_name\": \"ekubo::components::owned::IOwned\"\r\n  },\r\n  {\r\n    \"name\": \"ekubo::components::owned::IOwned\",\r\n    \"type\": \"interface\",\r\n    \"items\": [\r\n      {\r\n        \"name\": \"get_owner\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"view\"\r\n      },\r\n      {\r\n        \"name\": \"transfer_ownership\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"new_owner\",\r\n            \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n          }\r\n        ],\r\n        \"outputs\": [],\r\n        \"state_mutability\": \"external\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Upgradeable\",\r\n    \"type\": \"impl\",\r\n    \"interface_name\": \"ekubo::interfaces::upgradeable::IUpgradeable\"\r\n  },\r\n  {\r\n    \"name\": \"ekubo::interfaces::upgradeable::IUpgradeable\",\r\n    \"type\": \"interface\",\r\n    \"items\": [\r\n      {\r\n        \"name\": \"replace_class_hash\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"class_hash\",\r\n            \"type\": \"core::starknet::class_hash::ClassHash\"\r\n          }\r\n        ],\r\n        \"outputs\": [],\r\n        \"state_mutability\": \"external\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Clear\",\r\n    \"type\": \"impl\",\r\n    \"interface_name\": \"ekubo::components::clear::IClear\"\r\n  },\r\n  {\r\n    \"name\": \"ekubo::interfaces::erc20::IERC20Dispatcher\",\r\n    \"type\": \"struct\",\r\n    \"members\": [\r\n      {\r\n        \"name\": \"contract_address\",\r\n        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"ekubo::components::clear::IClear\",\r\n    \"type\": \"interface\",\r\n    \"items\": [\r\n      {\r\n        \"name\": \"clear\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"token\",\r\n            \"type\": \"ekubo::interfaces::erc20::IERC20Dispatcher\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"core::integer::u256\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"view\"\r\n      },\r\n      {\r\n        \"name\": \"clear_minimum\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"token\",\r\n            \"type\": \"ekubo::interfaces::erc20::IERC20Dispatcher\"\r\n          },\r\n          {\r\n            \"name\": \"minimum\",\r\n            \"type\": \"core::integer::u256\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"core::integer::u256\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"view\"\r\n      },\r\n      {\r\n        \"name\": \"clear_minimum_to_recipient\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"token\",\r\n            \"type\": \"ekubo::interfaces::erc20::IERC20Dispatcher\"\r\n          },\r\n          {\r\n            \"name\": \"minimum\",\r\n            \"type\": \"core::integer::u256\"\r\n          },\r\n          {\r\n            \"name\": \"recipient\",\r\n            \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"core::integer::u256\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"view\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"Expires\",\r\n    \"type\": \"impl\",\r\n    \"interface_name\": \"ekubo::components::expires::IExpires\"\r\n  },\r\n  {\r\n    \"name\": \"ekubo::components::expires::IExpires\",\r\n    \"type\": \"interface\",\r\n    \"items\": [\r\n      {\r\n        \"name\": \"expires\",\r\n        \"type\": \"function\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"at\",\r\n            \"type\": \"core::integer::u64\"\r\n          }\r\n        ],\r\n        \"outputs\": [],\r\n        \"state_mutability\": \"view\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"ekubo::interfaces::core::ICoreDispatcher\",\r\n    \"type\": \"struct\",\r\n    \"members\": [\r\n      {\r\n        \"name\": \"contract_address\",\r\n        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"name\": \"constructor\",\r\n    \"type\": \"constructor\",\r\n    \"inputs\": [\r\n      {\r\n        \"name\": \"owner\",\r\n        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n      },\r\n      {\r\n        \"name\": \"core\",\r\n        \"type\": \"ekubo::interfaces::core::ICoreDispatcher\"\r\n      },\r\n      {\r\n        \"name\": \"nft_class_hash\",\r\n        \"type\": \"core::starknet::class_hash::ClassHash\"\r\n      },\r\n      {\r\n        \"name\": \"token_uri_base\",\r\n        \"type\": \"core::felt252\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"kind\": \"struct\",\r\n    \"name\": \"ekubo::components::upgradeable::Upgradeable::ClassHashReplaced\",\r\n    \"type\": \"event\",\r\n    \"members\": [\r\n      {\r\n        \"kind\": \"data\",\r\n        \"name\": \"new_class_hash\",\r\n        \"type\": \"core::starknet::class_hash::ClassHash\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"kind\": \"enum\",\r\n    \"name\": \"ekubo::components::upgradeable::Upgradeable::Event\",\r\n    \"type\": \"event\",\r\n    \"variants\": [\r\n      {\r\n        \"kind\": \"nested\",\r\n        \"name\": \"ClassHashReplaced\",\r\n        \"type\": \"ekubo::components::upgradeable::Upgradeable::ClassHashReplaced\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"kind\": \"struct\",\r\n    \"name\": \"ekubo::components::owned::Owned::OwnershipTransferred\",\r\n    \"type\": \"event\",\r\n    \"members\": [\r\n      {\r\n        \"kind\": \"data\",\r\n        \"name\": \"old_owner\",\r\n        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n      },\r\n      {\r\n        \"kind\": \"data\",\r\n        \"name\": \"new_owner\",\r\n        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"kind\": \"enum\",\r\n    \"name\": \"ekubo::components::owned::Owned::Event\",\r\n    \"type\": \"event\",\r\n    \"variants\": [\r\n      {\r\n        \"kind\": \"nested\",\r\n        \"name\": \"OwnershipTransferred\",\r\n        \"type\": \"ekubo::components::owned::Owned::OwnershipTransferred\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"kind\": \"struct\",\r\n    \"name\": \"ekubo::positions::Positions::PositionMintedWithReferrer\",\r\n    \"type\": \"event\",\r\n    \"members\": [\r\n      {\r\n        \"kind\": \"data\",\r\n        \"name\": \"id\",\r\n        \"type\": \"core::integer::u64\"\r\n      },\r\n      {\r\n        \"kind\": \"data\",\r\n        \"name\": \"referrer\",\r\n        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"kind\": \"enum\",\r\n    \"name\": \"ekubo::positions::Positions::Event\",\r\n    \"type\": \"event\",\r\n    \"variants\": [\r\n      {\r\n        \"kind\": \"flat\",\r\n        \"name\": \"UpgradeableEvent\",\r\n        \"type\": \"ekubo::components::upgradeable::Upgradeable::Event\"\r\n      },\r\n      {\r\n        \"kind\": \"nested\",\r\n        \"name\": \"OwnedEvent\",\r\n        \"type\": \"ekubo::components::owned::Owned::Event\"\r\n      },\r\n      {\r\n        \"kind\": \"nested\",\r\n        \"name\": \"PositionMintedWithReferrer\",\r\n        \"type\": \"ekubo::positions::Positions::PositionMintedWithReferrer\"\r\n      }\r\n    ]\r\n  }\r\n]\r\n","[\r\n  {\r\n    \"members\": [\r\n      {\r\n        \"name\": \"low\",\r\n        \"offset\": 0,\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"high\",\r\n        \"offset\": 1,\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"name\": \"Uint256\",\r\n    \"size\": 2,\r\n    \"type\": \"struct\"\r\n  },\r\n  {\r\n    \"data\": [\r\n      {\r\n        \"name\": \"from_\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"to\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"value\",\r\n        \"type\": \"Uint256\"\r\n      }\r\n    ],\r\n    \"keys\": [],\r\n    \"name\": \"Transfer\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"data\": [\r\n      {\r\n        \"name\": \"owner\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"spender\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"value\",\r\n        \"type\": \"Uint256\"\r\n      }\r\n    ],\r\n    \"keys\": [],\r\n    \"name\": \"Approval\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"data\": [\r\n      {\r\n        \"name\": \"implementation\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"keys\": [],\r\n    \"name\": \"Upgraded\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"data\": [\r\n      {\r\n        \"name\": \"previousAdmin\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"newAdmin\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"keys\": [],\r\n    \"name\": \"AdminChanged\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"data\": [\r\n      {\r\n        \"name\": \"from_address\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"to_address\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"amount\",\r\n        \"type\": \"Uint256\"\r\n      }\r\n    ],\r\n    \"keys\": [],\r\n    \"name\": \"Transfer\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"data\": [\r\n      {\r\n        \"name\": \"owner\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"spender\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"amount\",\r\n        \"type\": \"Uint256\"\r\n      }\r\n    ],\r\n    \"keys\": [],\r\n    \"name\": \"Approval\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"data\": [\r\n      {\r\n        \"name\": \"sender\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"amount0\",\r\n        \"type\": \"Uint256\"\r\n      },\r\n      {\r\n        \"name\": \"amount1\",\r\n        \"type\": \"Uint256\"\r\n      }\r\n    ],\r\n    \"keys\": [],\r\n    \"name\": \"Mint\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"data\": [\r\n      {\r\n        \"name\": \"sender\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"amount0\",\r\n        \"type\": \"Uint256\"\r\n      },\r\n      {\r\n        \"name\": \"amount1\",\r\n        \"type\": \"Uint256\"\r\n      },\r\n      {\r\n        \"name\": \"to\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"keys\": [],\r\n    \"name\": \"Burn\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"data\": [\r\n      {\r\n        \"name\": \"sender\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"amount0In\",\r\n        \"type\": \"Uint256\"\r\n      },\r\n      {\r\n        \"name\": \"amount1In\",\r\n        \"type\": \"Uint256\"\r\n      },\r\n      {\r\n        \"name\": \"amount0Out\",\r\n        \"type\": \"Uint256\"\r\n      },\r\n      {\r\n        \"name\": \"amount1Out\",\r\n        \"type\": \"Uint256\"\r\n      },\r\n      {\r\n        \"name\": \"to\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"keys\": [],\r\n    \"name\": \"Swap\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"data\": [\r\n      {\r\n        \"name\": \"reserve0\",\r\n        \"type\": \"Uint256\"\r\n      },\r\n      {\r\n        \"name\": \"reserve1\",\r\n        \"type\": \"Uint256\"\r\n      }\r\n    ],\r\n    \"keys\": [],\r\n    \"name\": \"Sync\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"name\": \"token0\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"token1\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"proxy_admin\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"name\": \"initializer\",\r\n    \"outputs\": [],\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"name\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"name\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"symbol\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"symbol\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"totalSupply\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"totalSupply\",\r\n        \"type\": \"Uint256\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"decimals\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"decimals\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"name\": \"account\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"name\": \"balanceOf\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"balance\",\r\n        \"type\": \"Uint256\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"name\": \"owner\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"spender\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"name\": \"allowance\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"remaining\",\r\n        \"type\": \"Uint256\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"token0\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"address\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"token1\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"address\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"get_reserves\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"reserve0\",\r\n        \"type\": \"Uint256\"\r\n      },\r\n      {\r\n        \"name\": \"reserve1\",\r\n        \"type\": \"Uint256\"\r\n      },\r\n      {\r\n        \"name\": \"block_timestamp_last\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"price_0_cumulative_last\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"res\",\r\n        \"type\": \"Uint256\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"price_1_cumulative_last\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"res\",\r\n        \"type\": \"Uint256\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"klast\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"res\",\r\n        \"type\": \"Uint256\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"name\": \"recipient\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"amount\",\r\n        \"type\": \"Uint256\"\r\n      }\r\n    ],\r\n    \"name\": \"transfer\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"success\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"name\": \"sender\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"recipient\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"amount\",\r\n        \"type\": \"Uint256\"\r\n      }\r\n    ],\r\n    \"name\": \"transferFrom\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"success\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"name\": \"spender\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"amount\",\r\n        \"type\": \"Uint256\"\r\n      }\r\n    ],\r\n    \"name\": \"approve\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"success\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"name\": \"spender\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"added_value\",\r\n        \"type\": \"Uint256\"\r\n      }\r\n    ],\r\n    \"name\": \"increaseAllowance\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"success\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"name\": \"spender\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"subtracted_value\",\r\n        \"type\": \"Uint256\"\r\n      }\r\n    ],\r\n    \"name\": \"decreaseAllowance\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"success\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"name\": \"to\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"name\": \"mint\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"liquidity\",\r\n        \"type\": \"Uint256\"\r\n      }\r\n    ],\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"name\": \"to\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"name\": \"burn\",\r\n    \"outputs\": [\r\n      {\r\n        \"name\": \"amount0\",\r\n        \"type\": \"Uint256\"\r\n      },\r\n      {\r\n        \"name\": \"amount1\",\r\n        \"type\": \"Uint256\"\r\n      }\r\n    ],\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"name\": \"amount0Out\",\r\n        \"type\": \"Uint256\"\r\n      },\r\n      {\r\n        \"name\": \"amount1Out\",\r\n        \"type\": \"Uint256\"\r\n      },\r\n      {\r\n        \"name\": \"to\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"data_len\",\r\n        \"type\": \"felt\"\r\n      },\r\n      {\r\n        \"name\": \"data\",\r\n        \"type\": \"felt*\"\r\n      }\r\n    ],\r\n    \"name\": \"swap\",\r\n    \"outputs\": [],\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"name\": \"to\",\r\n        \"type\": \"felt\"\r\n      }\r\n    ],\r\n    \"name\": \"skim\",\r\n    \"outputs\": [],\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"sync\",\r\n    \"outputs\": [],\r\n    \"type\": \"function\"\r\n  }\r\n]\r\n","[\r\n  {\r\n    \"type\": \"impl\",\r\n    \"name\": \"MulticallImpl\",\r\n    \"interface_name\": \"multicall::IMulticall\"\r\n  },\r\n  {\r\n    \"type\": \"struct\",\r\n    \"name\": \"core::starknet::account::Call\",\r\n    \"members\": [\r\n      {\r\n        \"name\": \"to\",\r\n        \"type\": \"core::starknet::contract_address::ContractAddress\"\r\n      },\r\n      {\r\n        \"name\": \"selector\",\r\n        \"type\": \"core::felt252\"\r\n      },\r\n      {\r\n        \"name\": \"calldata\",\r\n        \"type\": \"core::array::Array::<core::felt252>\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"type\": \"struct\",\r\n    \"name\": \"core::array::Span::<core::felt252>\",\r\n    \"members\": [\r\n      {\r\n        \"name\": \"snapshot\",\r\n        \"type\": \"@core::array::Array::<core::felt252>\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"type\": \"interface\",\r\n    \"name\": \"multicall::IMulticall\",\r\n    \"items\": [\r\n      {\r\n        \"type\": \"function\",\r\n        \"name\": \"aggregate\",\r\n        \"inputs\": [\r\n          {\r\n            \"name\": \"calls\",\r\n            \"type\": \"core::array::Array::<core::starknet::account::Call>\"\r\n          }\r\n        ],\r\n        \"outputs\": [\r\n          {\r\n            \"type\": \"(core::integer::u64, core::array::Array::<core::array::Span::<core::felt252>>)\"\r\n          }\r\n        ],\r\n        \"state_mutability\": \"view\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"type\": \"event\",\r\n    \"name\": \"multicall::Multicall::Event\",\r\n    \"kind\": \"enum\",\r\n    \"variants\": []\r\n  }\r\n]\r\n","import { constants, json } from 'starknet'\n\nimport EkuboPositions from '../abis/EkuboPositions.json'\nimport JediswapPair from '../abis/JediswapPair.json'\nimport Multicall from '../abis/Multicall.json'\n\nexport const TOKEN_CLASS_HASH = {\n  [constants.StarknetChainId.SN_GOERLI]: '0x05ba9aea47a8dd7073ab82b9e91721bdb3a2c1b259cffd68669da1454faa80ac',\n  [constants.StarknetChainId.SN_MAIN]: '0x063ee878d3559583ceae80372c6088140e1180d9893aa65fbefc81f45ddaaa17',\n}\n\nexport const FACTORY_ADDRESSES = {\n  [constants.StarknetChainId.SN_GOERLI]: '0x076c3112e95994507c44c72b8dfb7f8d568a370d2f7c2d918ed9f55327671385',\n  [constants.StarknetChainId.SN_MAIN]: '0x01a46467a9246f45c8c340f1f155266a26a71c07bd55d36e8d1c7d0d438a2dbc',\n}\n\nexport const EKUBO_POSITIONS_ADDRESSES = {\n  [constants.StarknetChainId.SN_GOERLI]: '0x073fa8432bf59f8ed535f29acfd89a7020758bda7be509e00dfed8a9fde12ddc',\n  [constants.StarknetChainId.SN_MAIN]: '0x02e0af29598b407c8716b17f6d2795eca1b471413fa03fb145a5e33722184067',\n}\n\nexport const ETH_ADDRESSES = {\n  [constants.StarknetChainId.SN_GOERLI]: '0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7',\n  [constants.StarknetChainId.SN_MAIN]: '0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7',\n}\nexport const STRK_ADDRESSES = {\n  [constants.StarknetChainId.SN_GOERLI]: '0x4718f5a0fc34cc1af16a1cdee98ffb20c31f5cd61d6ab07201858f4287c938d',\n  [constants.StarknetChainId.SN_MAIN]: '0x4718f5a0fc34cc1af16a1cdee98ffb20c31f5cd61d6ab07201858f4287c938d',\n}\n\nexport const USDC_ADDRESSES = {\n  [constants.StarknetChainId.SN_GOERLI]: '0x5a643907b9a4bc6a55e9069c4fd5fd1f5c79a22470690f75556c4736e34426',\n  [constants.StarknetChainId.SN_MAIN]: '0x53c91253bc9682c04929ca02ed00b3e423f6710d2ee7e0d5ebb06f3ecf368a8',\n}\n\nexport const MULTICALL_ADDRESSES = {\n  [constants.StarknetChainId.SN_GOERLI]: '0x01a33330996310a1e3fa1df5b16c1e07f0491fdd20c441126e02613b948f0225',\n  [constants.StarknetChainId.SN_MAIN]: '0x01a33330996310a1e3fa1df5b16c1e07f0491fdd20c441126e02613b948f0225',\n}\n\nexport const JEDISWAP_ETH_USDC = {\n  [constants.StarknetChainId.SN_GOERLI]: '0x05a2b2b37f66157f767ea711cb4e034c40d41f2f5acf9ff4a19049fa11c1a884',\n  [constants.StarknetChainId.SN_MAIN]: '0x04d0390b777b424e43839cd1e744799f3de6c176c7e32c1812a41dbd9c19db6a',\n}\n\nexport const JEDISWAP_STRK_USDC = {\n  [constants.StarknetChainId.SN_GOERLI]: '0x018b129b1a372b3288077521ad8749f5a2b2ddfb67ef5a37e2d02190fa11c40f',\n  [constants.StarknetChainId.SN_MAIN]: '0x5726725e9507c3586cc0516449e2c74d9b201ab2747752bb0251aaa263c9a26',\n}\n\nexport const compiledMulticall = json.parse(JSON.stringify(Multicall))\nexport const compiledJediswapPair = json.parse(JSON.stringify(JediswapPair))\nexport const compiledEkuboPositions = json.parse(JSON.stringify(EkuboPositions))\n","import { Fraction, Percent } from '@uniswap/sdk-core'\nimport moment from 'moment'\n\nexport enum Safety {\n  SAFE,\n  CORRECT,\n  DANGEROUS,\n  UNKNOWN,\n}\n\nexport const TEAM_ALLOCATION_SAFETY_BOUNDS = {\n  [Safety.SAFE]: new Percent(1, 100), // 1%\n  [Safety.CORRECT]: new Percent(10, 100), // 10%\n}\n\nexport const LIQUIDITY_LOCK_SAFETY_BOUNDS = {\n  [Safety.SAFE]: moment.duration(100, 'years'),\n  [Safety.CORRECT]: moment.duration(3, 'months'),\n}\n\nexport const STARTING_MCAP_SAFETY_BOUNDS = {\n  [Safety.SAFE]: {\n    mcap: new Fraction(9000),\n    teamAllocatoion: new Fraction(3000),\n  },\n  [Safety.CORRECT]: {\n    mcap: new Fraction(4500),\n    teamAllocatoion: new Fraction(5000),\n  },\n}\n","import { constants, getChecksumAddress } from 'starknet'\n\nimport { MultichainToken, Token } from '../types/tokens'\nimport { ETH_ADDRESSES, JEDISWAP_ETH_USDC, JEDISWAP_STRK_USDC, STRK_ADDRESSES, USDC_ADDRESSES } from './contracts'\n\nexport enum QUOTE_TOKEN_SYMBOL {\n  ETH = 'ETH',\n  STRK = 'STRK',\n  USDC = 'USDC',\n}\n\n// ETH\nexport const Ether: MultichainToken = {\n  [constants.StarknetChainId.SN_GOERLI]: {\n    address: ETH_ADDRESSES[constants.StarknetChainId.SN_GOERLI],\n    symbol: QUOTE_TOKEN_SYMBOL.ETH,\n    name: 'Ether',\n    decimals: 18,\n    camelCased: true,\n    usdcPair: {\n      address: JEDISWAP_ETH_USDC[constants.StarknetChainId.SN_GOERLI],\n      reversed: true,\n    },\n  },\n  [constants.StarknetChainId.SN_MAIN]: {\n    address: ETH_ADDRESSES[constants.StarknetChainId.SN_MAIN],\n    symbol: QUOTE_TOKEN_SYMBOL.ETH,\n    name: 'Ether',\n    decimals: 18,\n    camelCased: true,\n    usdcPair: {\n      address: JEDISWAP_ETH_USDC[constants.StarknetChainId.SN_MAIN],\n      reversed: false,\n    },\n  },\n}\n\n// STRK\nexport const Stark: MultichainToken = {\n  [constants.StarknetChainId.SN_GOERLI]: {\n    address: STRK_ADDRESSES[constants.StarknetChainId.SN_GOERLI],\n    symbol: QUOTE_TOKEN_SYMBOL.STRK,\n    name: 'Stark',\n    decimals: 18,\n    camelCased: true,\n    usdcPair: {\n      address: JEDISWAP_STRK_USDC[constants.StarknetChainId.SN_GOERLI],\n      reversed: true,\n    },\n  },\n  [constants.StarknetChainId.SN_MAIN]: {\n    address: STRK_ADDRESSES[constants.StarknetChainId.SN_MAIN],\n    symbol: QUOTE_TOKEN_SYMBOL.STRK,\n    name: 'Stark',\n    decimals: 18,\n    camelCased: true,\n    usdcPair: {\n      address: JEDISWAP_STRK_USDC[constants.StarknetChainId.SN_MAIN],\n      reversed: false,\n    },\n  },\n}\n\n// USDC\nexport const USDCoin: MultichainToken = {\n  [constants.StarknetChainId.SN_GOERLI]: {\n    address: USDC_ADDRESSES[constants.StarknetChainId.SN_GOERLI],\n    symbol: QUOTE_TOKEN_SYMBOL.USDC,\n    name: 'USD Coin',\n    decimals: 6,\n    camelCased: true,\n  },\n  [constants.StarknetChainId.SN_MAIN]: {\n    address: USDC_ADDRESSES[constants.StarknetChainId.SN_MAIN],\n    symbol: QUOTE_TOKEN_SYMBOL.USDC,\n    name: 'USD Coin',\n    decimals: 6,\n    camelCased: true,\n  },\n}\n\n// Quote tokens\n\nexport const QUOTE_TOKENS: { [chainId in constants.StarknetChainId]: Record<string, Token> } = {\n  [constants.StarknetChainId.SN_GOERLI]: {\n    [getChecksumAddress(ETH_ADDRESSES[constants.StarknetChainId.SN_GOERLI])]:\n      Ether[constants.StarknetChainId.SN_GOERLI],\n\n    [getChecksumAddress(STRK_ADDRESSES[constants.StarknetChainId.SN_GOERLI])]:\n      Stark[constants.StarknetChainId.SN_GOERLI],\n\n    [getChecksumAddress(USDC_ADDRESSES[constants.StarknetChainId.SN_GOERLI])]:\n      USDCoin[constants.StarknetChainId.SN_GOERLI],\n  },\n\n  [constants.StarknetChainId.SN_MAIN]: {\n    [getChecksumAddress(ETH_ADDRESSES[constants.StarknetChainId.SN_MAIN])]: Ether[constants.StarknetChainId.SN_MAIN],\n    [getChecksumAddress(STRK_ADDRESSES[constants.StarknetChainId.SN_MAIN])]: Stark[constants.StarknetChainId.SN_MAIN],\n    [getChecksumAddress(USDC_ADDRESSES[constants.StarknetChainId.SN_MAIN])]: USDCoin[constants.StarknetChainId.SN_MAIN],\n  },\n}\n\nexport const DEFAULT_QUOTE_TOKEN_ADDRESSES = {\n  [constants.StarknetChainId.SN_GOERLI]: getChecksumAddress(ETH_ADDRESSES[constants.StarknetChainId.SN_GOERLI]),\n  [constants.StarknetChainId.SN_MAIN]: getChecksumAddress(ETH_ADDRESSES[constants.StarknetChainId.SN_MAIN]),\n}\n","import { Call, CallData, constants, hash, ProviderInterface } from 'starknet'\n\nimport { Entrypoint, MULTICALL_ADDRESSES } from '../constants'\n\nexport async function multiCallContract(\n  provider: ProviderInterface,\n  chainId: constants.StarknetChainId,\n  calls: Call[],\n) {\n  const calldata = calls.map((call) => {\n    return CallData.compile({\n      to: call.contractAddress,\n      selector: hash.getSelector(call.entrypoint),\n      calldata: call.calldata ?? [],\n    })\n  })\n\n  const rawResult = await provider.callContract({\n    contractAddress: MULTICALL_ADDRESSES[chainId],\n    entrypoint: Entrypoint.AGGREGATE,\n    calldata: [calldata.length, ...calldata.flat()],\n  })\n  const raw = rawResult.result.slice(2)\n\n  const result: string[][] = []\n  let idx = 0\n\n  for (let i = 0; i < raw.length; i += idx + 1) {\n    idx = parseInt(raw[i], 16)\n\n    result.push(raw.slice(i + 1, i + 1 + idx))\n  }\n\n  return result\n}\n","export const decimalsScale = (decimals: number) => `1${Array(decimals).fill('0').join('')}`\n","import { Fraction } from '@uniswap/sdk-core'\nimport { BlockNumber, BlockTag, ProviderInterface, uint256 } from 'starknet'\n\nimport { Entrypoint } from '../constants'\nimport { USDCPair } from '../types/tokens'\nimport { decimalsScale } from './helpers'\n\nexport async function getPairPrice(\n  provider: ProviderInterface,\n  pair?: USDCPair,\n  blockNumber: BlockNumber = BlockTag.latest,\n) {\n  if (!pair) return new Fraction(1, 1)\n\n  const { result } = await provider.callContract(\n    {\n      contractAddress: pair.address,\n      entrypoint: Entrypoint.GET_RESERVES,\n    },\n    blockNumber,\n  )\n\n  const [reserve0Low, reserve0High, reserve1Low, reserve1High] = result\n\n  const pairPrice = new Fraction(\n    uint256.uint256ToBN({ low: reserve1Low, high: reserve1High }).toString(),\n    uint256.uint256ToBN({ low: reserve0Low, high: reserve0High }).toString(),\n  )\n\n  // token0 and token1 are switched on some pairs\n  return (pair.reversed ? pairPrice.invert() : pairPrice).multiply(decimalsScale(12))\n}\n","import { Fraction, Percent } from '@uniswap/sdk-core'\nimport { CallData, getChecksumAddress, hash, shortString, stark, uint256 } from 'starknet'\n\nimport {\n  AMMS,\n  DECIMALS,\n  EKUBO_BOUND,\n  EKUBO_FEES_MULTIPLICATOR,\n  EKUBO_POSITIONS_ADDRESSES,\n  EKUBO_TICK_SPACING,\n  Entrypoint,\n  FACTORY_ADDRESSES,\n  LIQUIDITY_LOCK_FOREVER_TIMESTAMP,\n  LiquidityType,\n  QUOTE_TOKENS,\n  TOKEN_CLASS_HASH,\n} from '../constants'\nimport {\n  BaseMemecoin,\n  DeployData,\n  EkuboLaunchData,\n  EkuboLiquidity,\n  JediswapLiquidity,\n  LaunchedMemecoin,\n  Memecoin,\n  StandardAMMLaunchData,\n} from '../types/memecoin'\nimport { multiCallContract } from '../utils/contract'\nimport { getStartingTick } from '../utils/ekubo'\nimport { decimalsScale } from '../utils/helpers'\nimport { getPairPrice } from '../utils/price'\nimport { FactoryConfig, FactoryInterface } from './interface'\n\nexport class Factory implements FactoryInterface {\n  public config: FactoryConfig\n\n  constructor(config: FactoryConfig) {\n    this.config = config\n  }\n\n  public async getMemecoin(address: string): Promise<Memecoin | undefined> {\n    const [baseMemecoin, launchData] = await Promise.all([\n      this.getBaseMemecoin(address),\n      this.getMemecoinLaunchData(address),\n    ])\n\n    if (!baseMemecoin) return undefined\n\n    return { ...baseMemecoin, ...launchData }\n  }\n\n  //\n  // GET MEMECOIN\n  //\n\n  public async getBaseMemecoin(address: string): Promise<BaseMemecoin | undefined> {\n    const result = await multiCallContract(this.config.provider, this.config.chainId, [\n      {\n        contractAddress: FACTORY_ADDRESSES[this.config.chainId],\n        entrypoint: Entrypoint.IS_MEMECOIN,\n        calldata: [address],\n      },\n      {\n        contractAddress: address,\n        entrypoint: Entrypoint.NAME,\n      },\n      {\n        contractAddress: address,\n        entrypoint: Entrypoint.SYMBOL,\n      },\n      {\n        contractAddress: address,\n        entrypoint: Entrypoint.OWNER,\n      },\n      {\n        contractAddress: address,\n        entrypoint: Entrypoint.TOTAL_SUPPLY,\n      },\n    ])\n\n    const [[isMemecoin], [name], [symbol], [owner], totalSupply] = result\n\n    if (!+isMemecoin) return undefined\n\n    return {\n      address,\n      name: shortString.decodeShortString(name),\n      symbol: shortString.decodeShortString(symbol),\n      owner: getChecksumAddress(owner),\n      decimals: DECIMALS,\n      totalSupply: uint256.uint256ToBN({ low: totalSupply[0], high: totalSupply[1] }).toString(),\n    }\n  }\n\n  //\n  // GET LAUNCH\n  //\n\n  public async getMemecoinLaunchData(address: string): Promise<LaunchedMemecoin> {\n    const result = await multiCallContract(this.config.provider, this.config.chainId, [\n      {\n        contractAddress: address,\n        entrypoint: Entrypoint.GET_TEAM_ALLOCATION,\n      },\n      {\n        contractAddress: address,\n        entrypoint: Entrypoint.LAUNCHED_AT_BLOCK_NUMBER,\n      },\n      {\n        contractAddress: address,\n        entrypoint: Entrypoint.IS_LAUNCHED,\n      },\n      {\n        contractAddress: FACTORY_ADDRESSES[this.config.chainId],\n        entrypoint: Entrypoint.LOCKED_LIQUIDITY,\n        calldata: [address],\n      },\n      {\n        contractAddress: address,\n        entrypoint: Entrypoint.LAUNCHED_WITH_LIQUIDITY_PARAMETERS,\n      },\n    ])\n\n    const [\n      teamAllocation,\n      [launchBlockNumber],\n      [launched],\n      [dontHaveLiq, lockManager, liqTypeIndex, ekuboId],\n      launchParams,\n    ] = result\n\n    const liquidityType = Object.values(LiquidityType)[+liqTypeIndex] as LiquidityType\n\n    const isLaunched = !!+launched && !+dontHaveLiq && !+launchParams[0] && liquidityType\n\n    if (!isLaunched) {\n      return {\n        isLaunched: false,\n      }\n    }\n\n    let liquidity\n    switch (liquidityType) {\n      case LiquidityType.STARKDEFI_ERC20:\n      case LiquidityType.JEDISWAP_ERC20: {\n        const baseLiquidity = {\n          type: liquidityType,\n          lockManager,\n          lockPosition: launchParams[5],\n          quoteToken: getChecksumAddress(launchParams[2]),\n          quoteAmount: uint256.uint256ToBN({ low: launchParams[3], high: launchParams[4] }).toString(),\n        } satisfies Partial<JediswapLiquidity>\n\n        liquidity = {\n          ...baseLiquidity,\n          ...(await this.getJediswapLiquidityLockPosition(baseLiquidity)),\n        }\n        break\n      }\n\n      case LiquidityType.EKUBO_NFT: {\n        const baseLiquidity = {\n          type: liquidityType,\n          lockManager,\n          ekuboId,\n          quoteToken: getChecksumAddress(launchParams[7]),\n          startingTick: +launchParams[4] * (+launchParams[5] ? -1 : 1), // mag * sign\n        } satisfies Partial<EkuboLiquidity>\n\n        liquidity = {\n          ...baseLiquidity,\n          ...(await this.getEkuboLiquidityLockPosition(baseLiquidity)),\n        }\n      }\n    }\n\n    return {\n      isLaunched: true,\n      quoteToken: QUOTE_TOKENS[this.config.chainId][liquidity.quoteToken],\n      launch: {\n        teamAllocation: uint256.uint256ToBN({ low: teamAllocation[0], high: teamAllocation[1] }).toString(),\n        blockNumber: Number(launchBlockNumber),\n      },\n      liquidity,\n    }\n  }\n\n  //\n  // GET LIQUIDITY\n  //\n\n  private async getJediswapLiquidityLockPosition(liquidity: Pick<JediswapLiquidity, 'lockManager' | 'lockPosition'>) {\n    const { result } = await this.config.provider.callContract({\n      contractAddress: liquidity.lockManager,\n      entrypoint: Entrypoint.GET_LOCK_DETAILS,\n      calldata: [liquidity.lockPosition],\n    })\n\n    // TODO: deconstruct result array in cleaner way\n\n    return {\n      unlockTime: +result[4],\n      owner: getChecksumAddress(result[3]),\n    } satisfies Partial<JediswapLiquidity>\n  }\n\n  private async getEkuboLiquidityLockPosition(liquidity: Pick<EkuboLiquidity, 'lockManager' | 'ekuboId'>) {\n    const { result } = await this.config.provider.callContract({\n      contractAddress: liquidity.lockManager,\n      entrypoint: Entrypoint.LIQUIDITY_POSITION_DETAILS,\n      calldata: [liquidity.ekuboId],\n    })\n\n    // TODO: deconstruct result array in cleaner way\n\n    return {\n      unlockTime: LIQUIDITY_LOCK_FOREVER_TIMESTAMP,\n      owner: getChecksumAddress(result[0]),\n      poolKey: {\n        token0: getChecksumAddress(result[2]),\n        token1: getChecksumAddress(result[3]),\n        fee: result[4],\n        tickSpacing: result[5],\n        extension: result[6],\n      },\n      bounds: {\n        lower: {\n          mag: result[7],\n          sign: result[8],\n        },\n        upper: {\n          mag: result[9],\n          sign: result[10],\n        },\n      },\n    } satisfies Partial<EkuboLiquidity>\n  }\n\n  //\n  // GET FEES\n  //\n\n  public async getEkuboFees(memecoin: Memecoin): Promise<Fraction | undefined> {\n    if (!memecoin.isLaunched || memecoin.liquidity.type !== LiquidityType.EKUBO_NFT || !memecoin.quoteToken) return\n\n    const calldata = CallData.compile([\n      memecoin.liquidity.ekuboId,\n      memecoin.liquidity.poolKey,\n      memecoin.liquidity.bounds,\n    ])\n\n    // call ekubo position to get collectable fees details\n    const { result } = await this.config.provider.callContract({\n      contractAddress: EKUBO_POSITIONS_ADDRESSES[this.config.chainId],\n      entrypoint: Entrypoint.GET_TOKEN_INFOS,\n      calldata,\n    })\n\n    const [, , , , , , , fees0, fees1] = result\n\n    // parse fees amount\n    return new Fraction(\n      (new Fraction(memecoin.address).lessThan(memecoin.quoteToken.address) ? fees1 : fees0).toString(),\n      decimalsScale(memecoin.quoteToken.decimals),\n    )\n  }\n\n  //\n  // GET COLLECT EKUBO FEES CALLDATA\n  //\n\n  public getCollectEkuboFeesCalldata(memecoin: Memecoin) {\n    if (!memecoin.isLaunched || memecoin.liquidity.type !== LiquidityType.EKUBO_NFT) return\n\n    const collectFeesCalldata = CallData.compile([\n      memecoin.liquidity.ekuboId, // ekubo pool id\n      memecoin.liquidity.owner,\n    ])\n\n    const calls = [\n      {\n        contractAddress: memecoin.liquidity.lockManager,\n        entrypoint: Entrypoint.WITHDRAW_FEES,\n        calldata: collectFeesCalldata,\n      },\n    ]\n\n    return { calls }\n  }\n\n  //\n  // GET EXTEND LIQUIDITY LOCK CALLDATA\n  //\n\n  public getExtendLiquidityLockCalldata(memecoin: Memecoin, seconds: number) {\n    if (!memecoin?.isLaunched || memecoin.liquidity.type === LiquidityType.EKUBO_NFT) return\n\n    const extendCalldata = CallData.compile([\n      memecoin.liquidity.lockPosition, // liquidity position\n      seconds,\n    ])\n\n    const calls = [\n      {\n        contractAddress: memecoin.liquidity.lockManager,\n        entrypoint: Entrypoint.EXTEND_LOCK,\n        calldata: extendCalldata,\n      },\n    ]\n\n    return { calls }\n  }\n\n  //\n  // GET DEPLOY CALLDATA\n  //\n\n  public getDeployCalldata(data: DeployData) {\n    const salt = stark.randomAddress()\n\n    const constructorCalldata = CallData.compile([\n      data.owner,\n      data.name,\n      data.symbol,\n      uint256.bnToUint256(BigInt(data.initialSupply) * BigInt(decimalsScale(DECIMALS))),\n      salt,\n    ])\n\n    const tokenAddress = hash.calculateContractAddressFromHash(\n      salt,\n      TOKEN_CLASS_HASH[this.config.chainId],\n      constructorCalldata.slice(0, -1),\n      FACTORY_ADDRESSES[this.config.chainId],\n    )\n\n    const calls = [\n      {\n        contractAddress: FACTORY_ADDRESSES[this.config.chainId],\n        entrypoint: Entrypoint.CREATE_MEMECOIN,\n        calldata: constructorCalldata,\n      },\n    ]\n\n    return { tokenAddress, calls }\n  }\n\n  //\n  // GET LAUNCH CALLDATA\n  //\n\n  public async getEkuboLaunchCalldata(memecoin: Memecoin, data: EkuboLaunchData) {\n    // get quote token current price\n    const quoteTokenPrice = await getPairPrice(this.config.provider, data.quoteToken.usdcPair)\n\n    // get the team allocation amount\n    const teamAllocationFraction = data.teamAllocations.reduce((acc, { amount }) => acc.add(amount), new Fraction(0))\n    const teamAllocationPercentage = new Percent(\n      teamAllocationFraction.quotient,\n      new Fraction(memecoin.totalSupply, decimalsScale(DECIMALS)).quotient,\n    )\n\n    // get the team allocation value in quote token at launch\n    const teamAllocationQuoteAmount = new Fraction(data.startingMarketCap)\n      .divide(quoteTokenPrice)\n      .multiply(teamAllocationPercentage.multiply(data.fees.add(1)))\n    const uin256TeamAllocationQuoteAmount = uint256.bnToUint256(\n      BigInt(teamAllocationQuoteAmount.multiply(decimalsScale(data.quoteToken.decimals)).quotient.toString()),\n    )\n\n    // get initial price based on mcap and quote token price\n    const initialPrice = +new Fraction(data.startingMarketCap)\n      .divide(quoteTokenPrice)\n      .multiply(decimalsScale(DECIMALS))\n      .divide(new Fraction(memecoin.totalSupply))\n      .toFixed(DECIMALS)\n\n    // convert initial price to an Ekubo tick\n    const startingTickMag = getStartingTick(initialPrice)\n    const i129StartingTick = {\n      mag: Math.abs(startingTickMag),\n      sign: startingTickMag < 0,\n    }\n\n    // get ekubo fees\n    const fees = data.fees.multiply(EKUBO_FEES_MULTIPLICATOR).quotient.toString()\n\n    // get quote token transfer calldata to buy the team allocation\n    const transferCalldata = CallData.compile([\n      FACTORY_ADDRESSES[this.config.chainId], // recipient\n      uin256TeamAllocationQuoteAmount, // amount\n    ])\n\n    // get initial holders informations\n    const initialHolders = data.teamAllocations.map(({ address }) => address)\n    const initialHoldersAmounts = data.teamAllocations.map(({ amount }) =>\n      uint256.bnToUint256(BigInt(amount) * BigInt(decimalsScale(DECIMALS))),\n    )\n\n    // get launch calldata\n    const launchCalldata = CallData.compile([\n      memecoin.address, // memecoin address\n      data.antiBotPeriod, // anti bot period in seconds\n      +data.holdLimit.toFixed(1) * 100, // hold limit\n      data.quoteToken.address, // quote token address\n      initialHolders, // initial holders\n      initialHoldersAmounts, // initial holders amounts\n      fees, // ekubo fees\n      EKUBO_TICK_SPACING, // tick spacing\n      i129StartingTick, // starting tick\n      EKUBO_BOUND, // bound\n    ])\n\n    const calls = [\n      {\n        contractAddress: data.quoteToken.address,\n        entrypoint: Entrypoint.TRANSFER,\n        calldata: transferCalldata,\n      },\n      {\n        contractAddress: FACTORY_ADDRESSES[this.config.chainId],\n        entrypoint: Entrypoint.LAUNCH_ON_EKUBO,\n        calldata: launchCalldata,\n      },\n    ]\n\n    return {\n      calls,\n    }\n  }\n\n  public async getStandardAMMLaunchCalldata(memecoin: Memecoin, data: StandardAMMLaunchData) {\n    // get quote token current price\n    const quoteTokenPrice = await getPairPrice(this.config.provider, data.quoteToken.usdcPair)\n\n    // get the team allocation percentage\n    const teamAllocationFraction = data.teamAllocations.reduce((acc, { amount }) => acc.add(amount), new Fraction(0))\n    const teamAllocationPercentage = new Percent(\n      teamAllocationFraction.quotient,\n      new Fraction(memecoin.totalSupply, decimalsScale(DECIMALS)).quotient,\n    )\n\n    // get the amount of quote token needed in the pool\n    const quoteAmount = new Fraction(data.startingMarketCap)\n      .divide(quoteTokenPrice)\n      .multiply(new Fraction(1).subtract(teamAllocationPercentage))\n    const uin256QuoteAmount = uint256.bnToUint256(BigInt(quoteAmount.multiply(decimalsScale(18)).quotient.toString()))\n\n    // get initial holders informations\n    const initialHolders = data.teamAllocations.map(({ address }) => address)\n    const initialHoldersAmounts = data.teamAllocations.map(({ amount }) =>\n      uint256.bnToUint256(BigInt(amount) * BigInt(decimalsScale(DECIMALS))),\n    )\n\n    // quote token approve calldata\n    const approveCalldata = CallData.compile([\n      FACTORY_ADDRESSES[this.config.chainId], // spender\n      uin256QuoteAmount,\n    ])\n\n    // launch calldata\n    const launchCalldata = CallData.compile([\n      memecoin.address, // memecoin address\n      data.antiBotPeriod, // anti bot period in seconds\n      +data.holdLimit.toFixed(1) * 100, // hold limit\n      data.quoteToken.address, // quote token\n      initialHolders, // initial holders\n      initialHoldersAmounts, // initial holders amounts\n      uin256QuoteAmount, // quote amount\n      data.liquidityLockPeriod,\n    ])\n\n    const calls = [\n      {\n        contractAddress: data.quoteToken.address,\n        entrypoint: Entrypoint.APPROVE,\n        calldata: approveCalldata,\n      },\n      {\n        contractAddress: FACTORY_ADDRESSES[this.config.chainId],\n        entrypoint: AMMS[data.amm].launchEntrypoint,\n        calldata: launchCalldata,\n      },\n    ]\n\n    return {\n      calls,\n    }\n  }\n}\n","import { Fraction } from '@uniswap/sdk-core'\nimport { CallDetails, constants, ProviderInterface } from 'starknet'\n\nimport {\n  BaseMemecoin,\n  DeployData,\n  EkuboLaunchData,\n  LaunchedMemecoin,\n  Memecoin,\n  StandardAMMLaunchData,\n} from '../types/memecoin'\n\nexport type FactoryConfig = {\n  provider: ProviderInterface\n  chainId: constants.StarknetChainId\n}\n\n// TODO: Add comments\nexport abstract class FactoryInterface {\n  public abstract config: FactoryConfig\n\n  public abstract getMemecoin(address: string): Promise<Memecoin | undefined>\n\n  public abstract getBaseMemecoin(address: string): Promise<BaseMemecoin | undefined>\n\n  public abstract getMemecoinLaunchData(address: string): Promise<LaunchedMemecoin>\n\n  public abstract getEkuboFees(memecoin: Memecoin): Promise<Fraction | undefined>\n\n  public abstract getCollectEkuboFeesCalldata(memecoin: Memecoin): { calls: CallDetails[] } | undefined\n\n  public abstract getExtendLiquidityLockCalldata(\n    memecoin: Memecoin,\n    seconds: number,\n  ): { calls: CallDetails[] } | undefined\n\n  public abstract getDeployCalldata(data: DeployData): { tokenAddress: string; calls: CallDetails[] }\n\n  public abstract getEkuboLaunchCalldata(memecoin: Memecoin, data: EkuboLaunchData): Promise<{ calls: CallDetails[] }>\n\n  public abstract getStandardAMMLaunchCalldata(\n    memecoin: Memecoin,\n    data: StandardAMMLaunchData,\n  ): Promise<{ calls: CallDetails[] }>\n}\n","import { Fraction } from '@uniswap/sdk-core'\n\nimport { DECIMALS, LiquidityType } from '../constants'\nimport { Memecoin } from '../types'\nimport { getInitialPrice } from './ekubo'\nimport { decimalsScale } from './helpers'\n\n// eslint-disable-next-line import/no-unused-modules\nexport function getStartingMarketCap(memecoin: Memecoin, quoteTokenPriceAtLaunch?: Fraction): Fraction | undefined {\n  if (!memecoin.isLaunched || !quoteTokenPriceAtLaunch || !memecoin.quoteToken) return undefined\n\n  switch (memecoin.liquidity.type) {\n    case LiquidityType.STARKDEFI_ERC20:\n    case LiquidityType.JEDISWAP_ERC20: {\n      // starting mcap = quote amount in liq * (team allocation % + 100) * quote token price at launch\n      return new Fraction(memecoin.liquidity.quoteAmount)\n        .multiply(new Fraction(memecoin.launch.teamAllocation, memecoin.totalSupply).add(1))\n        .divide(decimalsScale(memecoin.quoteToken.decimals))\n        .multiply(quoteTokenPriceAtLaunch)\n    }\n\n    case LiquidityType.EKUBO_NFT: {\n      // get starting price from starting tick\n      const initialPrice = getInitialPrice(memecoin.liquidity.startingTick)\n\n      // starting mcap = initial price * quote token price at launch * total supply\n      return new Fraction(\n        initialPrice.toFixed(DECIMALS).replace(/\\./, '').replace(/^0+/, ''), // from 0.000[...]0001 to \"1\"\n        decimalsScale(DECIMALS),\n      )\n        .multiply(quoteTokenPriceAtLaunch)\n        .multiply(memecoin.totalSupply)\n        .divide(decimalsScale(DECIMALS))\n    }\n  }\n}\n","import { Fraction, Percent } from '@uniswap/sdk-core'\nimport moment from 'moment'\n\nimport {\n  LIQUIDITY_LOCK_SAFETY_BOUNDS,\n  Safety,\n  STARTING_MCAP_SAFETY_BOUNDS,\n  TEAM_ALLOCATION_SAFETY_BOUNDS,\n} from '../constants'\n\nexport function getTeamAllocationSafety(teamAllocation: Percent) {\n  if (teamAllocation.greaterThan(TEAM_ALLOCATION_SAFETY_BOUNDS[Safety.CORRECT])) return Safety.DANGEROUS\n  if (teamAllocation.greaterThan(TEAM_ALLOCATION_SAFETY_BOUNDS[Safety.SAFE])) return Safety.CORRECT\n  return Safety.SAFE\n}\n\nexport function getLiquidityLockSafety(liquidityLock: moment.Duration) {\n  if (liquidityLock.asMonths() >= LIQUIDITY_LOCK_SAFETY_BOUNDS[Safety.SAFE].asMonths()) return Safety.SAFE\n  if (liquidityLock.asMonths() >= LIQUIDITY_LOCK_SAFETY_BOUNDS[Safety.CORRECT].asMonths()) return Safety.CORRECT\n  return Safety.DANGEROUS\n}\n\nexport function getQuoteTokenSafety(isUnknown: boolean) {\n  return isUnknown ? Safety.DANGEROUS : Safety.SAFE\n}\n\nexport function getStartingMcapSafety(teamAllocation: Percent, startingMcap?: Fraction) {\n  if (!startingMcap) return Safety.DANGEROUS\n\n  if (\n    startingMcap?.lessThan(STARTING_MCAP_SAFETY_BOUNDS[Safety.CORRECT].mcap) ||\n    startingMcap.multiply(teamAllocation).greaterThan(STARTING_MCAP_SAFETY_BOUNDS[Safety.CORRECT].teamAllocatoion)\n  ) {\n    return Safety.DANGEROUS\n  }\n\n  if (\n    startingMcap?.lessThan(STARTING_MCAP_SAFETY_BOUNDS[Safety.SAFE].mcap) ||\n    startingMcap.multiply(teamAllocation).greaterThan(STARTING_MCAP_SAFETY_BOUNDS[Safety.SAFE].teamAllocatoion)\n  ) {\n    return Safety.CORRECT\n  }\n\n  return Safety.SAFE\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBA43DkBA,KAAKC,MAAAA,IANJD,KAAKE,OAAAA,IAl6BLF,KAAKG,KAAAA,IAjoBGH,KAAKI,KAAAA,KArTGJ,KAAKK;QAjBxC,MAAMC,UAAaC,MAAAA;UACjBC,YAAYC,IAAwBC,IAAAA;AAElC,gBADA,MAAMD,EAAN,GADkC,KAAA,OAAAC,IAE9BD,KAASH,EAAKK,aAChB,OAAM,IAAIC,WAAW,8BAAf;UAET;UAEY,OAANC,OAAOC,IAAD;AAAA,gBAAAC,KASJC,OAAOC;AARd,gBAAmB,YAAf,OAAOH,IAAkB;AAC3B,kBAAY,MAARA,GAAW,QAAOR,EAAKY,OAAL;AACtB,kBAAIZ,EAAKa,gBAAgBL,EAArB,EAAJ,QACY,IAANA,KACKR,EAAKc,WAAW,CAACN,IAAjB,IAAA,IAEFR,EAAKc,WAAWN,IAAhB,KAAA;AAET,kBAAI,CAACC,GAAgBD,EAAhB,KAAwBO,GAAWP,EAAX,MAAoBA,GAC/C,OAAM,IAAIF,WAAW,gBAAgBE,KAAhB,6DAAf;AAGR,qBAAOR,EAAKgB,aAAaR,EAAlB;YACR;AAAM,gBAAmB,YAAf,OAAOA,IAAkB;AAClC,oBAAMS,KAASjB,EAAKkB,aAAaV,EAAlB;AACf,kBAAe,SAAXS,GACF,OAAM,IAAIE,YAAY,oBAAoBX,KAAM,cAA1C;AAER,qBAAOS;YACR;AAAM,gBAAmB,aAAf,OAAOT,GAAX,QACD,SAAAA,KACKR,EAAKc,WAAW,GAAhB,KAAA,IAEFd,EAAKY,OAAL;AACF,gBAAmB,YAAf,OAAOJ,IAAkB;AAClC,kBAAIA,GAAIN,gBAAgBF,EAAM,QAAOQ;AACrC,oBAAMY,KAAYpB,EAAKqB,cAAcb,EAAnB;AAClB,qBAAOR,EAAKO,OAAOa,EAAZ;YACR;AACD,kBAAM,IAAIE,UAAU,oBAAoBd,KAAM,cAAxC;UACP;UAEDe,gBAAa;AACX,kBAAMN,KAAS,CAAC,SAAD;AACf,uBAAWO,MAAS,KAClBP,CAAAA,GAAOQ,MAAMD,MAASA,OAAU,GAAGE,SAAS,EAAvB,IAA6BF,MAAS,IAA3D;AAGF,mBADAP,GAAOQ,KAAK,GAAZ,GACOR,GAAOU,KAAK,EAAZ;UACR;UAEQD,SAASE,KAAgB,IAAjB;AACf,gBAAY,IAARA,MAAqB,KAARA,GACf,OAAM,IAAItB,WACN,oDADE;AAAN,mBAGkB,MAAhB,KAAKH,SAAqB,MACA,MAAzByB,KAASA,KAAQ,KACb5B,EAAK6B,yBAAyB,MAAMD,EAApC,IAEF5B,EAAK8B,kBAAkB,MAAMF,IAA7B,KAAA;UACR;UAIc,OAARG,SAASC,IAAD;AACb,kBAAMC,KAAUD,GAAE7B;AAClB,gBAAgB,MAAZ8B,GAAe,QAAO;AAC1B,gBAAgB,MAAZA,IAAe;AACjB,oBAAMC,KAAQF,GAAEG,gBAAgB,CAAlB;AACd,qBAAOH,GAAE5B,OAAO,CAAC8B,KAAQA;YAC1B;AAAA,kBACKE,KAAOJ,GAAEK,QAAQJ,KAAU,CAApB,GACPK,KAAkBtC,EAAKuC,QAAQH,EAAb,GAClBI,IAAuB,KAAVP,KAAeK;AAClC,gBAAiB,OAAbE,EAAmB,QAAOR,GAAE5B,OAAO,YAAT,IAAA;AAAP,gBACnBqC,KAAWD,IAAa,GACxBE,IAAeN,IACfO,IAAaV,KAAU;AAC3B,kBAAMW,IAAQN,KAAkB;AAChC,gBAAIO,IAA0B,OAAVD,IAAgB,IAAIF,KAAgBE;AACxDC,mBAAkB;AAClB,kBAAMC,IAAwBF,IAAQ;AAAtC,gBACIG,IAAwB,MAATH,IAAe,IAAKF,KAAiB,KAAKE,GACzDI,IAAuB,KAAKJ;AAAAA,iBACJ,IAAxBE,KAA0C,IAAbH,MAC/BA,KACAD,IAAeV,GAAEK,QAAQM,CAAV,GACfE,KAAiBH,MAAkB,KAAKI,GACxCC,IAAcL,KAAgBI,IAAwB,GACtDE,IAAuBF,IAAwB,IAEnB,IAAvBE,KAAyC,IAAbL,IACjCA,MACAD,IAAeV,GAAEK,QAAQM,CAAV,GAEbI,KAD0B,MAAxBC,IACcN,KAAiBM,IAAuB,KAExCN,MAAkB,KAAKM,GAEzCA,KAAwB;AAE1B,kBAAMC,IAAWjD,EAAKkD,iBAAiBlB,IAAGgB,GACtCL,GAAYD,CADC;AAEjB,iBAAiB,MAAbO,KAAgC,MAAbA,KAAwC,MAAP,IAAdF,QACxCA,IAAeA,IAAc,MAAO,GAChB,MAAhBA,MAEFF,KAC8B,KAAzBA,MAAiB,OAEpBA,IAAe,GACfJ,MACe,OAAXA,MAEF,QAAOT,GAAE5B,OAAO,YAAT,IAAA;AAKf,kBAAM+C,IAAUnB,GAAE5B,OAAF,cAAqB;AAIrC,mBAHAqC,KAAYA,KAAW,QAAU,IACjCzC,EAAKoD,qBAAqB,CAA1B,IAA+BD,IAAUV,KAAWI,GACpD7C,EAAKoD,qBAAqB,CAA1B,IAA+BL,GACxB/C,EAAKqD,uBAAuB,CAA5B;UACR;UAIgB,OAAVC,WAAWtB,IAAD;AACf,gBAAiB,MAAbA,GAAE7B,OAAc,QAAO6B;AAC3B,kBAAMf,KAASe,GAAEuB,OAAF;AAEf,mBADAtC,GAAOb,OAAO,CAAC4B,GAAE5B,MACVa;UACR;UAEgB,OAAVuC,WAAWxB,IAAD;AAAA,mBACXA,GAAE5B,OAEGJ,EAAKyD,iBAAiBzB,EAAtB,EAAyB0B,OAAzB,IAGF1D,EAAK2D,iBAAiB3B,IAAtB,IAAA;UACR;UAEkB,OAAZ4B,aAAa5B,IAAS6B,IAAV;AACjB,gBAAIA,GAAEzD,KACJ,OAAM,IAAIE,WAAW,2BAAf;AAER,gBAAiB,MAAbuD,GAAE1D,OACJ,QAAOH,EAAKc,WAAW,GAAhB,KAAA;AAET,gBAAiB,MAAbkB,GAAE7B,OAAc,QAAO6B;AAC3B,gBAAiB,MAAbA,GAAE7B,UAAiC,MAAjB6B,GAAEK,QAAQ,CAAV,EAAtB,QAEML,GAAE5B,QAA+B,MAAP,IAAfyD,GAAExB,QAAQ,CAAV,KACNrC,EAAKsD,WAAWtB,EAAhB,IAGFA;AAIT,gBAAe,IAAX6B,GAAE1D,OAAY,OAAM,IAAIG,WAAW,gBAAf;AACxB,gBAAIwD,KAAWD,GAAE1B,gBAAgB,CAAlB;AACf,gBAAiB,MAAb2B,GAAgB,QAAO9B;AAC3B,gBAAI8B,MAAY9D,EAAK+D,iBACnB,OAAM,IAAIzD,WAAW,gBAAf;AAER,gBAAiB,MAAb0B,GAAE7B,UAAiC,MAAjB6B,GAAEK,QAAQ,CAAV,GAAoB;AAAA,oBAElC2B,KAAe,KAAuB,IAAjBF,KAAW,KAChC1D,KAAO4B,GAAE5B,QAA4B,MAAP,IAAX0D,KACnB7C,KAAS,IAAIjB,EAAKgE,IAAc5D,EAAvB;AACfa,cAAAA,GAAOgD,mBAAP;AAEA,oBAAMC,KAAM,KAAMJ,KAAW;AAE7B,qBADA7C,GAAOkD,WAAWH,KAAe,GAAGE,EAApC,GACOjD;YACR;AAAA,gBACGA,KAAS,MACTmD,IAAgBpC;AAIpB,iBAFuB,MAAP,IAAX8B,QAAqB7C,KAASe,KACnC8B,OAAa,GACO,MAAbA,IAAgBA,OAAa,EAClCM,KAAgBpE,EAAKqE,SAASD,GAAeA,CAA7B,GACO,MAAP,IAAXN,QACY,SAAX7C,KACFA,KAASmD,IAETnD,KAASjB,EAAKqE,SAASpD,IAAQmD,CAAtB;AAKf,mBAAOnD;UACR;UAEc,OAARoD,SAASrC,IAAS6B,IAAV;AACb,gBAAiB,MAAb7B,GAAE7B,OAAc,QAAO6B;AAC3B,gBAAiB,MAAb6B,GAAE1D,OAAc,QAAO0D;AAC3B,gBAAIS,KAAetC,GAAE7B,SAAS0D,GAAE1D;AACG,kBAA/B6B,GAAEuC,SAAF,IAAeV,GAAEU,SAAF,KACjBD;AAEF,kBAAMrD,KAAS,IAAIjB,EAAKsE,IAActC,GAAE5B,SAASyD,GAAEzD,IAApC;AACfa,YAAAA,GAAOgD,mBAAP;AACA,qBAASO,IAAI,GAAGA,IAAIxC,GAAE7B,QAAQqE,IAC5BxE,GAAKyE,qBAAqBZ,IAAG7B,GAAEK,QAAQmC,CAAV,GAAcvD,IAAQuD,CAAnD;AAEF,mBAAOvD,GAAOyC,OAAP;UACR;UAEY,OAANgB,OAAO1C,IAAS6B,IAAV;AACX,gBAAiB,MAAbA,GAAE1D,OAAc,OAAM,IAAIG,WAAW,kBAAf;AAC1B,gBAAmC,IAA/BN,EAAK2E,kBAAkB3C,IAAG6B,EAA1B,EAAkC,QAAO7D,EAAKY,OAAL;AAAP,kBAChCgE,KAAa5C,GAAE5B,SAASyD,GAAEzD,MAC1ByE,KAAUhB,GAAE1B,gBAAgB,CAAlB;AAChB,gBAAI2C;AACJ,gBAAiB,MAAbjB,GAAE1D,UAA2B,SAAX0E,IAAmB;AACvC,kBAAgB,MAAZA,GACF,QAAOD,OAAe5C,GAAE5B,OAAO4B,KAAIhC,EAAKsD,WAAWtB,EAAhB;AAErC8C,kBAAW9E,EAAK+E,mBAAmB/C,IAAG6C,IAAS,IAApC;YACZ,MACCC,KAAW9E,EAAKgF,mBAAmBhD,IAAG6B,IAA3B,MAAA,KAAA;AAGb,mBADAiB,EAAS1E,OAAOwE,IACTE,EAASpB,OAAT;UACR;UAEe,OAATuB,UAAUjD,IAAS6B,IAAV;AACd,gBAAiB,MAAbA,GAAE1D,OAAc,OAAM,IAAIG,WAAW,kBAAf;AAC1B,gBAAmC,IAA/BN,EAAK2E,kBAAkB3C,IAAG6B,EAA1B,EAAkC,QAAO7B;AAC7C,kBAAM6C,KAAUhB,GAAE1B,gBAAgB,CAAlB;AAChB,gBAAiB,MAAb0B,GAAE1D,UAA2B,SAAX0E,IAAmB;AACvC,kBAAgB,MAAZA,GAAe,QAAO7E,EAAKY,OAAL;AAC1B,oBAAMsE,KAAiBlF,EAAKmF,mBAAmBnD,IAAG6C,EAA3B;AAFgB,qBAGhB,MAAnBK,KAA6BlF,EAAKY,OAAL,IAC1BZ,EAAKc,WAAWoE,IAAgBlD,GAAE5B,IAAlC;YACR;AACD,kBAAM6E,KAAYjF,EAAKgF,mBAAmBhD,IAAG6B,IAA3B,OAAA,IAAA;AAElB,mBADAoB,GAAU7E,OAAO4B,GAAE5B,MACZ6E,GAAUvB,OAAV;UACR;UAES,OAAH0B,IAAIpD,IAAS6B,IAAV;AACR,kBAAMzD,KAAO4B,GAAE5B;AAAf,mBACIA,OAASyD,GAAEzD,OAGNJ,EAAKqF,cAAcrD,IAAG6B,IAAGzD,EAAzB,IAI2B,KAAhCJ,EAAK2E,kBAAkB3C,IAAG6B,EAA1B,IACK7D,EAAKsF,cAActD,IAAG6B,IAAGzD,EAAzB,IAEFJ,EAAKsF,cAAczB,IAAG7B,IAAG,CAAC5B,EAA1B;UACR;UAEc,OAARmF,SAASvD,IAAS6B,IAAV;AACb,kBAAMzD,KAAO4B,GAAE5B;AAAf,mBACIA,OAASyD,GAAEzD,OAOqB,KAAhCJ,EAAK2E,kBAAkB3C,IAAG6B,EAA1B,IACK7D,EAAKsF,cAActD,IAAG6B,IAAGzD,EAAzB,IAEFJ,EAAKsF,cAAczB,IAAG7B,IAAG,CAAC5B,EAA1B,IAPEJ,EAAKqF,cAAcrD,IAAG6B,IAAGzD,EAAzB;UAQV;UAEe,OAAToF,UAAUxD,IAAS6B,IAAV;AAAA,mBACG,MAAbA,GAAE1D,UAA6B,MAAb6B,GAAE7B,SAAqB6B,KACzC6B,GAAEzD,OAAaJ,EAAKyF,uBAAuBzD,IAAG6B,EAA/B,IACZ7D,EAAK0F,sBAAsB1D,IAAG6B,EAA9B;UACR;UAEsB,OAAhB8B,iBAAiB3D,IAAS6B,IAAV;AAAA,mBACJ,MAAbA,GAAE1D,UAA6B,MAAb6B,GAAE7B,SAAqB6B,KACzC6B,GAAEzD,OAAaJ,EAAK0F,sBAAsB1D,IAAG6B,EAA9B,IACZ7D,EAAKyF,uBAAuBzD,IAAG6B,EAA/B;UACR;UAEwB,OAAlB+B,qBAAkB;AACvB,kBAAM,IAAItE,UACN,sDADE;UAEP;UAEc,OAARuE,SAAS7D,IAAS6B,IAAV;AACb,mBAAsC,IAA/B7D,EAAK8F,kBAAkB9D,IAAG6B,EAA1B;UACR;UAEqB,OAAfkC,gBAAgB/D,IAAS6B,IAAV;AACpB,mBAAuC,KAAhC7D,EAAK8F,kBAAkB9D,IAAG6B,EAA1B;UACR;UAEiB,OAAXmC,YAAYhE,IAAS6B,IAAV;AAChB,mBAAsC,IAA/B7D,EAAK8F,kBAAkB9D,IAAG6B,EAA1B;UACR;UAEwB,OAAlBoC,mBAAmBjE,IAAS6B,IAAV;AACvB,mBAAuC,KAAhC7D,EAAK8F,kBAAkB9D,IAAG6B,EAA1B;UACR;UAEW,OAALqC,MAAMlE,IAAS6B,IAAV;AACV,gBAAI7B,GAAE5B,SAASyD,GAAEzD,KAAM,QAAA;AACvB,gBAAI4B,GAAE7B,WAAW0D,GAAE1D,OAAQ,QAAA;AAC3B,qBAASqE,KAAI,GAAGA,KAAIxC,GAAE7B,QAAQqE,KAC5B,KAAIxC,GAAEK,QAAQmC,EAAV,MAAiBX,GAAExB,QAAQmC,EAAV,EAAc,QAAA;AAErC,mBAAA;UACD;UAEc,OAAR2B,SAASnE,IAAS6B,IAAV;AACb,mBAAO,CAAC7D,EAAKkG,MAAMlE,IAAG6B,EAAd;UACT;UAEgB,OAAVuC,WAAWpE,IAAS6B,IAAV;AACf,gBAAI,CAAC7B,GAAE5B,QAAQ,CAACyD,GAAEzD,KAChB,QAAOJ,EAAKqG,cAAcrE,IAAG6B,EAAtB,EAAyBH,OAAzB;AACF,gBAAI1B,GAAE5B,QAAQyD,GAAEzD,MAAM;AAC3B,oBAAMkE,KAAe,EAAStC,GAAE7B,QAAQ0D,GAAE1D,MAArB,IAA+B;AAGpD,kBAAIc,IAASjB,EAAKyD,iBAAiBzB,IAAGsC,EAAzB;AACb,oBAAMgC,KAAKtG,EAAKyD,iBAAiBI,EAAtB;AAEX,qBADA5C,IAASjB,EAAKuG,aAAatF,GAAQqF,IAAIrF,CAA9B,GACFjB,EAAK2D,iBAAiB1C,GAAtB,MAAoCA,CAApC,EAA4CyC,OAA5C;YACR;AAMD,mBAJI1B,GAAE5B,SACJ,CAAC4B,IAAG6B,EAAJ,IAAS,CAACA,IAAG7B,EAAJ,IAGJhC,EAAKwG,iBAAiBxE,IAAGhC,EAAKyD,iBAAiBI,EAAtB,CAAzB,EAAmDH,OAAnD;UACR;UAEgB,OAAV+C,WAAWzE,IAAS6B,IAAV;AACf,gBAAI,CAAC7B,GAAE5B,QAAQ,CAACyD,GAAEzD,KAChB,QAAOJ,EAAK0G,cAAc1E,IAAG6B,EAAtB,EAAyBH,OAAzB;AACF,gBAAI1B,GAAE5B,QAAQyD,GAAEzD,MAAM;AAAA,oBAErBkE,KAAe,EAAStC,GAAE7B,QAAQ0D,GAAE1D,MAArB,GACfc,KAASjB,EAAKyD,iBAAiBzB,IAAGsC,EAAzB,GACTgC,KAAKtG,EAAKyD,iBAAiBI,EAAtB;AACX,qBAAO7D,EAAK0G,cAAczF,IAAQqF,IAAIrF,EAA/B,EAAuCyC,OAAvC;YACR;AACD,kBAAMY,KAAe,EAAStC,GAAE7B,QAAQ0D,GAAE1D,MAArB,IAA+B;AAEhD6B,YAAAA,GAAE5B,SACJ,CAAC4B,IAAG6B,EAAJ,IAAS,CAACA,IAAG7B,EAAJ;AAGX,gBAAIf,IAASjB,EAAKyD,iBAAiBI,IAAGS,EAAzB;AAEb,mBADArD,IAASjB,EAAK0G,cAAczF,GAAQe,IAAGf,CAA9B,GACFjB,EAAK2D,iBAAiB1C,GAAtB,MAAoCA,CAApC,EAA4CyC,OAA5C;UACR;UAEe,OAATiD,UAAU3E,IAAS6B,IAAV;AACd,kBAAMS,KAAe,EAAStC,GAAE7B,QAAQ0D,GAAE1D,MAArB;AACrB,gBAAI,CAAC6B,GAAE5B,QAAQ,CAACyD,GAAEzD,KAChB,QAAOJ,EAAKuG,aAAavE,IAAG6B,EAArB,EAAwBH,OAAxB;AACF,gBAAI1B,GAAE5B,QAAQyD,GAAEzD,MAAM;AAG3B,kBAAIa,KAASjB,EAAKyD,iBAAiBzB,IAAGsC,EAAzB;AACb,oBAAMgC,KAAKtG,EAAKyD,iBAAiBI,EAAtB;AAEX,qBADA5C,KAASjB,EAAKqG,cAAcpF,IAAQqF,IAAIrF,EAA/B,GACFjB,EAAK2D,iBAAiB1C,IAAtB,MAAoCA,EAApC,EAA4CyC,OAA5C;YACR;AAEG1B,YAAAA,GAAE5B,SACJ,CAAC4B,IAAG6B,EAAJ,IAAS,CAACA,IAAG7B,EAAJ;AAGX,gBAAIf,IAASjB,EAAKyD,iBAAiBI,IAAGS,EAAzB;AAEb,mBADArD,IAASjB,EAAKwG,iBAAiBvF,GAAQe,IAAGf,CAAjC,GACFjB,EAAK2D,iBAAiB1C,GAAtB,MAAoCA,CAApC,EAA4CyC,OAA5C;UACR;UAEY,OAANkD,OAAOC,IAAW7E,IAAZ;AACX,gBAAiB,MAAbA,GAAE7B,OAAc,QAAO6B;AAE3B,gBADA6E,KAAI9F,GAAW8F,EAAX,GACI,IAAJA,GACF,OAAM,IAAIvG,WACN,oDADE;AAGR,gBAAU,MAANuG,GAAS,QAAO7G,EAAKY,OAAL;AAEpB,gBAAIiG,MAAK7G,EAAK+D,iBAAkB,QAAO/B;AACvC,kBAAM8E,KAAiC,KAAhBD,KAAI,MAAM;AACjC,gBAAI7E,GAAE7B,SAAS2G,GAAc,QAAO9E;AAAP,kBACvB+E,IAAW/E,GAAEG,gBAAgB2E,KAAe,CAAjC,GACXE,IAAe,MAAOH,KAAI,KAAK;AACrC,gBAAI7E,GAAE7B,WAAW2G,MAAgBC,IAAWC,EAAc,QAAOhF;AAGjE,gBAAI,GADY+E,IAAWC,OAAkBA,GAChC,QAAOhH,EAAKiH,kBAAkBJ,IAAG7E,EAA1B;AACpB,gBAAI,CAACA,GAAE5B,KAAM,QAAOJ,EAAKkH,+BAA+BL,IAAG7E,IAAvC,IAAA;AACpB,gBAAwC,MAAnC+E,IAAYC,IAAe,IAAW;AACzC,uBAASxC,IAAIsC,KAAe,GAAQ,KAALtC,GAAQA,IACrC,KAAqB,MAAjBxC,GAAEK,QAAQmC,CAAV,EACF,QAAOxE,EAAKkH,+BAA+BL,IAAG7E,IAAvC,KAAA;AAH8B,qBAMrCA,GAAE7B,WAAW2G,MAAgBC,MAAaC,IAAqBhF,KAC5DhC,EAAKiH,kBAAkBJ,IAAG7E,EAA1B;YACR;AACD,mBAAOhC,EAAKkH,+BAA+BL,IAAG7E,IAAvC,KAAA;UACR;UAEa,OAAPmF,QAAQN,IAAW7E,IAAZ;AACZ,gBAAiB,MAAbA,GAAE7B,OAAc,QAAO6B;AAE3B,gBADA6E,KAAI9F,GAAW8F,EAAX,GACI,IAAJA,GACF,OAAM,IAAIvG,WACN,oDADE;AAGR,gBAAU,MAANuG,GAAS,QAAO7G,EAAKY,OAAL;AAEpB,gBAAIoB,GAAE5B,MAAM;AACV,kBAAIyG,KAAI7G,EAAK+D,iBACX,OAAM,IAAIzD,WAAW,gBAAf;AAER,qBAAON,EAAKkH,+BAA+BL,IAAG7E,IAAvC,KAAA;YACR;AAED,gBAAI6E,MAAK7G,EAAK+D,iBAAkB,QAAO/B;AACvC,kBAAM8E,KAAiC,KAAhBD,KAAI,MAAM;AACjC,gBAAI7E,GAAE7B,SAAS2G,GAAc,QAAO9E;AACpC,kBAAMoF,KAAiBP,KAAI;AAC3B,gBAAI7E,GAAE7B,UAAU2G,IAAc;AAC5B,kBAAuB,MAAnBM,GAAsB,QAAOpF;AACjC,oBAAM+E,KAAW/E,GAAEK,QAAQyE,KAAe,CAAzB;AACjB,kBAAsC,KAAjCC,OAAaK,GAAuB,QAAOpF;YACjD;AAED,mBAAOhC,EAAKiH,kBAAkBJ,IAAG7E,EAA1B;UACR;UAIS,OAAHqF,IAAIrF,IAAQ6B,IAAT;AAGR,gBAFA7B,KAAIhC,EAAKqB,cAAcW,EAAnB,GACJ6B,KAAI7D,EAAKqB,cAAcwC,EAAnB,GACa,YAAb,OAAO7B,GAET,QADiB,YAAb,OAAO6B,OAAgBA,KAAIA,GAAEnC,SAAF,IACxBM,KAAI6B;AAEb,gBAAiB,YAAb,OAAOA,GACT,QAAO7B,GAAEN,SAAF,IAAemC;AAIxB,gBAFA7B,KAAIhC,EAAKsH,YAAYtF,EAAjB,GACJ6B,KAAI7D,EAAKsH,YAAYzD,EAAjB,GACA7D,EAAKuH,WAAWvF,EAAhB,KAAsBhC,EAAKuH,WAAW1D,EAAhB,EACxB,QAAO7D,EAAKoF,IAAIpD,IAAG6B,EAAZ;AAET,gBAAiB,YAAb,OAAO7B,MAA+B,YAAb,OAAO6B,GAClC,QAAO7B,KAAI6B;AAEb,kBAAM,IAAIvC,UACN,6DADE;UAEP;UAEQ,OAAFkG,GAAGxF,IAAQ6B,IAAT;AACP,mBAAO7D,EAAKyH,UAAUzF,IAAG6B,IAAG,CAArB;UACR;UACQ,OAAF6D,GAAG1F,IAAQ6B,IAAT;AACP,mBAAO7D,EAAKyH,UAAUzF,IAAG6B,IAAG,CAArB;UACR;UACQ,OAAF8D,GAAG3F,IAAQ6B,IAAT;AACP,mBAAO7D,EAAKyH,UAAUzF,IAAG6B,IAAG,CAArB;UACR;UACQ,OAAF+D,GAAG5F,IAAQ6B,IAAT;AACP,mBAAO7D,EAAKyH,UAAUzF,IAAG6B,IAAG,CAArB;UACR;UAEQ,OAAFgE,GAAG7F,IAAQ6B,IAAT;AAAA,uBAAA;AAEL,kBAAI7D,EAAKuH,WAAWvF,EAAhB,EAAJ,QACMhC,EAAKuH,WAAW1D,EAAhB,IAA2B7D,EAAKkG,MAAMlE,IAAG6B,EAAd,IACxB7D,EAAK6H,GAAGhE,IAAG7B,EAAX;AACF,kBAAiB,YAAb,OAAOA,IAAgB;AAChC,oBAAIhC,EAAKuH,WAAW1D,EAAhB,EAAoB,QAAO7D,EAAK8H,gBAAgBjE,IAAG7B,EAAxB;AAC/B,oBAAiB,YAAb,OAAO6B,GAAgB,QAAO7B,MAAK6B;AACvCA,gBAAAA,KAAI7D,EAAKqB,cAAcwC,EAAnB;cACL,WAAuB,YAAb,OAAO7B,IAAgB;AAChC,oBAAIhC,EAAKuH,WAAW1D,EAAhB,EAAJ,QACE7B,KAAIhC,EAAKkB,aAAac,EAAlB,GACM,SAANA,MACGhC,EAAKkG,MAAMlE,IAAG6B,EAAd;AAET,oBAAiB,YAAb,OAAOA,GAAgB,QAAO7B,MAAK6B;AACvCA,gBAAAA,KAAI7D,EAAKqB,cAAcwC,EAAnB;cACL,WAAuB,aAAb,OAAO7B,IAAiB;AACjC,oBAAIhC,EAAKuH,WAAW1D,EAAhB,EAAoB,QAAO7D,EAAK8H,gBAAgBjE,IAAG,CAAC7B,EAAzB;AAC/B,oBAAiB,YAAb,OAAO6B,GAAgB,QAAO7B,MAAK6B;AACvCA,gBAAAA,KAAI7D,EAAKqB,cAAcwC,EAAnB;cACL,WAAuB,YAAb,OAAO7B,IAAgB;AAChC,oBAAIhC,EAAKuH,WAAW1D,EAAhB,EAAoB,QAAA;AACxB,oBAAiB,YAAb,OAAOA,GAAgB,QAAO7B,MAAK6B;AACvCA,gBAAAA,KAAI7D,EAAKqB,cAAcwC,EAAnB;cACL,WAAuB,YAAb,OAAO7B,IAAgB;AAChC,oBAAiB,YAAb,OAAO6B,MAAkBA,GAAE3D,gBAAgBF,EAAM,QAAOgC,MAAK6B;AACjE7B,gBAAAA,KAAIhC,EAAKqB,cAAcW,EAAnB;cACL,MACC,QAAOA,MAAK6B;YAAAA;UAGjB;UAEQ,OAAFkE,GAAG/F,IAAQ6B,IAAT;AACP,mBAAO,CAAC7D,EAAK6H,GAAG7F,IAAG6B,EAAX;UACT;UAIY,OAANjD,SAAM;AACX,mBAAO,IAAIZ,EAAK,GAAT,KAAA;UACR;UAEgB,OAAVc,WAAWoB,IAAe9B,IAAhB;AACf,kBAAMa,KAAS,IAAIjB,EAAK,GAAGI,EAAZ;AAEf,mBADAa,GAAOkD,WAAW,GAAGjC,EAArB,GACOjB;UACR;UAEDsC,SAAM;AACJ,kBAAMtC,KAAS,IAAIjB,EAAK,KAAKG,QAAQ,KAAKC,IAA3B;AACf,qBAASoE,KAAI,GAAGA,KAAI,KAAKrE,QAAQqE,KAC/BvD,CAAAA,GAAOuD,EAAD,IAAM,KAAKA,EAAL;AAEd,mBAAOvD;UACR;UAEDyC,SAAM;AAAA,gBACAsE,KAAY,KAAK7H,QACjB8H,KAAO,KAAKD,KAAY,CAAjB;AAAA,mBACK,MAATC,KACLD,CAAAA,MACAC,KAAO,KAAKD,KAAY,CAAjB,GACP,KAAKE,IAAL;AAGF,mBADkB,MAAdF,OAAiB,KAAK5H,OAAL,QACd;UACR;UAED6D,qBAAkB;AAChB,qBAASO,KAAI,GAAGA,KAAI,KAAKrE,QAAQqE,KAC/B,MAAKA,EAAL,IAAU;UAEb;UAEsB,OAAhBtB,iBAAiBlB,IAASmG,IAC7BxF,IAAoBD,IADD;AAErB,gBAAwB,IAApByF,GAAuB,QAAO;AAClC,gBAAIC;AACJ,gBAAwB,IAApBD,GACFC,KAAmB,CAACD,KAAoB;iBACnC;AAEL,kBAAmB,MAAfxF,GAAkB,QAAO;AAC7BA,cAAAA,MACAD,KAAeV,GAAEK,QAAQM,EAAV,GACfyF,IAAmB;YACpB;AAED,gBAAIC,KAAO,KAAKD;AAChB,gBAA8B,MAAzB1F,KAAe2F,IAAa,QAAO;AAGxC,gBADAA,MAAQ,GACsB,MAAzB3F,KAAe2F,IAAa,QAAO;AAAP,mBACb,IAAb1F,KAEL,KADAA,MAC8B,MAA1BX,GAAEK,QAAQM,EAAV,EAA6B,QAAO;AAE1C,mBAAO;UACR;UAEkB,OAAZ3B,aAAakB,IAAD;AAEjBlC,cAAKqD,uBAAuB,CAA5B,IAAiCnB;AAAAA,kBAC3BoG,KAAsD,OAAvCtI,EAAKoD,qBAAqB,CAA1B,MAAiC,IAChDX,KAAW6F,KAAc,MACzBC,MAA4B,IAAjB9F,KAAW,MAAW,GACjCxB,IAAS,IAAIjB,EAAKuI,IALH,IAARrG,EAKE;AAAA,gBAEXW,KAA+C,UAA/B7C,EAAKoD,qBAAqB,CAA1B,IADD,SAEfL,IAAc/C,EAAKoD,qBAAqB,CAA1B;AAAA,kBACZoF,IAAsB,IAEtBC,IAAYhG,KAAW;AAAA,gBAKzBjB,GAFAkH,IAAwB;AAI5B,gBAAI,KAAAD,GAAiC;AACnC,oBAAM7F,KAAQ4F,IAAsBC;AACpCC,kBAAwB9F,KAAQ,IAChCpB,IAAQqB,OAAiBD,IACzBC,KAAgBA,MAAiB,KAAKD,KAAWG,MAAgBH,IACjEG,MAA8B,KAAKH;YACpC,WAAU,OAAA6F,EACTC,KAAwB,IACxBlH,IAAQqB,IACRA,KAAeE,GACfA,IAAc;iBACT;AACL,oBAAMH,KAAQ6F,IAAYD;AAC1BE,kBAAwB,KAAK9F,IAC7BpB,IAASqB,MAAgBD,KAAUG,MAAiB,KAAKH,IACzDC,KAAeE,KAAeH,IAC9BG,IAAc;YACf;AACD9B,cAAOkD,WAAWoE,KAAS,GAAG/G,CAA9B;AAEA,qBAASmB,KAAa4F,KAAS,GAAiB,KAAd5F,IAAiBA,KACrB,KAAxB+F,KACFA,KAAyB,IACzBlH,IAAQqB,OAAiB,GACzBA,KAAgBA,MAAgB,KAAOE,MAAgB,GACvDA,MAA8B,MAE9BvB,IAAQ,GAEVP,EAAOkD,WAAWxB,IAAYnB,CAA9B;AAEF,mBAAOP,EAAOyC,OAAP;UACR;UAEoB,OAAdiF,eAAeC,IAAD;AAAA,mBAAA,CAAA,EACV,MAALA,MAAkB,KAALA,QACR,OAALA,KAAwB,MAANA,KACb,UAALA,KACW,OAANA,MAAoB,QAANA,KAEd,UAALA,MACFA,MAAK,QACO,MAALA,MAAmB,MAANA,MAAoB,MAANA,MAAoB,MAANA,MACnC,MAANA,MAAoB,QAANA,MAEV,SAANA;UACR;UAEkB,OAAZ1H,aAAa2H,IAAgBjH,KAAe,GAAhC;AACjB,gBAAIxB,KAAO;AAEX,kBAAMD,KAAS0I,GAAO1I;AACtB,gBAAI2I,IAAS;AACb,gBAAIA,MAAW3I,GAAQ,QAAOH,EAAKY,OAAL;AAC9B,gBAAImI,KAAUF,GAAOG,WAAWF,CAAlB;AAAd,mBAEO9I,EAAK2I,eAAeI,EAApB,KAA8B;AACnC,kBAAI,EAAED,MAAW3I,GAAQ,QAAOH,EAAKY,OAAL;AAChCmI,cAAAA,KAAUF,GAAOG,WAAWF,CAAlB;YACX;AAGD,gBAAgB,OAAZC,IAAkB;AACpB,kBAAI,EAAED,MAAW3I,GAAQ,QAAO;AAChC4I,cAAAA,KAAUF,GAAOG,WAAWF,CAAlB,GACV1I,KAAO;YACR,WAAsB,OAAZ2I,IAAkB;AAC3B,kBAAI,EAAED,MAAW3I,GAAQ,QAAO;AAChC4I,cAAAA,KAAUF,GAAOG,WAAWF,CAAlB,GACV1I,KAAO;YACR;AAED,gBAAc,MAAVwB,IAAJ;AAEE,kBADAA,KAAQ,IACQ,OAAZmH,IAAkB;AACpB,oBAAI,EAAED,MAAW3I,GAAQ,QAAOH,EAAKY,OAAL;AAEhC,oBADAmI,KAAUF,GAAOG,WAAWF,CAAlB,GACM,OAAZC,MAAgC,QAAZA,IAAkB;AAExC,sBADAnH,KAAQ,IACJ,EAAEkH,MAAW3I,GAAQ,QAAO;AAChC4I,kBAAAA,KAAUF,GAAOG,WAAWF,CAAlB;gBACX,WAAsB,OAAZC,MAAgC,QAAZA,IAAkB;AAE/C,sBADAnH,KAAQ,GACJ,EAAEkH,MAAW3I,GAAQ,QAAO;AAChC4I,kBAAAA,KAAUF,GAAOG,WAAWF,CAAlB;gBACX,WAAsB,OAAZC,MAAgC,OAAZA,IAAkB;AAE/C,sBADAnH,KAAQ,GACJ,EAAEkH,MAAW3I,GAAQ,QAAO;AAChC4I,kBAAAA,KAAUF,GAAOG,WAAWF,CAAlB;gBAGX;cACF;YApBH,WAqBqB,OAAVlH,MACO,OAAZmH,IAAkB;AAEpB,kBAAI,EAAED,MAAW3I,GAAQ,QAAOH,EAAKY,OAAL;AAEhC,kBADAmI,KAAUF,GAAOG,WAAWF,CAAlB,GACM,OAAZC,MAAgC,QAAZA,IAAkB;AACxC,oBAAI,EAAED,MAAW3I,GAAQ,QAAO;AAChC4I,gBAAAA,KAAUF,GAAOG,WAAWF,CAAlB;cAGX;YACF;AAEH,gBAAa,KAAT1I,MAAwB,OAAVwB,GAAc,QAAO;AAAP,mBAEb,OAAZmH,MAAkB;AAEvB,kBAAI,EAAED,MAAW3I,GAAQ,QAAOH,EAAKY,OAAL;AAChCmI,cAAAA,KAAUF,GAAOG,WAAWF,CAAlB;YACX;AAGD,kBAAMG,IAAQ9I,KAAS2I;AAAvB,gBACII,IAAclJ,EAAKmJ,kBAAkBvH,EAAvB,GACdwH,IAAUpJ,EAAKqJ,gCAAgC;AACnD,gBAAIJ,IAAQ,aAAYC,EAAa,QAAO;AAAP,kBAC/BI,IACDJ,IAAcD,IAAQG,MAAapJ,EAAKuJ,0BAEvCtI,IAAS,IAAIjB,EAD0B,KAAtBsJ,IAAU,MAAM,IACxB,KAAA,GAGTE,IAAmB,KAAR5H,KAAaA,KAAQ,IAChC6H,IAAmB,KAAR7H,KAAaA,KAAQ,KAAK;AAE3C,gBAA8B,MAAzBA,KAASA,KAAQ,IAAW;AAE/BsH,oBAAgBlJ,EAAKuJ;AAFU,oBAGzBG,KAAQ,CAAA,GACRC,KAAY,CAAA;AAClB,kBAAIC,KAAI;AACR,iBAAG;AAAA,oBACGC,KAAO,GACPC,KAAO;AAFV,2BAGY;AACX,sBAAIC;AACJ,sBAAMhB,KAAU,OAAQ,IAAKS,EAC3BO,CAAAA,KAAIhB,KAAU;4BACQ,KAAVA,MAAgB,OAAQ,IAAKU,EACzCM,CAAAA,MAAe,KAAVhB,MAAgB;uBAChB;AACLa,oBAAAA,KAAI;AACJ;kBACD;AAGD,sBAFAE,MAAQZ,GACRW,KAAQA,MAAQX,IAAea,IAC3B,EAAEjB,MAAW3I,IAAQ;AACvByJ,oBAAAA,KAAI;AACJ;kBACD;AAED,sBADAb,KAAUF,GAAOG,WAAWF,CAAlB,GACe,KAArBgB,KAAOZ,EAAkB;gBAC9B;AACDQ,gBAAAA,GAAMjI,KAAKoI,EAAX,GACAF,GAAUlI,KAAKqI,EAAf;cACD,SAAQ,CAACF;AACV5J,gBAAKgK,gBAAgB/I,GAAQyI,IAAOC,EAApC;YACD,OAAM;AACL1I,gBAAOgD,mBAAP;AADK,kBAED2F,KAAI,OACJK,KAAa;AACjB,iBAAG;AAAA,oBACGJ,KAAO,GACPK,IAAa;AAFhB,2BAGY;AACX,sBAAIH;AACJ,sBAAMhB,KAAU,OAAQ,IAAKS,EAC3BO,CAAAA,KAAIhB,KAAU;4BACQ,KAAVA,MAAgB,OAAQ,IAAKU,EACzCM,CAAAA,MAAe,KAAVhB,MAAgB;uBAChB;AACLa,oBAAAA,KAAI;AACJ;kBACD;AAED,wBAAMO,KAAID,IAAatI;AACvB,sBAAQ,aAAJuI,GAAgB;AAIpB,sBAHAD,IAAaC,IACbN,KAAOA,KAAOjI,KAAQmI,IACtBE,MACI,EAAEnB,MAAW3I,IAAQ;AACvByJ,oBAAAA,KAAI;AACJ;kBACD;AACDb,kBAAAA,KAAUF,GAAOG,WAAWF,CAAlB;gBACX;AACDM,oBAA+C,KAArCpJ,EAAKqJ,gCAAqC;AACpD,sBAAMe,IACsD,KADrClB,IAAce,KAAab,MAC7BpJ,EAAKuJ,4BAA4B;AACtDtI,kBAAOoJ,qBAAqBH,GAAYL,IAAMO,CAA9C;cACD,SAAQ,CAACR;YACX;AAED,gBAAId,MAAW3I,IAAQ;AACrB,kBAAI,CAACH,EAAK2I,eAAeI,EAApB,EAA8B,QAAO;AAC1C,mBAAKD,KAAUA,IAAS3I,IAAQ2I,IAE9B,KADAC,KAAUF,GAAOG,WAAWF,CAAlB,GACN,CAAC9I,EAAK2I,eAAeI,EAApB,EAA8B,QAAO;YAE7C;AAID,mBADA9H,EAAOb,OAAiB,MAATA,IACRa,EAAOyC,OAAP;UACR;UAEqB,OAAfsG,gBAAgB/I,IAAcyI,IAAiBC,IAAhC;AAAA,gBAEhBhH,IAAa,GACbnB,KAAQ,GACR8I,KAAc;AAClB,qBAAS9F,IAAIkF,GAAMvJ,SAAS,GAAQ,KAALqE,GAAQA,KAAK;AAAA,oBACpCqF,KAAOH,GAAMlF,CAAD,GACZ+F,IAAWZ,GAAUnF,CAAD;AAC1BhD,cAAAA,MAAUqI,MAAQS,IAClBA,MAAeC,GACK,OAAhBD,MACFrJ,GAAOkD,WAAWxB,KAAcnB,EAAhC,GACA8I,KAAc,GACd9I,KAAQ,KACe,KAAd8I,OACTrJ,GAAOkD,WAAWxB,KAAsB,aAARnB,EAAhC,GACA8I,MAAe,IACf9I,KAAQqI,OAAUU,IAAWD;YAEhC;AACD,gBAAc,MAAV9I,IAAa;AACf,kBAAImB,KAAc1B,GAAOd,OAAQ,OAAM,IAAIqK,MAAM,oBAAV;AACvCvJ,cAAAA,GAAOkD,WAAWxB,KAAcnB,EAAhC;YACD;AACD,mBAAOmB,IAAa1B,GAAOd,QAAQwC,IACjC1B,CAAAA,GAAOkD,WAAWxB,GAAY,CAA9B;UAEH;UAE8B,OAAxBd,yBAAyBG,IAASJ,IAAV;AAC7B,kBAAMzB,KAAS6B,GAAE7B;AACjB,gBAAI2J,KAAOlI,KAAQ;AACnBkI,YAAAA,MAAuB,KAAdA,OAAS,MAAqB,KAAPA,KAChCA,MAAuB,KAAdA,OAAS,MAAqB,KAAPA,KAChCA,MAAuB,KAAdA,OAAS,MAAqB,KAAPA;AAAzB,kBACDZ,IAAcY,IACdW,KAAW7I,KAAQ,GACnBsC,IAAMlC,GAAEK,QAAQlC,KAAS,CAAnB,GACNmC,IAAkBtC,EAAKuC,QAAQ2B,CAAb;AAExB,gBAAIwG,IACgD,KAFzB,KAATvK,KAAcmC,IAEd4G,IAAc,KAAKA;AAErC,gBADIlH,GAAE5B,QAAMsK,KACR,YAAAA,EAA2B,OAAM,IAAIF,MAAM,iBAAV;AACrC,kBAAMvJ,IAAahB,MAAMyK,CAAb;AAAZ,gBACIC,IAAMD,IAAgB,GACtBlJ,IAAQ,GACRoJ,IAAgB;AACpB,qBAASpG,KAAI,GAAGA,KAAIrE,KAAS,GAAGqE,MAAK;AAAA,oBAC7BqG,KAAW7I,GAAEK,QAAQmC,EAAV,GACXuE,MAAWvH,IAASqJ,MAAYD,KAAkBH;AACxDxJ,gBAAO0J,GAAD,IAAU3K,EAAK8K,mBAAmB/B,EAAxB;AAChB,oBAAMgC,KAAe7B,IAAc0B;AAJA,mBAKnCpJ,IAAQqJ,OAAaE,IACrBH,IAAgB,KAAKG,IACdH,KAAiB1B,IACtBjI,GAAO0J,GAAD,IAAU3K,EAAK8K,mBAAmBtJ,IAAQiJ,EAAhC,GAChBjJ,OAAW0H,GACX0B,KAAiB1B;YAEpB;AACD,kBAAMH,KAAWvH,IAAS0C,KAAO0G,KAAkBH;AAAnD,iBACAxJ,EAAO0J,GAAD,IAAU3K,EAAK8K,mBAAmB/B,CAAxB,GAChBvH,IAAQ0C,MAASgF,IAAc0B,GACd,MAAVpJ,IACLP,GAAO0J,GAAD,IAAU3K,EAAK8K,mBAAmBtJ,IAAQiJ,EAAhC,GAChBjJ,OAAW0H;AAGb,gBADIlH,GAAE5B,SAAMa,EAAO0J,GAAD,IAAU,MAChB,MAARA,EAAY,OAAM,IAAIH,MAAM,oBAAV;AACtB,mBAAOvJ,EAAOU,KAAK,EAAZ;UACR;UAEuB,OAAjBG,kBAAkBE,IAASJ,IAAeoJ,IAAzB;AAEtB,kBAAM7K,KAAS6B,GAAE7B;AACjB,gBAAe,MAAXA,GAAc,QAAO;AACzB,gBAAe,MAAXA,IAAc;AAChB,kBAAIc,KAASe,GAAEG,gBAAgB,CAAlB,EAAqBT,SAASE,EAA9B;AAIb,qBAHI,UAAAoJ,MAA6BhJ,GAAE5B,SACjCa,KAAS,MAAMA,KAEVA;YACR;AAAA,kBACKgK,IAAqB,KAAT9K,KAAcH,EAAKuC,QAAQP,GAAEK,QAAQlC,KAAS,CAAnB,CAAb,GAC1B+K,KAAiBlL,EAAKmJ,kBAAkBvH,EAAvB,GACjBuJ,IAAiBD,KAAiB;AACxC,gBAAIR,IAAgBO,IAAYjL,EAAKqJ;AACrCqB,iBAAiBS,IAAiB,GAClCT,IAAmD,IAAlCA,IAAgBS;AAAAA,kBAC3BC,IAAmBV,IAAgB,KAAM,GAGzCW,IAAYrL,EAAK4D,aAAa5D,EAAKc,WAAWc,IAAhB,KAAA,GAChC5B,EAAKc,WAAWsK,GAAhB,KAAA,CADc;AAAA,gBAEdtG,GACAwG;AACJ,kBAAMzG,IAAUwG,EAAUlJ,gBAAgB,CAA1B;AAChB,gBAAyB,MAArBkJ,EAAUlL,UAA2B,SAAX0E,GAAmB;AAC/CC,kBAAW,IAAI9E,EAAKgC,GAAE7B,QAAX,KAAA,GACX2E,EAASb,mBAAT;AACA,kBAAIgB,KAAY;AAChB,uBAAST,KAAe,IAAXxC,GAAE7B,SAAa,GAAQ,KAALqE,IAAQA,MAAK;AAC1C,sBAAM+G,KAAStG,MAAa,KAAMjD,GAAEwJ,YAAYhH,EAAd;AAClCM,kBAAS2G,eAAejH,IAAuB,IAAnB+G,KAAQ1G,CAApC,GACAI,KAAgC,IAAnBsG,KAAQ1G;cACtB;AACDyG,kBAAarG,GAAUvD,SAASE,EAAnB;YACd,OAAM;AACL,oBAAM8J,KAAiB1L,EAAKgF,mBAAmBhD,IAAGqJ,GAA3B,MAAA,IAAA;AACvBvG,kBAAW4G,GAAe5G;AAC1B,oBAAMG,KAAYyG,GAAezG,UAAUvB,OAAzB;AAClB4H,kBAAatL,EAAK8B,kBAAkBmD,IAAWrD,IAAlC,IAAA;YACd;AACDkD,cAASpB,OAAT;AACA,gBAAIiI,IAAY3L,EAAK8B,kBAAkBgD,GAAUlD,IAAjC,IAAA;AAAhB,mBACO0J,EAAWnL,SAASiL,IACzBE,KAAa,MAAMA;AAKrB,mBAHI,UAAAN,MAA6BhJ,GAAE5B,SACjCuL,IAAY,MAAMA,IAEbA,IAAYL;UACpB;UAEmB,OAAbM,cAAcC,IAAD;AAClB,mBAAOA,KAAe,KAAK;UAC5B;UACuB,OAAjBC,kBAAkBC,IAAD;AACtB,mBAAOA,KAAe,KAAK;UAC5B;UACoB,OAAdC,eAAeD,IAAD;AACnB,mBAAOA,KAAe,IAAI;UAC3B;UAEuB,OAAjBjG,kBAAkB9D,IAAS6B,IAAV;AACtB,kBAAMoI,KAAQjK,GAAE5B;AAChB,gBAAI6L,OAAUpI,GAAEzD,KAAM,QAAOJ,EAAK4L,cAAcK,EAAnB;AAC7B,kBAAMhL,KAASjB,EAAK2E,kBAAkB3C,IAAG6B,EAA1B;AAAf,mBACa,IAAT5C,KAAmBjB,EAAK8L,kBAAkBG,EAAvB,IACV,IAAThL,KAAmBjB,EAAKgM,eAAeC,EAApB,IAChB;UACR;UAEuB,OAAjBC,kBAAkBlK,IAAS6B,IAAV;AACtB,gBAAI7D,EAAKa,gBAAgBgD,EAArB,GAAyB;AAAA,oBACrBoI,KAAQjK,GAAE5B,MACV+L,IAAa,IAAJtI;AACf,kBAAIoI,OAAUE,EAAO,QAAOnM,EAAK4L,cAAcK,EAAnB;AAC5B,kBAAiB,MAAbjK,GAAE7B,QAAc;AAClB,oBAAIgM,EAAO,OAAM,IAAI3B,MAAM,oBAAV;AACjB,uBAAa,MAAN3G,KAAU,IAAI;cACtB;AAED,kBAAe,IAAX7B,GAAE7B,OAAY,QAAOH,EAAK8L,kBAAkBG,EAAvB;AATE,oBAUrBG,KAAO,EAASvI,EAAT,GACPwI,IAASrK,GAAEG,gBAAgB,CAAlB;AAXY,qBAYvBkK,IAASD,KAAapM,EAAK8L,kBAAkBG,EAAvB,IACtBI,IAASD,KAAapM,EAAKgM,eAAeC,EAApB,IACnB;YACR;AACD,mBAAOjM,EAAKsM,kBAAkBtK,IAAG6B,EAA1B;UACR;UAEuB,OAAjByI,kBAAkBtK,IAAS6B,IAAV;AACtB,gBAAIA,OAAMA,GAAG,QAAOA;AACpB,gBAAIA,OAAC,IAAA,EAAe,QAAO;AAC3B,gBAAIA,OAAM,UAAW,QAAO;AAAP,kBACfoI,KAAQjK,GAAE5B;AAEhB,gBAAI6L,OADe,IAAJpI,GACM,QAAO7D,EAAK4L,cAAcK,EAAnB;AAC5B,gBAAU,MAANpI,GACF,OAAM,IAAI2G,MAAM,iDAAV;AAER,gBAAiB,MAAbxI,GAAE7B,OAAc,QAAO;AAC3BH,cAAKqD,uBAAuB,CAA5B,IAAiCQ;AACjC,kBAAMyE,KAAsD,OAAvCtI,EAAKoD,qBAAqB,CAA1B,MAAiC;AACtD,gBAAoB,QAAhBkF,GACF,OAAM,IAAIkC,MAAM,uCAAV;AAER,kBAAM/H,IAAW6F,KAAc;AAC/B,gBAAe,IAAX7F,EAGF,QAAOzC,EAAK8L,kBAAkBG,EAAvB;AAET,kBAAMhK,KAAUD,GAAE7B;AAClB,gBAAIiC,IAAOJ,GAAEK,QAAQJ,KAAU,CAApB;AAAX,kBACMK,IAAkBtC,EAAKuC,QAAQH,CAAb,GAClBI,IAAuB,KAAVP,KAAeK,GAC5BiK,IAAa9J,IAAW;AAC9B,gBAAID,IAAa+J,EAAY,QAAOvM,EAAKgM,eAAeC,EAApB;AACpC,gBAAIzJ,IAAa+J,EAAY,QAAOvM,EAAK8L,kBAAkBG,EAAvB;AAAP,gBAIzBpJ,IAAe,UAAgC,UAA/B7C,EAAKoD,qBAAqB,CAA1B,GAChBL,IAAc/C,EAAKoD,qBAAqB,CAA1B;AAAA,kBACZoF,IAAsB,IACtBC,IAAY,KAAKnG;AACvB,gBAAImG,OAAyC,KAAxBjG,IAAa,KAAK,IACrC,OAAM,IAAIgI,MAAM,oBAAV;AAAN,gBAEEgC,GACA9D,IAAwB;AAE5B,gBAAI,KAAAD,GAAiC;AACnC,oBAAM7F,KAAQ4F,IAAsBC;AACpCC,kBAAwB9F,KAAQ,IAChC4J,IAAkB3J,MAAiBD,IACnCC,IAAgBA,KAAiB,KAAKD,KAAWG,MAAgBH,IACjEG,MAA8B,KAAKH;YACpC,WAAU,OAAA6F,EACTC,KAAwB,IACxB8D,IAAkB3J,GAClBA,IAAeE,GACfA,IAAc;iBACT;AACL,oBAAMH,KAAQ6F,IAAYD;AAC1BE,kBAAwB,KAAK9F,IAC7B4J,IACK3J,KAAgBD,KAAUG,MAAiB,KAAKH,IACrDC,IAAeE,KAAeH,IAC9BG,IAAc;YACf;AAGD,gBAFAX,OAAgB,GAChBoK,OAAsC,GAClCpK,IAAOoK,EAAiB,QAAOxM,EAAK8L,kBAAkBG,EAAvB;AACnC,gBAAI7J,IAAOoK,EAAiB,QAAOxM,EAAKgM,eAAeC,EAApB;AAEnC,qBAAStJ,KAAaV,KAAU,GAAiB,KAAdU,IAAiBA,MAAc;AACpC,kBAAxB+F,KACFA,KAAyB,IACzB8D,IAAkB3J,MAAiB,GACnCA,IAAgBA,KAAgB,KAAOE,MAAgB,GACvDA,MAA8B,MAE9ByJ,IAAkB;AAEpB,oBAAMhL,KAAQQ,GAAEG,gBAAgBQ,EAAlB;AACd,kBAAInB,KAAQgL,EAAiB,QAAOxM,EAAK8L,kBAAkBG,EAAvB;AACpC,kBAAIzK,KAAQgL,EAAiB,QAAOxM,EAAKgM,eAAeC,EAApB;YACrC;AAED,gBAAqB,MAAjBpJ,KAAsC,MAAhBE,GAAmB;AAC3C,kBAA8B,MAA1B2F,EAA6B,OAAM,IAAI8B,MAAM,oBAAV;AACvC,qBAAOxK,EAAKgM,eAAeC,EAApB;YACR;AACD,mBAAO;UACR;UAEqB,OAAfnE,gBAAgB9F,IAAS6B,IAAV;AAAA,mBAChB7D,EAAKa,gBAAgBgD,EAArB,IACQ,MAANA,KAA6B,MAAb7B,GAAE7B,SAED,MAAb6B,GAAE7B,UAAkB6B,GAAE5B,SAAc,IAAJyD,MAChC7B,GAAEG,gBAAgB,CAAlB,MAAyB,EAAS0B,EAAT,IAEK,MAAjC7D,EAAKsM,kBAAkBtK,IAAG6B,EAA1B;UACR;UAO8B,OAAxB4I,yBAAyBxL,IAAgByL,IAAjB;AAAA,mBAEtB,MADCA,KACkB,IAATzL,KACV,MAFCyL,KAEmB,KAAVzL,KACV,MAHCyL,KAGkB,IAATzL,KACV,MAJCyL,KAImB,KAAVzL,KAAAA;UAElB;UAEe,OAATwG,UAAUzF,IAAQ6B,IAAQ6I,IAAjB;AAGd,gBAFA1K,KAAIhC,EAAKqB,cAAcW,EAAnB,GACJ6B,KAAI7D,EAAKqB,cAAcwC,EAAnB,GACa,YAAb,OAAO7B,MAA+B,YAAb,OAAO6B,GAClC,SAAQ6I,IAAR;cACE,KAAK;AAAG,uBAAO1K,KAAI6B;cACnB,KAAK;AAAG,uBAAO7B,MAAK6B;cACpB,KAAK;AAAG,uBAAO7B,KAAI6B;cACnB,KAAK;AAAG,uBAAO7B,MAAK6B;YAJtB;AAOF,gBAAI7D,EAAKuH,WAAWvF,EAAhB,KAAmC,YAAb,OAAO6B,GAAjC,QACEA,KAAI7D,EAAKkB,aAAa2C,EAAlB,GACM,SAANA,MACG7D,EAAKyM,yBAAyBzM,EAAK8F,kBAAkB9D,IAAG6B,EAA1B,GAA8B6I,EAA5D;AAET,gBAAiB,YAAb,OAAO1K,MAAkBhC,EAAKuH,WAAW1D,EAAhB,EAA7B,QACE7B,KAAIhC,EAAKkB,aAAac,EAAlB,GACM,SAANA,MACGhC,EAAKyM,yBAAyBzM,EAAK8F,kBAAkB9D,IAAG6B,EAA1B,GAA8B6I,EAA5D;AAIT,gBAFA1K,KAAIhC,EAAKsH,YAAYtF,EAAjB,GACJ6B,KAAI7D,EAAKsH,YAAYzD,EAAjB,GACA7D,EAAKuH,WAAWvF,EAAhB,GAAoB;AACtB,kBAAIhC,EAAKuH,WAAW1D,EAAhB,EACF,QAAO7D,EAAKyM,yBAAyBzM,EAAK8F,kBAAkB9D,IAAG6B,EAA1B,GAA8B6I,EAA5D;AAET,kBAAiB,YAAb,OAAO7I,GAAgB,OAAM,IAAI2G,MAAM,oBAAV;AACjC,qBAAOxK,EAAKyM,yBAAyBzM,EAAKkM,kBAAkBlK,IAAG6B,EAA1B,GAA8B6I,EAA5D;YACR;AACD,gBAAiB,YAAb,OAAO1K,GAAgB,OAAM,IAAIwI,MAAM,oBAAV;AACjC,gBAAIxK,EAAKuH,WAAW1D,EAAhB,EAEF,QAAO7D,EAAKyM,yBAAyBzM,EAAKkM,kBAAkBrI,IAAG7B,EAA1B,GAC3B,IAAL0K,EADE;AAGT,gBAAiB,YAAb,OAAO7I,GAAgB,OAAM,IAAI2G,MAAM,oBAAV;AAAN,mBAEpB,MADCkC,KACS1K,KAAI6B,KACd,MAFC6I,KAES1K,MAAK6B,KACf,MAHC6I,KAGS1K,KAAI6B,KACd,MAJC6I,KAIS1K,MAAK6B,KAAAA;UAEvB;UAEDU,WAAQ;AACN,mBAAOvE,EAAKuC,QAAQ,KAAKF,QAAQ,KAAKlC,SAAS,CAA3B,CAAb;UACR;UAEmB,OAAbkF,cAAcrD,IAAS6B,IAASe,IAAnB;AAClB,gBAAI5C,GAAE7B,SAAS0D,GAAE1D,OAAQ,QAAOH,EAAKqF,cAAcxB,IAAG7B,IAAG4C,EAAzB;AAChC,gBAAiB,MAAb5C,GAAE7B,OAAc,QAAO6B;AAC3B,gBAAiB,MAAb6B,GAAE1D,OAAc,QAAO6B,GAAE5B,SAASwE,KAAa5C,KAAIhC,EAAKsD,WAAWtB,EAAhB;AACvD,gBAAIsC,IAAetC,GAAE7B;AAArB,aACqB,MAAjB6B,GAAEuC,SAAF,KAAuBV,GAAE1D,WAAW6B,GAAE7B,UAA2B,MAAjB0D,GAAEU,SAAF,MAClDD;AAEF,kBAAMrD,KAAS,IAAIjB,EAAKsE,GAAcM,EAAvB;AAAf,gBACI+H,IAAQ,GACRnI,IAAI;AACR,mBAAOA,IAAIX,GAAE1D,QAAQqE,KAAK;AACxB,oBAAMoI,KAAI5K,GAAEK,QAAQmC,CAAV,IAAeX,GAAExB,QAAQmC,CAAV,IAAemI;AACxCA,kBAAQC,OAAM,IACd3L,GAAOkD,WAAWK,GAAO,aAAJoI,EAArB;YACD;AACD,mBAAOpI,IAAIxC,GAAE7B,QAAQqE,KAAK;AACxB,oBAAMoI,KAAI5K,GAAEK,QAAQmC,CAAV,IAAemI;AACzBA,kBAAQC,OAAM,IACd3L,GAAOkD,WAAWK,GAAO,aAAJoI,EAArB;YACD;AAID,mBAHIpI,IAAIvD,GAAOd,UACbc,GAAOkD,WAAWK,GAAGmI,CAArB,GAEK1L,GAAOyC,OAAP;UACR;UAEmB,OAAb4B,cAActD,IAAS6B,IAASe,IAAnB;AAClB,gBAAiB,MAAb5C,GAAE7B,OAAc,QAAO6B;AAC3B,gBAAiB,MAAb6B,GAAE1D,OAAc,QAAO6B,GAAE5B,SAASwE,KAAa5C,KAAIhC,EAAKsD,WAAWtB,EAAhB;AACvD,kBAAMf,IAAS,IAAIjB,EAAKgC,GAAE7B,QAAQyE,EAAnB;AAAf,gBACIiI,KAAS,GACTrI,IAAI;AACR,mBAAOA,IAAIX,GAAE1D,QAAQqE,KAAK;AACxB,oBAAMoI,KAAI5K,GAAEK,QAAQmC,CAAV,IAAeX,GAAExB,QAAQmC,CAAV,IAAeqI;AACxCA,cAAAA,KAAsB,IAAZD,OAAM,IAChB3L,EAAOkD,WAAWK,GAAO,aAAJoI,EAArB;YACD;AACD,mBAAOpI,IAAIxC,GAAE7B,QAAQqE,KAAK;AACxB,oBAAMoI,KAAI5K,GAAEK,QAAQmC,CAAV,IAAeqI;AACzBA,cAAAA,KAAsB,IAAZD,OAAM,IAChB3L,EAAOkD,WAAWK,GAAO,aAAJoI,EAArB;YACD;AACD,mBAAO3L,EAAOyC,OAAP;UACR;UAEsB,OAAhBC,iBAAiB3B,IAAS5B,IAAea,KAAoB,MAA7C;AACrB,kBAAM6L,KAAc9K,GAAE7B;AACP,qBAAXc,KACFA,KAAS,IAAIjB,EAAK8M,IAAa1M,EAAtB,IAETa,GAAOb,OAAOA;AAEhB,gBAAIuM,IAAQ;AACZ,qBAASnI,KAAI,GAAGA,KAAIsI,IAAatI,MAAK;AACpC,oBAAMoI,KAAI5K,GAAEK,QAAQmC,EAAV,IAAemI;AACzBA,kBAAQC,OAAM,IACd3L,GAAOkD,WAAWK,IAAO,aAAJoI,EAArB;YACD;AAID,mBAHc,KAAVD,KACF1L,GAAO8L,eAAeD,IAAa,CAAnC,GAEK7L;UACR;UAEsB,OAAhBwC,iBAAiBzB,IAASsC,IAAV;AACrB,kBAAMnE,KAAS6B,GAAE7B;AACjBmE,YAAAA,KAAeA,MAAgBnE;AAC/B,kBAAMc,IAAS,IAAIjB,EAAKsE,IAAT,KAAA;AACf,gBAAIuI,KAAS;AACb,qBAASrI,KAAI,GAAGA,KAAIrE,IAAQqE,MAAK;AAC/B,oBAAMoI,KAAI5K,GAAEK,QAAQmC,EAAV,IAAeqI;AACzBA,cAAAA,KAAsB,IAAZD,OAAM,IAChB3L,EAAOkD,WAAWK,IAAO,aAAJoI,EAArB;YACD;AACD,gBAAe,KAAXC,GAAc,OAAM,IAAIrC,MAAM,oBAAV;AACxB,qBAAShG,KAAIrE,IAAQqE,KAAIF,IAAcE,KACrCvD,GAAOkD,WAAWK,IAAG,CAArB;AAEF,mBAAOvD;UACR;UAEmB,OAAboF,cAAcrE,IAAS6B,IAAS5C,KAAoB,MAAvC;AAAA,gBACdgB,IAAUD,GAAE7B,QACZ6M,KAAUnJ,GAAE1D,QACZ8M,IAAWD;AACf,gBAAI/K,IAAU+K,IAAS;AACrBC,kBAAWhL;AADU,oBAEfiL,KAAMlL,IACNmL,KAAYlL;AAClBD,cAAAA,KAAI6B,IACJ5B,IAAU+K,IACVnJ,KAAIqJ,IACJF,KAAUG;YACX;AACD,gBAAI7I,IAAe2I;AACJ,qBAAXhM,KACFA,KAAS,IAAIjB,EAAKsE,GAAT,KAAA,IAETA,IAAerD,GAAOd;AAExB,gBAAIqE,IAAI;AACR,mBAAOA,IAAIyI,GAAUzI,IACnBvD,CAAAA,GAAOkD,WAAWK,GAAGxC,GAAEK,QAAQmC,CAAV,IAAeX,GAAExB,QAAQmC,CAAV,CAApC;AAEF,mBAAOA,IAAIF,GAAcE,IACvBvD,CAAAA,GAAOkD,WAAWK,GAAG,CAArB;AAEF,mBAAOvD;UACR;UAEsB,OAAhBuF,iBAAiBxE,IAAS6B,IAAS5C,KAAoB,MAAvC;AAAA,kBACfgB,IAAUD,GAAE7B,QACZ6M,KAAUnJ,GAAE1D;AAClB,gBAAI8M,IAAWD;AACX/K,gBAAU+K,OACZC,IAAWhL;AAEb,gBAAIqC,IAAerC;AACJ,qBAAXhB,KACFA,KAAS,IAAIjB,EAAKsE,GAAT,KAAA,IAETA,IAAerD,GAAOd;AAExB,gBAAIqE,IAAI;AACR,mBAAOA,IAAIyI,GAAUzI,IACnBvD,CAAAA,GAAOkD,WAAWK,GAAGxC,GAAEK,QAAQmC,CAAV,IAAe,CAACX,GAAExB,QAAQmC,CAAV,CAArC;AAEF,mBAAOA,IAAIvC,GAASuC,IAClBvD,CAAAA,GAAOkD,WAAWK,GAAGxC,GAAEK,QAAQmC,CAAV,CAArB;AAEF,mBAAOA,IAAIF,GAAcE,IACvBvD,CAAAA,GAAOkD,WAAWK,GAAG,CAArB;AAEF,mBAAOvD;UACR;UAEkB,OAAZsF,aAAavE,IAAS6B,IAAS5C,KAAoB,MAAvC;AAAA,gBACbgB,IAAUD,GAAE7B,QACZ6M,KAAUnJ,GAAE1D,QACZ8M,IAAWD;AACf,gBAAI/K,IAAU+K,IAAS;AACrBC,kBAAWhL;AADU,oBAEfiL,KAAMlL,IACNmL,KAAYlL;AAClBD,cAAAA,KAAI6B,IACJ5B,IAAU+K,IACVnJ,KAAIqJ,IACJF,KAAUG;YACX;AACD,gBAAI7I,IAAerC;AACJ,qBAAXhB,KACFA,KAAS,IAAIjB,EAAKsE,GAAT,KAAA,IAETA,IAAerD,GAAOd;AAExB,gBAAIqE,IAAI;AACR,mBAAOA,IAAIyI,GAAUzI,IACnBvD,CAAAA,GAAOkD,WAAWK,GAAGxC,GAAEK,QAAQmC,CAAV,IAAeX,GAAExB,QAAQmC,CAAV,CAApC;AAEF,mBAAOA,IAAIvC,GAASuC,IAClBvD,CAAAA,GAAOkD,WAAWK,GAAGxC,GAAEK,QAAQmC,CAAV,CAArB;AAEF,mBAAOA,IAAIF,GAAcE,IACvBvD,CAAAA,GAAOkD,WAAWK,GAAG,CAArB;AAEF,mBAAOvD;UACR;UAEmB,OAAbyF,cAAc1E,IAAS6B,IAAS5C,KAAoB,MAAvC;AAAA,gBACdgB,IAAUD,GAAE7B,QACZ6M,KAAUnJ,GAAE1D,QACZ8M,IAAWD;AACf,gBAAI/K,IAAU+K,IAAS;AACrBC,kBAAWhL;AADU,oBAEfiL,KAAMlL,IACNmL,KAAYlL;AAClBD,cAAAA,KAAI6B,IACJ5B,IAAU+K,IACVnJ,KAAIqJ,IACJF,KAAUG;YACX;AACD,gBAAI7I,IAAerC;AACJ,qBAAXhB,KACFA,KAAS,IAAIjB,EAAKsE,GAAT,KAAA,IAETA,IAAerD,GAAOd;AAExB,gBAAIqE,IAAI;AACR,mBAAOA,IAAIyI,GAAUzI,IACnBvD,CAAAA,GAAOkD,WAAWK,GAAGxC,GAAEK,QAAQmC,CAAV,IAAeX,GAAExB,QAAQmC,CAAV,CAApC;AAEF,mBAAOA,IAAIvC,GAASuC,IAClBvD,CAAAA,GAAOkD,WAAWK,GAAGxC,GAAEK,QAAQmC,CAAV,CAArB;AAEF,mBAAOA,IAAIF,GAAcE,IACvBvD,CAAAA,GAAOkD,WAAWK,GAAG,CAArB;AAEF,mBAAOvD;UACR;UAEuB,OAAjB0D,kBAAkB3C,IAAS6B,IAAV;AACtB,kBAAMuJ,KAAOpL,GAAE7B,SAAS0D,GAAE1D;AAC1B,gBAAa,KAATiN,GAAY,QAAOA;AACvB,gBAAI5I,IAAIxC,GAAE7B,SAAS;AAAnB,mBACY,KAALqE,KAAUxC,GAAEK,QAAQmC,CAAV,MAAiBX,GAAExB,QAAQmC,CAAV,IAAcA;AAAC,mBACzC,IAAJA,IAAc,IACXxC,GAAEG,gBAAgBqC,CAAlB,IAAuBX,GAAE1B,gBAAgBqC,CAAlB,IAAuB,IAAI;UAC1D;UAE0B,OAApBC,qBAAqB4I,IAAoBnD,IAC5CoD,IAAmBC,GADI;AAEzB,gBAAmB,MAAfrD,GAAkB;AAAA,kBAChBsD,KAAqB,QAAbtD,IACRuD,IAASvD,OAAe;AAAA,gBAC1ByC,IAAQ,GACRe,IAAO;AACX,qBACMC,GADGnJ,IAAI,GAAGA,IAAI6I,GAAalN,QAAQqE,KAAK+I,KAAoB;AAC5DI,kBAAML,GAAYjL,QAAQkL,CAApB;AADsD,oBAE1DK,KAAKP,GAAahL,QAAQmC,CAArB,GACLqJ,KAAa,QAALD,IACRE,IAASF,OAAO,IAChBG,IAAO/N,EAAKgO,OAAOH,IAAOL,EAAnB,GACPS,IAAQjO,EAAKgO,OAAOH,IAAOJ,CAAnB,GACRS,IAAQlO,EAAKgO,OAAOF,GAAQN,EAApB,GACRW,IAAQnO,EAAKgO,OAAOF,GAAQL,CAApB;AACdE,mBAAOD,IAAOK,IAAOpB,GACrBA,IAAQgB,MAAQ,IAChBA,KAAO,YACPA,OAAiB,QAARM,MAAmB,QAAgB,QAARC,MAAmB,KACvDvB,KAASgB,MAAQ,IACjBD,IAAOS,KAASF,MAAU,OAAOC,MAAU,KAC3CZ,GAAYnJ,WAAWoJ,GAAwB,aAANI,CAAzC;YACD;AACD,mBAAiB,KAAVhB,KAAwB,MAATe,GAAYH,KAAoB;AACpD,kBAAII,KAAML,GAAYjL,QAAQkL,CAApB;AACVI,cAAAA,MAAOhB,IAAQe,GACfA,IAAO,GACPf,IAAQgB,OAAQ,IAChBL,GAAYnJ,WAAWoJ,GAAwB,aAANI,EAAzC;YACD;UACF;UAE2B,OAArBS,sBAAsBC,IAAcC,IAAgBC,IACvD1H,IAAW5F,GADa;AAAA,gBAEtB0L,IAAQ4B,IACRb,IAAO;AACX,qBAASlJ,IAAI,GAAGA,IAAIqC,IAAGrC,KAAK;AAAA,oBACpBhD,KAAQ6M,GAAOhM,QAAQmC,CAAf,GACRgK,KAAKxO,EAAKgO,OAAe,QAARxM,IAAgB8M,EAA5B,GACLG,KAAKzO,EAAKgO,OAAOxM,OAAU,IAAI8M,EAA1B,GACL1B,IAAI4B,OAAY,QAALC,OAAgB,MAAMf,IAAOf;AAC9CA,kBAAQC,MAAM,IACdc,IAAOe,OAAO,IACdxN,EAAOkD,WAAWK,GAAO,aAAJoI,CAArB;YACD;AACD,gBAAI3L,EAAOd,SAAS0G,GAApB,MACE5F,EAAOkD,WAAW0C,MAAK8F,IAAQe,CAA/B,GACO7G,KAAI5F,EAAOd,SAChBc,GAAOkD,WAAW0C,MAAK,CAAvB;qBAGmB,MAAjB8F,IAAQe,EAAY,OAAM,IAAIlD,MAAM,oBAAV;UAEjC;UAEDH,qBAAqBH,IAAoBqE,IAAiBpO,IAAtC;AAEdA,YAAAA,KAAS,KAAKA,WAAQA,KAAS,KAAKA;AAAAA,kBAClCuO,KAAoB,QAAbxE,IACPyE,IAAQzE,OAAe;AAAA,gBACzByC,KAAQ,GACRe,IAAOa;AACX,qBAAS/J,IAAI,GAAGA,IAAIrE,IAAQqE,KAAK;AAAA,oBACzBuF,KAAI,KAAK1H,QAAQmC,CAAb,GACJoK,KAAW,QAAJ7E,IACP8E,KAAQ9E,OAAM,IACd+E,IAAO9O,EAAKgO,OAAOY,IAAMF,EAAlB,GACPK,IAAQ/O,EAAKgO,OAAOY,IAAMD,CAAlB,GACRK,IAAQhP,EAAKgO,OAAOa,IAAOH,EAAnB,GACRO,IAAQjP,EAAKgO,OAAOa,IAAOF,CAAnB;AACd,kBAAI1N,IAASyM,IAAOoB,IAAOnC;AAC3BA,cAAAA,KAAQ1L,MAAW,IACnBA,KAAU,YACVA,OAAoB,QAAR8N,MAAmB,QAAgB,QAARC,MAAmB,KAC1DrC,MAAS1L,MAAW,IACpByM,IAAOuB,KAASF,MAAU,OAAOC,MAAU,KAC3C,KAAK7K,WAAWK,GAAY,aAATvD,CAAnB;YACD;AACD,gBAAc,KAAV0L,MAAwB,MAATe,EACjB,OAAM,IAAIlD,MAAM,oBAAV;UAET;UAEwB,OAAlBzF,mBAAmB/C,IAAS6C,IAC/BC,KAAsB,MADD;AAEN,qBAAbA,OAAmBA,KAAW,IAAI9E,EAAKgC,GAAE7B,QAAX,KAAA;AAClC,gBAAI8E,IAAY;AAChB,qBACMsG,IADG/G,KAAe,IAAXxC,GAAE7B,SAAa,GAAQ,KAALqE,IAAQA,MAAK,GAAG;AACzC+G,cAAAA,MAAUtG,KAAa,KAAMjD,GAAEwJ,YAAYhH,EAAd,OAAsB;AACvD,oBAAM0K,KAAgC,IAAnB3D,KAAQ1G;AAC3BI,kBAAgC,IAAnBsG,KAAQ1G,IACrB0G,MAAUtG,KAAa,KAAMjD,GAAEwJ,YAAYhH,KAAI,CAAlB,OAA0B;AACvD,oBAAM2K,IAAgC,IAAnB5D,KAAQ1G;AAC3BI,kBAAgC,IAAnBsG,KAAQ1G,IACrBC,GAASX,WAAWK,OAAM,GAAI0K,MAAa,KAAMC,CAAjD;YACD;AACD,mBAAOrK;UACR;UAEwB,OAAlBK,mBAAmBnD,IAAS6C,IAAV;AACvB,gBAAII,KAAY;AAChB,qBAAST,IAAe,IAAXxC,GAAE7B,SAAa,GAAQ,KAALqE,GAAQA,KAAK;AAC1C,oBAAM+G,MAAUtG,MAAa,KAAMjD,GAAEwJ,YAAYhH,CAAd,OAAsB;AACzDS,cAAAA,KAAgC,IAAnBsG,KAAQ1G;YACtB;AACD,mBAAOI;UACR;UAQwB,OAAlBD,mBAAmBoK,IAAgBvK,IACtCwK,IAAuBC,IADF;AAAA,kBAGjBzI,KAAIhC,GAAQ0K,kBAAR,GACJC,IAAK3K,GAAQ1E,QACbgK,IAAIiF,GAASG,kBAAT,IAA+B1I;AACzC,gBAAI4I,IAAI;AACJJ,YAAAA,OACFI,IAAI,IAAIzP,EAAMmK,IAAI,MAAO,GAArB,KAAA,GACJsF,EAAExL,mBAAF;AAEF,kBAAMyL,IAAQ,IAAI1P,EAAM6G,KAAI,MAAO,GAArB,KAAA;AACd6I,cAAMzL,mBAAN;AAEA,kBAAMrB,IAAQ5C,EAAK2P,QAAQ9K,GAAQ2G,YAAY3E,KAAI,CAAxB,CAAb;AACF,gBAARjE,MACFiC,KAAU7E,EAAK4P,mBAAmB/K,IAASjC,GAAO,CAAxC;AAAA,kBAENiN,IAAI7P,EAAK4P,mBAAmBR,IAAUxM,GAAO,CAAzC,GAEJkN,IAAMjL,GAAQ2G,YAAY3E,KAAI,CAAxB;AACZ,gBAAIkJ,IAAkB;AACtB,qBAEMC,IAFGC,IAAI9F,GAAQ,KAAL8F,GAAQA,KAAK;AAEvBD,cAAAA,KAAO;AACX,oBAAME,KAAML,EAAErE,YAAYyE,IAAIpJ,EAAlB;AACZ,kBAAIqJ,OAAQJ,GAAK;AACf,sBAAMvE,MAAU2E,MAAO,KAAML,EAAErE,YAAYyE,IAAIpJ,KAAI,CAAtB,OAA8B;AAC3DmJ,gBAAAA,KAAuB,IAAfzE,KAAQuE;AAChB,oBAAIK,KAAuB,IAAf5E,KAAQuE;AAHL,sBAITM,KAAMvL,GAAQ2G,YAAY3E,KAAI,CAAxB,GACNwJ,KAAOR,EAAErE,YAAYyE,IAAIpJ,KAAI,CAAtB;AALE,uBAMP7G,EAAKgO,OAAOgC,IAAMI,EAAlB,MAA2B,KAAQD,MAAQ,KAAME,QAAU,MACjEL,MACAG,MAAQL,GARK,EASF,QAAPK,OATS;cAWhB;AAEDnQ,gBAAKoO,sBAAsBvJ,IAASmL,IAAM,GAAGR,GAAIE,CAAjD;AACA,kBAAI9G,KAAIiH,EAAES,aAAaZ,GAAOO,GAAGpJ,KAAI,CAA7B;AACE,oBAAN+B,OACFA,KAAIiH,EAAEU,aAAa1L,IAASoL,GAAGpJ,EAA3B,GACJgJ,EAAEpE,eAAewE,IAAIpJ,IAAgC,QAA5BgJ,EAAErE,YAAYyE,IAAIpJ,EAAlB,IAAuB+B,EAAhD,GACAoH,OAEEX,OACM,IAAJY,IACFF,IAAkBC,MAAQ,KAGzBP,EAAWtL,WAAW8L,MAAM,GAAGF,IAAkBC,EAAjD;YAGN;AACD,gBAAIV,GAAJ,QACEO,EAAEW,oBAAoB5N,CAAtB,GACIyM,KACK,EAACvK,UAAW2K,GAAYxK,WAAW4K,EAAnC,IAEFA;AAET,gBAAIR,GAAc,QAAQI;AAE1B,kBAAM,IAAIjF,MAAM,aAAV;UACP;UAEa,OAAPmF,QAAQzN,IAAD;AACZ,mBAAOlC,EAAKuC,QAAQL,EAAb,IAAsB;UAC9B;UAGDqO,aAAahC,IAAekC,IAAoBC,IAApC;AACV,gBAAI/D,IAAQ;AACZ,qBAASnI,KAAI,GAAGA,KAAIkM,IAAYlM,MAAK;AACnC,oBAAMmM,KAAM,KAAKnF,YAAYiF,KAAajM,EAA9B,IACF+J,GAAQ/C,YAAYhH,EAApB,IACAmI;AACVA,kBAAQgE,OAAQ,IAChB,KAAKlF,eAAegF,KAAajM,IAAS,QAANmM,EAApC;YACD;AACD,mBAAOhE;UACR;UAED2D,aAAaM,IAAkBH,IAAoBC,IAAvC;AAGV,gBAAI7D,IAAS;AACb,gBAAiB,IAAb4D,IAAgB;AAGlBA,cAAAA,OAAe;AAHG,kBAId1H,KAAU,KAAK1G,QAAQoO,EAAb,GACVI,KAAe,QAAV9H,IACLvE,IAAI;AACR,qBAAOA,IATUkM,KAAa,MAAO,GASflM,KAAK;AAAA,sBACnBsM,KAAMF,GAAWvO,QAAQmC,CAAnB,GACNuM,MAAOhI,OAAY,OAAa,QAAN+H,MAAgBjE;AAChDA,oBAAwB,IAAdkE,OAAQ,IAClB,KAAK5M,WAAWsM,KAAajM,IAAW,QAANuM,OAAiB,KAAY,QAALF,EAA1D,GACA9H,KAAU,KAAK1G,QAAQoO,KAAajM,IAAI,CAA9B,GACVqM,MAAgB,QAAV9H,OAAqB+H,OAAQ,MAAMjE,GACzCA,IAAuB,IAAbgE,OAAO;cAClB;AAfiB,oBAiBZC,KAAMF,GAAWvO,QAAQmC,CAAnB,GACNuM,KAAOhI,OAAY,OAAa,QAAN+H,MAAgBjE;AAChDA,kBAAwB,IAAdkE,MAAQ,IAClB,KAAK5M,WAAWsM,KAAajM,IAAW,QAANuM,MAAiB,KAAY,QAALF,EAA1D;AAEA,kBAAIJ,KAAajM,IAAI,KAAK,KAAKrE,OAC7B,OAAM,IAAIG,WAAW,eAAf;AAEiB,oBAAP,IAAboQ,QACH3H,KAAU,KAAK1G,QAAQoO,KAAajM,IAAI,CAA9B,GACVqM,MAAgB,QAAV9H,OANO+H,OAAQ,MAMcjE,GACnCA,IAAuB,IAAbgE,OAAO,IACjB,KAAK1M,WAAWsM,KAAaG,GAAWzQ,QACzB,aAAV4I,KAA8B,QAAL8H,EAD9B;YAGH,OAAM;AACLJ,cAAAA,OAAe;AACf,kBAAIjM,KAAI;AACR,qBAAOA,KAAIoM,GAAWzQ,SAAS,GAAGqE,MAAK;AAAA,sBAC/BuE,KAAU,KAAK1G,QAAQoO,KAAajM,EAA1B,GACVsM,KAAMF,GAAWvO,QAAQmC,EAAnB,GACNqM,MAAgB,QAAV9H,OAA2B,QAAN+H,MAAgBjE;AACjDA,oBAAuB,IAAbgE,OAAO;AACjB,sBAAME,MAAOhI,OAAY,OAAO+H,OAAQ,MAAMjE;AAC9CA,oBAAwB,IAAdkE,OAAQ,IAClB,KAAK5M,WAAWsM,KAAajM,KAAW,QAANuM,OAAiB,KAAY,QAALF,EAA1D;cACD;AAXI,oBAYC9H,KAAU,KAAK1G,QAAQoO,KAAajM,EAA1B,GACVsM,KAAMF,GAAWvO,QAAQmC,EAAnB,GACNqM,KAAgB,QAAV9H,OAA2B,QAAN+H,MAAgBjE;AACjDA,kBAAuB,IAAbgE,MAAO;AACjB,kBAAIE,IAAM;AACe,oBAAP,IAAbL,QACHK,KAAOhI,OAAY,OAAO+H,OAAQ,MAAMjE,GACxCA,IAAwB,IAAdkE,MAAQ,KAEpB,KAAK5M,WAAWsM,KAAajM,KAAW,QAANuM,MAAiB,KAAY,QAALF,CAA1D;YACD;AACD,mBAAOhE;UACR;UAED2D,oBAAoB5N,IAAD;AACjB,gBAAc,MAAVA,GAAa;AACjB,gBAAI+J,KAAQ,KAAKtK,QAAQ,CAAb,MAAoBO;AAChC,kBAAMqF,KAAO,KAAK9H,SAAS;AAC3B,qBAASqE,IAAI,GAAGA,IAAIyD,IAAMzD,KAAK;AAC7B,oBAAMuF,KAAI,KAAK1H,QAAQmC,IAAI,CAAjB;AACV,mBAAKL,WAAWK,GAA0B,aAArBuF,MAAM,KAAKnH,KAAwB+J,EAAxD,GACAA,KAAQ5C,OAAMnH;YACf;AACD,iBAAKuB,WAAW8D,IAAM0E,EAAtB;UACD;UAEwB,OAAlBiD,mBAAmB5N,IAASY,IAAeoO,IAAzB;AAAA,kBACjBnK,KAAI7E,GAAE7B,QAENc,IAAS,IAAIjB,EADE6G,KAAImK,IACV,KAAA;AACf,gBAAc,MAAVpO,IAAa;AACf,uBAAS4B,KAAI,GAAGA,KAAIqC,IAAGrC,KAAKvD,GAAOkD,WAAWK,IAAGxC,GAAEK,QAAQmC,EAAV,CAArB;AAE5B,qBADe,IAAXwM,MAAc/P,EAAOkD,WAAW0C,IAAG,CAArB,GACX5F;YACR;AACD,gBAAI0L,IAAQ;AACZ,qBAASnI,KAAI,GAAGA,KAAIqC,IAAGrC,MAAK;AAC1B,oBAAMuF,KAAI/H,GAAEK,QAAQmC,EAAV;AACVvD,gBAAOkD,WAAWK,IAAmB,aAAduF,MAAKnH,KAAuB+J,CAAnD,GACAA,IAAQ5C,OAAO,KAAKnH;YACrB;AAID,mBAHe,IAAXoO,MACF/P,EAAOkD,WAAW0C,IAAG8F,CAArB,GAEK1L;UACR;UAE2B,OAArByE,sBAAsB1D,IAAS6B,IAAV;AAC1B,kBAAMjB,KAAQ5C,EAAKiR,gBAAgBpN,EAArB;AACd,gBAAY,IAARjB,GAAW,OAAM,IAAItC,WAAW,gBAAf;AAAN,kBACT4Q,KAA4B,IAAdtO,KAAQ,IACtBuO,IAAYvO,KAAQ,IACpBzC,KAAS6B,GAAE7B,QACXiR,IAAqB,MAAdD,KACiD,KAAhDnP,GAAEK,QAAQlC,KAAS,CAAnB,MAA2B,KAAKgR,GACxC7M,IAAenE,KAAS+Q,MAAcE,IAAO,IAAI,IACjDnQ,IAAS,IAAIjB,EAAKsE,GAActC,GAAE5B,IAAzB;AACf,gBAAkB,MAAd+Q,GAAiB;AACnB,kBAAI3M,KAAI;AACR,qBAAOA,KAAI0M,IAAY1M,KAAKvD,GAAOkD,WAAWK,IAAG,CAArB;AAC5B,qBAAOA,KAAIF,GAAcE,KACvBvD,GAAOkD,WAAWK,IAAGxC,GAAEK,QAAQmC,KAAI0M,EAAd,CAArB;YAEH,OAAM;AACL,kBAAIvE,KAAQ;AACZ,uBAASnI,KAAI,GAAGA,KAAI0M,IAAY1M,KAAKvD,GAAOkD,WAAWK,IAAG,CAArB;AACrC,uBAASA,KAAI,GAAGA,KAAIrE,IAAQqE,MAAK;AAC/B,sBAAMuF,KAAI/H,GAAEK,QAAQmC,EAAV;AACVvD,kBAAOkD,WACHK,KAAI0M,IAAgC,aAAlBnH,MAAKoH,IAA2BxE,EADtD,GAEAA,KAAQ5C,OAAO,KAAKoH;cACrB;AACD,kBAAIC,EACFnQ,GAAOkD,WAAWhE,KAAS+Q,IAAYvE,EAAvC;uBAEc,MAAVA,GAAa,OAAM,IAAInC,MAAM,oBAAV;YAE1B;AACD,mBAAOvJ,EAAOyC,OAAP;UACR;UAE4B,OAAtB+B,uBAAuBzD,IAAS6B,IAAV;AAAA,kBACrB1D,KAAS6B,GAAE7B,QACXC,KAAO4B,GAAE5B,MACTwC,IAAQ5C,EAAKiR,gBAAgBpN,EAArB;AACd,gBAAY,IAARjB,EAAW,QAAO5C,EAAKqR,sBAAsBjR,EAA3B;AAAP,kBACT8Q,KAA4B,IAAdtO,IAAQ,IACtBuO,IAAYvO,IAAQ;AAC1B,gBAAI0B,IAAenE,KAAS+Q;AAC5B,gBAAoB,KAAhB5M,EAAmB,QAAOtE,EAAKqR,sBAAsBjR,EAA3B;AAK9B,gBAAIkR,IAAa;AACjB,gBAAIlR,IAAM;AAER,kBAAuC,MAAlC4B,GAAEK,QAAQ6O,EAAV,KADS,KAAKC,KAAa,GAE9BG,KAAa;kBAEb,UAAS9M,KAAI,GAAGA,KAAI0M,IAAY1M,KAC9B,KAAqB,MAAjBxC,GAAEK,QAAQmC,EAAV,GAAoB;AACtB8M,oBAAa;AACb;cACD;YAGN;AAED,gBAAIA,KAA+B,MAAdH,GAAiB;AAAA,oBAE9BjN,KAAMlC,GAAEK,QAAQlC,KAAS,CAAnB;AACyB,mBAAT,CAAC+D,MACJI;YAC1B;AACD,gBAAIrD,IAAS,IAAIjB,EAAKsE,GAAclE,EAAvB;AACb,gBAAkB,MAAd+Q,GAAiB;AAEnBlQ,gBAAOkD,WAAWG,IAAe,GAAG,CAApC;AACA,uBAASE,KAAI0M,IAAY1M,KAAIrE,IAAQqE,KACnCvD,GAAOkD,WAAWK,KAAI0M,IAAYlP,GAAEK,QAAQmC,EAAV,CAAlC;YAEH,OAAM;AACL,kBAAImI,KAAQ3K,GAAEK,QAAQ6O,EAAV,MAA0BC;AACtC,oBAAMlJ,KAAO9H,KAAS+Q,KAAa;AACnC,uBAAS1M,KAAI,GAAGA,KAAIyD,IAAMzD,MAAK;AAC7B,sBAAMuF,KAAI/H,GAAEK,QAAQmC,KAAI0M,KAAa,CAA3B;AACVjQ,kBAAOkD,WAAWK,IAA8B,aAAzBuF,MAAM,KAAKoH,IAA4BxE,EAA9D,GACAA,KAAQ5C,OAAMoH;cACf;AACDlQ,gBAAOkD,WAAW8D,IAAM0E,EAAxB;YACD;AAMD,mBALI2E,MAGFrQ,IAASjB,EAAK2D,iBAAiB1C,GAAtB,MAAoCA,CAApC,IAEJA,EAAOyC,OAAP;UACR;UAE2B,OAArB2N,sBAAsBjR,IAAD;AAAA,mBACtBA,KACKJ,EAAKc,WAAW,GAAhB,IAAA,IAEFd,EAAKY,OAAL;UACR;UAEqB,OAAfqQ,gBAAgBjP,IAAD;AACpB,gBAAe,IAAXA,GAAE7B,OAAY,QAAO;AACzB,kBAAM+B,KAAQF,GAAEG,gBAAgB,CAAlB;AAAd,mBACID,KAAQlC,EAAK+D,mBAAyB,KACnC7B;UACR;UAEmB,OAAbb,cAAckQ,IAAUC,KAAK,WAAhB;AAClB,gBAAmB,YAAf,OAAOD,GAAkB,QAAOA;AACpC,gBAAIA,GAAIrR,gBAAgBF,EAAM,QAAOuR;AACrC,gBAAsB,eAAlB,OAAOE,UACyB,YAA9B,OAAOA,OAAOC,aAA0B;AAC5C,oBAAMC,KAAeJ,GAAIE,OAAOC,WAAR;AACxB,kBAAIC,IAAc;AAChB,sBAAMvQ,KAAYuQ,GAAaH,EAAD;AAC9B,oBAAyB,YAArB,OAAOpQ,GAAwB,QAAOA;AAC1C,sBAAM,IAAIE,UAAU,0CAAd;cACP;YACF;AACD,kBAAMsQ,KAAUL,GAAIK;AACpB,gBAAIA,IAAS;AACX,oBAAMxQ,KAAYwQ,GAAQC,KAAKN,EAAb;AAClB,kBAAyB,YAArB,OAAOnQ,GAAwB,QAAOA;YAC3C;AACD,kBAAMM,KAAW6P,GAAI7P;AACrB,gBAAIA,IAAU;AACZ,oBAAMN,KAAYM,GAASmQ,KAAKN,EAAd;AAClB,kBAAyB,YAArB,OAAOnQ,GAAwB,QAAOA;YAC3C;AACD,kBAAM,IAAIE,UAAU,0CAAd;UACP;UAEiB,OAAXgG,YAAYpF,IAAD;AAAA,mBACZlC,EAAKuH,WAAWrF,EAAhB,IAA+BA,KAC5B,CAAEA;UACV;UAEgB,OAAVqF,WAAWrF,IAAD;AACf,mBAAwB,YAAjB,OAAOA,MAAgC,SAAVA,MAC7BA,GAAMhC,gBAAgBF;UAC9B;UAEuB,OAAjBiH,kBAAkBJ,IAAW7E,IAAZ;AAAA,kBAChBgC,KAAiC,KAAhB6C,KAAI,MAAM,IAC3B5F,KAAS,IAAIjB,EAAKgE,IAAchC,GAAE5B,IAAzB,GACT6H,IAAOjE,KAAe;AAC5B,qBAASQ,KAAI,GAAGA,KAAIyD,GAAMzD,KACxBvD,CAAAA,GAAOkD,WAAWK,IAAGxC,GAAEK,QAAQmC,EAAV,CAArB;AAEF,gBAAIN,KAAMlC,GAAEK,QAAQ4F,CAAV;AACV,gBAAiB,KAAZpB,KAAI,IAAW;AAClB,oBAAMiL,KAAO,KAAMjL,KAAI;AACvB3C,cAAAA,KAAOA,MAAO4N,OAAUA;YACzB;AAED,mBADA7Q,GAAOkD,WAAW8D,GAAM/D,EAAxB,GACOjD,GAAOyC,OAAP;UACR;UAEoC,OAA9BwD,+BAA+BL,IAAW7E,IAC7C4C,IADiC;AAAA,gBAAA,IAOrBlF,KAAKqS;AAAAA,kBALb/N,KAAiC,KAAhB6C,KAAI,MAAM,IAC3B5F,IAAS,IAAIjB,EAAKgE,IAAcY,EAAvB;AACf,gBAAIJ,IAAI;AACR,kBAAMyD,IAAOjE,KAAe;AAC5B,gBAAI6I,IAAS;AAEb,uBADMmF,KAAQ,EAAS/J,GAAMjG,GAAE7B,MAAjB,GACPqE,IAAIwN,IAAOxN,KAAK;AACrB,oBAAMoI,KAAI,IAAI5K,GAAEK,QAAQmC,CAAV,IAAeqI;AAC7BA,kBAAsB,IAAZD,OAAM,IAChB3L,EAAOkD,WAAWK,GAAO,aAAJoI,EAArB;YACD;AACD,mBAAOpI,IAAIyD,GAAMzD,IACfvD,GAAOkD,WAAWK,GAA4B,IAAd,aAAV,CAACqI,CAAvB;AAEF,gBAAI3I,IAAM+D,IAAOjG,GAAE7B,SAAS6B,GAAEK,QAAQ4F,CAAV,IAAkB;AAC9C,kBAAMgK,IAAkBpL,KAAI;AAC5B,gBAAIqL;AACJ,gBAAwB,KAApBD,EACFC,KAAY,IAAIhO,IAAM2I,GACtBqF,KAAa;iBACR;AACL,oBAAMJ,KAAO,KAAKG;AAClB/N,kBAAOA,KAAO4N,OAAUA;AACxB,oBAAMK,KAAa,KAAM,KAAKL;AAC9BI,kBAAYC,KAAajO,IAAM2I,GAC/BqF,KAAcC,KAAa;YAC5B;AAED,mBADAlR,EAAOkD,WAAW8D,GAAMiK,CAAxB,GACOjR,EAAOyC,OAAP;UACR;UAGDrB,QAAQmC,IAAD;AACL,mBAAO,KAAKA,EAAL;UACR;UACDrC,gBAAgBqC,IAAD;AACb,mBAAO,KAAKA,EAAL,MAAY;UACpB;UACDL,WAAWK,IAAWhD,IAAZ;AACR,iBAAKgD,EAAL,IAAkB,IAARhD;UACX;UACDuL,eAAevI,IAAWhD,IAAZ;AACZ,iBAAKgD,EAAL,IAAkB,IAARhD;UACX;UACD+N,oBAAiB;AACf,kBAAM6C,KAAM,KAAKjS;AAAjB,mBACqC,SAAjC,KAAKgC,gBAAgBiQ,KAAM,CAA3B,IAAsD,IAANA,KAAU,IACnD,IAAJA;UACR;UACD5G,YAAYhH,IAAD;AACT,mBAA4C,QAApC,KAAKA,OAAM,CAAX,MAA6B,MAAL,IAAJA;UAC7B;UACDiH,eAAejH,IAAWtC,IAAZ;AAAA,kBACNS,KAAa6B,OAAM,GACnB6N,KAAW,KAAKhQ,QAAQM,EAAb,GACX2P,IAAe,IAAJ9N,KAAqB,QAAX6N,KAAsBnQ,MAAS,KACpB,aAAXmQ,KAAkC,QAARnQ;AACrD,iBAAKiC,WAAWxB,IAAY2P,CAA5B;UACD;UAEgB,OAAVC,WAAWC,IAAc/P,IAAf;AACf,gBAAIxB,KAAS;AAAb,mBACkB,IAAXwB,KACU,KAAXA,OAAcxB,MAAUuR,KAC5B/P,QAAc,GACd+P,MAAQA;AAEV,mBAAOvR;UACR;UAsCqB,OAAfJ,gBAAgBmB,IAAD;AACpB,oBAAY,aAAJA,QAAoBA;UAC7B;QAAA;AAAA,eAtCMhC,EAAAA,eAAA,UACAA,EAAAA,mBAAmBA,EAAKK,gBAAgB,GAQxCL,EAAAA,oBAAoB,CACzB,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACnC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACnC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACnC,KAAK,KAAK,KAAK,GALU,GAQpBA,EAAAA,2BAA2B,GAC3BA,EAAAA,gCAAgC,KAAKA,EAAKuJ,0BAC1CvJ,EAAAA,qBAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,GAAA,GACAA,EAAAA,yBAAyB,IAAIyS,YAAY,CAAhB,GACzBzS,EAAAA,yBAAyB,IAAI0S,aAAa1S,EAAK2S,sBAAtB,GACzB3S,EAAAA,uBAAuB,IAAI4S,WAAW5S,EAAK2S,sBAApB,GAKvB3S,EAAAA,UAAU,IAAa,SAASgC,IAAT;AAC5B,iBAAO,EAAWA,EAAX,IAAgB;QACxB,IAAG,SAASA,IAAT;AAAA,cAAAvB,KAE+Bf,KAAKmT,KAAAA,KAAzBnT,KAAKoT;AAAAA,iBADR,MAAN9Q,KAAgB,KAC6B,IAA1C,MAAqC,IAA/B+Q,GAAS/Q,OAAM,CAAf,IAAAvB;QACd,GACMT,EAAAA,SAAS,KAAa,SAASgT,IAAWC,IAApB;AAC3B,iBAAiB,IAATD,KAAIC;QACb,GAAA;MAAA,CAAA;;;;;AC93DH;AAAA;AAAA;AACC,OAAC,SAAU,aAAa;AACvB;AAiBA,YAAI,aAAa,KAIfC,WAAU;AAAA;AAAA;AAAA;AAAA;AAAA,UAOR,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAkBX,UAAU;AAAA;AAAA;AAAA;AAAA,UAIV,UAAU;AAAA;AAAA;AAAA;AAAA,UAIV,UAAW;AAAA;AAAA;AAAA;AAAA,UAIX,MAAM;AAAA,QACR,GAMA,WAAW,MAEX,eAAe,mBACf,kBAAkB,eAAe,sBACjC,qBAAqB,eAAe,2BAEpC,YAAY,KAAK,OACjB,UAAU,KAAK,KAEf,YAAY,sCAEZ,KACA,OAAO,KACP,WAAW,GACXC,oBAAmB,kBACnB,QAAQ,UAAUA,oBAAmB,QAAQ,GAG7C,IAAI,CAAC;AAiDP,UAAE,gBAAgB,EAAE,MAAM,WAAY;AACpC,cAAI,IAAI,IAAI,KAAK,YAAY,IAAI;AACjC,cAAI,EAAE,EAAG,GAAE,IAAI;AACf,iBAAO;AAAA,QACT;AAUA,UAAE,aAAa,EAAE,MAAM,SAAU,GAAG;AAClC,cAAI,GAAG,GAAG,KAAK,KACb,IAAI;AAEN,cAAI,IAAI,EAAE,YAAY,CAAC;AAGvB,cAAI,EAAE,MAAM,EAAE,EAAG,QAAO,EAAE,KAAK,CAAC,EAAE;AAGlC,cAAI,EAAE,MAAM,EAAE,EAAG,QAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,IAAI,IAAI;AAElD,gBAAM,EAAE,EAAE;AACV,gBAAM,EAAE,EAAE;AAGV,eAAK,IAAI,GAAG,IAAI,MAAM,MAAM,MAAM,KAAK,IAAI,GAAG,EAAE,GAAG;AACjD,gBAAI,EAAE,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,EAAG,QAAO,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,IAAI,IAAI,IAAI;AAAA,UAChE;AAGA,iBAAO,QAAQ,MAAM,IAAI,MAAM,MAAM,EAAE,IAAI,IAAI,IAAI;AAAA,QACrD;AAOA,UAAE,gBAAgB,EAAE,KAAK,WAAY;AACnC,cAAI,IAAI,MACN,IAAI,EAAE,EAAE,SAAS,GACjB,MAAM,IAAI,EAAE,KAAK;AAGnB,cAAI,EAAE,EAAE,CAAC;AACT,cAAI,EAAG,QAAO,IAAI,MAAM,GAAG,KAAK,GAAI;AAEpC,iBAAO,KAAK,IAAI,IAAI;AAAA,QACtB;AAQA,UAAE,YAAY,EAAE,MAAM,SAAU,GAAG;AACjC,iBAAO,OAAO,MAAM,IAAI,KAAK,YAAY,CAAC,CAAC;AAAA,QAC7C;AAQA,UAAE,qBAAqB,EAAE,OAAO,SAAU,GAAG;AAC3C,cAAI,IAAI,MACN,OAAO,EAAE;AACX,iBAAO,MAAM,OAAO,GAAG,IAAI,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,KAAK,SAAS;AAAA,QAC3D;AAOA,UAAE,SAAS,EAAE,KAAK,SAAU,GAAG;AAC7B,iBAAO,CAAC,KAAK,IAAI,CAAC;AAAA,QACpB;AAOA,UAAE,WAAW,WAAY;AACvB,iBAAO,kBAAkB,IAAI;AAAA,QAC/B;AAQA,UAAE,cAAc,EAAE,KAAK,SAAU,GAAG;AAClC,iBAAO,KAAK,IAAI,CAAC,IAAI;AAAA,QACvB;AAQA,UAAE,uBAAuB,EAAE,MAAM,SAAU,GAAG;AAC5C,iBAAO,KAAK,IAAI,CAAC,KAAK;AAAA,QACxB;AAOA,UAAE,YAAY,EAAE,QAAQ,WAAY;AAClC,iBAAO,KAAK,IAAI,KAAK,EAAE,SAAS;AAAA,QAClC;AAOA,UAAE,aAAa,EAAE,QAAQ,WAAY;AACnC,iBAAO,KAAK,IAAI;AAAA,QAClB;AAOA,UAAE,aAAa,EAAE,QAAQ,WAAY;AACnC,iBAAO,KAAK,IAAI;AAAA,QAClB;AAOA,UAAE,SAAS,WAAY;AACrB,iBAAO,KAAK,MAAM;AAAA,QACpB;AAOA,UAAE,WAAW,EAAE,KAAK,SAAU,GAAG;AAC/B,iBAAO,KAAK,IAAI,CAAC,IAAI;AAAA,QACvB;AAOA,UAAE,oBAAoB,EAAE,MAAM,SAAU,GAAG;AACzC,iBAAO,KAAK,IAAI,CAAC,IAAI;AAAA,QACvB;AAgBA,UAAE,YAAY,EAAE,MAAM,SAAU,MAAM;AACpC,cAAI,GACF,IAAI,MACJ,OAAO,EAAE,aACT,KAAK,KAAK,WACV,MAAM,KAAK;AAGb,cAAI,SAAS,QAAQ;AACnB,mBAAO,IAAI,KAAK,EAAE;AAAA,UACpB,OAAO;AACL,mBAAO,IAAI,KAAK,IAAI;AAKpB,gBAAI,KAAK,IAAI,KAAK,KAAK,GAAG,GAAG,EAAG,OAAM,MAAM,eAAe,KAAK;AAAA,UAClE;AAIA,cAAI,EAAE,IAAI,EAAG,OAAM,MAAM,gBAAgB,EAAE,IAAI,QAAQ,YAAY;AAGnE,cAAI,EAAE,GAAG,GAAG,EAAG,QAAO,IAAI,KAAK,CAAC;AAEhC,qBAAW;AACX,cAAI,OAAO,GAAG,GAAG,GAAG,GAAG,GAAG,MAAM,GAAG,GAAG,GAAG;AACzC,qBAAW;AAEX,iBAAO,MAAM,GAAG,EAAE;AAAA,QACpB;AAQA,UAAE,QAAQ,EAAE,MAAM,SAAU,GAAG;AAC7B,cAAI,IAAI;AACR,cAAI,IAAI,EAAE,YAAY,CAAC;AACvB,iBAAO,EAAE,KAAK,EAAE,IAAI,SAAS,GAAG,CAAC,IAAI,IAAI,IAAI,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE;AAAA,QAC7D;AAQA,UAAE,SAAS,EAAE,MAAM,SAAU,GAAG;AAC9B,cAAI,GACF,IAAI,MACJ,OAAO,EAAE,aACT,KAAK,KAAK;AAEZ,cAAI,IAAI,KAAK,CAAC;AAGd,cAAI,CAAC,EAAE,EAAG,OAAM,MAAM,eAAe,KAAK;AAG1C,cAAI,CAAC,EAAE,EAAG,QAAO,MAAM,IAAI,KAAK,CAAC,GAAG,EAAE;AAGtC,qBAAW;AACX,cAAI,OAAO,GAAG,GAAG,GAAG,CAAC,EAAE,MAAM,CAAC;AAC9B,qBAAW;AAEX,iBAAO,EAAE,MAAM,CAAC;AAAA,QAClB;AASA,UAAE,qBAAqB,EAAE,MAAM,WAAY;AACzC,iBAAO,IAAI,IAAI;AAAA,QACjB;AAQA,UAAE,mBAAmB,EAAE,KAAK,WAAY;AACtC,iBAAO,GAAG,IAAI;AAAA,QAChB;AAQA,UAAE,UAAU,EAAE,MAAM,WAAY;AAC9B,cAAI,IAAI,IAAI,KAAK,YAAY,IAAI;AACjC,YAAE,IAAI,CAAC,EAAE,KAAK;AACd,iBAAO;AAAA,QACT;AAQA,UAAE,OAAO,EAAE,MAAM,SAAU,GAAG;AAC5B,cAAI,IAAI;AACR,cAAI,IAAI,EAAE,YAAY,CAAC;AACvB,iBAAO,EAAE,KAAK,EAAE,IAAI,IAAI,GAAG,CAAC,IAAI,SAAS,IAAI,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE;AAAA,QAC7D;AASA,UAAE,YAAY,EAAE,KAAK,SAAU,GAAG;AAChC,cAAI,GAAG,IAAI,GACT,IAAI;AAEN,cAAI,MAAM,UAAU,MAAM,CAAC,CAAC,KAAK,MAAM,KAAK,MAAM,EAAG,OAAM,MAAM,kBAAkB,CAAC;AAEpF,cAAI,kBAAkB,CAAC,IAAI;AAC3B,cAAI,EAAE,EAAE,SAAS;AACjB,eAAK,IAAI,WAAW;AACpB,cAAI,EAAE,EAAE,CAAC;AAGT,cAAI,GAAG;AAGL,mBAAO,IAAI,MAAM,GAAG,KAAK,GAAI;AAG7B,iBAAK,IAAI,EAAE,EAAE,CAAC,GAAG,KAAK,IAAI,KAAK,GAAI;AAAA,UACrC;AAEA,iBAAO,KAAK,IAAI,KAAK,IAAI;AAAA,QAC3B;AAQA,UAAE,aAAa,EAAE,OAAO,WAAY;AAClC,cAAI,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,KACrB,IAAI,MACJ,OAAO,EAAE;AAGX,cAAI,EAAE,IAAI,GAAG;AACX,gBAAI,CAAC,EAAE,EAAG,QAAO,IAAI,KAAK,CAAC;AAG3B,kBAAM,MAAM,eAAe,KAAK;AAAA,UAClC;AAEA,cAAI,kBAAkB,CAAC;AACvB,qBAAW;AAGX,cAAI,KAAK,KAAK,CAAC,CAAC;AAIhB,cAAI,KAAK,KAAK,KAAK,IAAI,GAAG;AACxB,gBAAI,eAAe,EAAE,CAAC;AACtB,iBAAK,EAAE,SAAS,KAAK,KAAK,EAAG,MAAK;AAClC,gBAAI,KAAK,KAAK,CAAC;AACf,gBAAI,WAAW,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,IAAI;AAE3C,gBAAI,KAAK,IAAI,GAAG;AACd,kBAAI,OAAO;AAAA,YACb,OAAO;AACL,kBAAI,EAAE,cAAc;AACpB,kBAAI,EAAE,MAAM,GAAG,EAAE,QAAQ,GAAG,IAAI,CAAC,IAAI;AAAA,YACvC;AAEA,gBAAI,IAAI,KAAK,CAAC;AAAA,UAChB,OAAO;AACL,gBAAI,IAAI,KAAK,EAAE,SAAS,CAAC;AAAA,UAC3B;AAEA,eAAK,KAAK;AACV,cAAI,MAAM,KAAK;AAGf,qBAAS;AACP,gBAAI;AACJ,gBAAI,EAAE,KAAK,OAAO,GAAG,GAAG,MAAM,CAAC,CAAC,EAAE,MAAM,GAAG;AAE3C,gBAAI,eAAe,EAAE,CAAC,EAAE,MAAM,GAAG,GAAG,OAAO,IAAI,eAAe,EAAE,CAAC,GAAG,MAAM,GAAG,GAAG,GAAG;AACjF,kBAAI,EAAE,MAAM,MAAM,GAAG,MAAM,CAAC;AAI5B,kBAAI,KAAK,OAAO,KAAK,QAAQ;AAI3B,sBAAM,GAAG,KAAK,GAAG,CAAC;AAElB,oBAAI,EAAE,MAAM,CAAC,EAAE,GAAG,CAAC,GAAG;AACpB,sBAAI;AACJ;AAAA,gBACF;AAAA,cACF,WAAW,KAAK,QAAQ;AACtB;AAAA,cACF;AAEA,qBAAO;AAAA,YACT;AAAA,UACF;AAEA,qBAAW;AAEX,iBAAO,MAAM,GAAG,EAAE;AAAA,QACpB;AAQA,UAAE,QAAQ,EAAE,MAAM,SAAU,GAAG;AAC7B,cAAI,OAAO,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,KAAK,KACjC,IAAI,MACJ,OAAO,EAAE,aACT,KAAK,EAAE,GACP,MAAM,IAAI,IAAI,KAAK,CAAC,GAAG;AAGzB,cAAI,CAAC,EAAE,KAAK,CAAC,EAAE,EAAG,QAAO,IAAI,KAAK,CAAC;AAEnC,YAAE,KAAK,EAAE;AACT,cAAI,EAAE,IAAI,EAAE;AACZ,gBAAM,GAAG;AACT,gBAAM,GAAG;AAGT,cAAI,MAAM,KAAK;AACb,gBAAI;AACJ,iBAAK;AACL,iBAAK;AACL,iBAAK;AACL,kBAAM;AACN,kBAAM;AAAA,UACR;AAGA,cAAI,CAAC;AACL,eAAK,MAAM;AACX,eAAK,IAAI,IAAI,MAAM,GAAE,KAAK,CAAC;AAG3B,eAAK,IAAI,KAAK,EAAE,KAAK,KAAI;AACvB,oBAAQ;AACR,iBAAK,IAAI,MAAM,GAAG,IAAI,KAAI;AACxB,kBAAI,EAAE,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI;AACnC,gBAAE,GAAG,IAAI,IAAI,OAAO;AACpB,sBAAQ,IAAI,OAAO;AAAA,YACrB;AAEA,cAAE,CAAC,KAAK,EAAE,CAAC,IAAI,SAAS,OAAO;AAAA,UACjC;AAGA,iBAAO,CAAC,EAAE,EAAE,EAAE,IAAI,GAAE,IAAI;AAExB,cAAI,MAAO,GAAE;AAAA,cACR,GAAE,MAAM;AAEb,YAAE,IAAI;AACN,YAAE,IAAI;AAEN,iBAAO,WAAW,MAAM,GAAG,KAAK,SAAS,IAAI;AAAA,QAC/C;AAaA,UAAE,kBAAkB,EAAE,OAAO,SAAU,IAAI,IAAI;AAC7C,cAAI,IAAI,MACN,OAAO,EAAE;AAEX,cAAI,IAAI,KAAK,CAAC;AACd,cAAI,OAAO,OAAQ,QAAO;AAE1B,qBAAW,IAAI,GAAG,UAAU;AAE5B,cAAI,OAAO,OAAQ,MAAK,KAAK;AAAA,cACxB,YAAW,IAAI,GAAG,CAAC;AAExB,iBAAO,MAAM,GAAG,KAAK,kBAAkB,CAAC,IAAI,GAAG,EAAE;AAAA,QACnD;AAWA,UAAE,gBAAgB,SAAU,IAAI,IAAI;AAClC,cAAI,KACF,IAAI,MACJ,OAAO,EAAE;AAEX,cAAI,OAAO,QAAQ;AACjB,kBAAMC,UAAS,GAAG,IAAI;AAAA,UACxB,OAAO;AACL,uBAAW,IAAI,GAAG,UAAU;AAE5B,gBAAI,OAAO,OAAQ,MAAK,KAAK;AAAA,gBACxB,YAAW,IAAI,GAAG,CAAC;AAExB,gBAAI,MAAM,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG,EAAE;AACjC,kBAAMA,UAAS,GAAG,MAAM,KAAK,CAAC;AAAA,UAChC;AAEA,iBAAO;AAAA,QACT;AAmBA,UAAE,UAAU,SAAU,IAAI,IAAI;AAC5B,cAAI,KAAK,GACP,IAAI,MACJ,OAAO,EAAE;AAEX,cAAI,OAAO,OAAQ,QAAOA,UAAS,CAAC;AAEpC,qBAAW,IAAI,GAAG,UAAU;AAE5B,cAAI,OAAO,OAAQ,MAAK,KAAK;AAAA,cACxB,YAAW,IAAI,GAAG,CAAC;AAExB,cAAI,MAAM,IAAI,KAAK,CAAC,GAAG,KAAK,kBAAkB,CAAC,IAAI,GAAG,EAAE;AACxD,gBAAMA,UAAS,EAAE,IAAI,GAAG,OAAO,KAAK,kBAAkB,CAAC,IAAI,CAAC;AAI5D,iBAAO,EAAE,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI,MAAM,MAAM;AAAA,QAChD;AAQA,UAAE,YAAY,EAAE,QAAQ,WAAY;AAClC,cAAI,IAAI,MACN,OAAO,EAAE;AACX,iBAAO,MAAM,IAAI,KAAK,CAAC,GAAG,kBAAkB,CAAC,IAAI,GAAG,KAAK,QAAQ;AAAA,QACnE;AAOA,UAAE,WAAW,WAAY;AACvB,iBAAO,CAAC;AAAA,QACV;AAgBA,UAAE,UAAU,EAAE,MAAM,SAAU,GAAG;AAC/B,cAAI,GAAG,GAAG,IAAI,GAAGC,OAAM,QACrB,IAAI,MACJ,OAAO,EAAE,aACTC,SAAQ,IACR,KAAK,EAAE,IAAI,IAAI,KAAK,CAAC;AAGvB,cAAI,CAAC,EAAE,EAAG,QAAO,IAAI,KAAK,GAAG;AAE7B,cAAI,IAAI,KAAK,CAAC;AAId,cAAI,CAAC,EAAE,GAAG;AACR,gBAAI,EAAE,IAAI,EAAG,OAAM,MAAM,eAAe,UAAU;AAClD,mBAAO;AAAA,UACT;AAGA,cAAI,EAAE,GAAG,GAAG,EAAG,QAAO;AAEtB,eAAK,KAAK;AAGV,cAAI,EAAE,GAAG,GAAG,EAAG,QAAO,MAAM,GAAG,EAAE;AAEjC,cAAI,EAAE;AACN,cAAI,EAAE,EAAE,SAAS;AACjB,mBAAS,KAAK;AACd,UAAAD,QAAO,EAAE;AAET,cAAI,CAAC,QAAQ;AAGX,gBAAIA,QAAO,EAAG,OAAM,MAAM,eAAe,KAAK;AAAA,UAGhD,YAAY,IAAI,KAAK,IAAI,CAAC,KAAK,OAAOF,mBAAkB;AACtD,gBAAI,IAAI,KAAK,GAAG;AAIhB,gBAAI,KAAK,KAAK,KAAK,WAAW,CAAC;AAE/B,uBAAW;AAEX,uBAAS;AACP,kBAAI,IAAI,GAAG;AACT,oBAAI,EAAE,MAAM,CAAC;AACb,yBAAS,EAAE,GAAG,CAAC;AAAA,cACjB;AAEA,kBAAI,UAAU,IAAI,CAAC;AACnB,kBAAI,MAAM,EAAG;AAEb,kBAAI,EAAE,MAAM,CAAC;AACb,uBAAS,EAAE,GAAG,CAAC;AAAA,YACjB;AAEA,uBAAW;AAEX,mBAAO,EAAE,IAAI,IAAI,IAAI,KAAK,GAAG,EAAE,IAAI,CAAC,IAAI,MAAM,GAAG,EAAE;AAAA,UACrD;AAGA,UAAAE,QAAOA,QAAO,KAAK,EAAE,EAAE,KAAK,IAAI,GAAG,CAAC,CAAC,IAAI,IAAI,KAAK;AAElD,YAAE,IAAI;AACN,qBAAW;AACX,cAAI,EAAE,MAAM,GAAG,GAAG,KAAKC,MAAK,CAAC;AAC7B,qBAAW;AACX,cAAI,IAAI,CAAC;AACT,YAAE,IAAID;AAEN,iBAAO;AAAA,QACT;AAcA,UAAE,cAAc,SAAU,IAAI,IAAI;AAChC,cAAI,GAAG,KACL,IAAI,MACJ,OAAO,EAAE;AAEX,cAAI,OAAO,QAAQ;AACjB,gBAAI,kBAAkB,CAAC;AACvB,kBAAMD,UAAS,GAAG,KAAK,KAAK,YAAY,KAAK,KAAK,QAAQ;AAAA,UAC5D,OAAO;AACL,uBAAW,IAAI,GAAG,UAAU;AAE5B,gBAAI,OAAO,OAAQ,MAAK,KAAK;AAAA,gBACxB,YAAW,IAAI,GAAG,CAAC;AAExB,gBAAI,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,EAAE;AAC7B,gBAAI,kBAAkB,CAAC;AACvB,kBAAMA,UAAS,GAAG,MAAM,KAAK,KAAK,KAAK,UAAU,EAAE;AAAA,UACrD;AAEA,iBAAO;AAAA,QACT;AAYA,UAAE,sBAAsB,EAAE,OAAO,SAAU,IAAI,IAAI;AACjD,cAAI,IAAI,MACN,OAAO,EAAE;AAEX,cAAI,OAAO,QAAQ;AACjB,iBAAK,KAAK;AACV,iBAAK,KAAK;AAAA,UACZ,OAAO;AACL,uBAAW,IAAI,GAAG,UAAU;AAE5B,gBAAI,OAAO,OAAQ,MAAK,KAAK;AAAA,gBACxB,YAAW,IAAI,GAAG,CAAC;AAAA,UAC1B;AAEA,iBAAO,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,EAAE;AAAA,QAClC;AAUA,UAAE,WAAW,EAAE,UAAU,EAAE,MAAM,EAAE,SAAS,WAAY;AACtD,cAAI,IAAI,MACN,IAAI,kBAAkB,CAAC,GACvB,OAAO,EAAE;AAEX,iBAAOA,UAAS,GAAG,KAAK,KAAK,YAAY,KAAK,KAAK,QAAQ;AAAA,QAC7D;AA8BA,iBAAS,IAAI,GAAG,GAAG;AACjB,cAAI,OAAO,GAAG,GAAG,GAAG,GAAG,KAAK,IAAI,IAC9B,OAAO,EAAE,aACT,KAAK,KAAK;AAGZ,cAAI,CAAC,EAAE,KAAK,CAAC,EAAE,GAAG;AAIhB,gBAAI,CAAC,EAAE,EAAG,KAAI,IAAI,KAAK,CAAC;AACxB,mBAAO,WAAW,MAAM,GAAG,EAAE,IAAI;AAAA,UACnC;AAEA,eAAK,EAAE;AACP,eAAK,EAAE;AAIP,cAAI,EAAE;AACN,cAAI,EAAE;AACN,eAAK,GAAG,MAAM;AACd,cAAI,IAAI;AAGR,cAAI,GAAG;AACL,gBAAI,IAAI,GAAG;AACT,kBAAI;AACJ,kBAAI,CAAC;AACL,oBAAM,GAAG;AAAA,YACX,OAAO;AACL,kBAAI;AACJ,kBAAI;AACJ,oBAAM,GAAG;AAAA,YACX;AAGA,gBAAI,KAAK,KAAK,KAAK,QAAQ;AAC3B,kBAAM,IAAI,MAAM,IAAI,IAAI,MAAM;AAE9B,gBAAI,IAAI,KAAK;AACX,kBAAI;AACJ,gBAAE,SAAS;AAAA,YACb;AAGA,cAAE,QAAQ;AACV,mBAAO,MAAM,GAAE,KAAK,CAAC;AACrB,cAAE,QAAQ;AAAA,UACZ;AAEA,gBAAM,GAAG;AACT,cAAI,GAAG;AAGP,cAAI,MAAM,IAAI,GAAG;AACf,gBAAI;AACJ,gBAAI;AACJ,iBAAK;AACL,iBAAK;AAAA,UACP;AAGA,eAAK,QAAQ,GAAG,KAAI;AAClB,qBAAS,GAAG,EAAE,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,SAAS,OAAO;AACnD,eAAG,CAAC,KAAK;AAAA,UACX;AAEA,cAAI,OAAO;AACT,eAAG,QAAQ,KAAK;AAChB,cAAE;AAAA,UACJ;AAIA,eAAK,MAAM,GAAG,QAAQ,GAAG,EAAE,GAAG,KAAK,IAAI,IAAG,IAAI;AAE9C,YAAE,IAAI;AACN,YAAE,IAAI;AAEN,iBAAO,WAAW,MAAM,GAAG,EAAE,IAAI;AAAA,QACnC;AAGA,iBAAS,WAAW,GAAG,KAAK,KAAK;AAC/B,cAAI,MAAM,CAAC,CAAC,KAAK,IAAI,OAAO,IAAI,KAAK;AACnC,kBAAM,MAAM,kBAAkB,CAAC;AAAA,UACjC;AAAA,QACF;AAGA,iBAAS,eAAe,GAAG;AACzB,cAAI,GAAG,GAAG,IACR,kBAAkB,EAAE,SAAS,GAC7B,MAAM,IACN,IAAI,EAAE,CAAC;AAET,cAAI,kBAAkB,GAAG;AACvB,mBAAO;AACP,iBAAK,IAAI,GAAG,IAAI,iBAAiB,KAAK;AACpC,mBAAK,EAAE,CAAC,IAAI;AACZ,kBAAI,WAAW,GAAG;AAClB,kBAAI,EAAG,QAAO,cAAc,CAAC;AAC7B,qBAAO;AAAA,YACT;AAEA,gBAAI,EAAE,CAAC;AACP,iBAAK,IAAI;AACT,gBAAI,WAAW,GAAG;AAClB,gBAAI,EAAG,QAAO,cAAc,CAAC;AAAA,UAC/B,WAAW,MAAM,GAAG;AAClB,mBAAO;AAAA,UACT;AAGA,iBAAO,IAAI,OAAO,IAAI,MAAK;AAE3B,iBAAO,MAAM;AAAA,QACf;AAGA,YAAI,SAAU,2BAAY;AAGxB,mBAAS,gBAAgB,GAAG,GAAG;AAC7B,gBAAI,MACF,QAAQ,GACR,IAAI,EAAE;AAER,iBAAK,IAAI,EAAE,MAAM,GAAG,OAAM;AACxB,qBAAO,EAAE,CAAC,IAAI,IAAI;AAClB,gBAAE,CAAC,IAAI,OAAO,OAAO;AACrB,sBAAQ,OAAO,OAAO;AAAA,YACxB;AAEA,gBAAI,MAAO,GAAE,QAAQ,KAAK;AAE1B,mBAAO;AAAA,UACT;AAEA,mBAAS,QAAQ,GAAG,GAAG,IAAI,IAAI;AAC7B,gBAAI,GAAG;AAEP,gBAAI,MAAM,IAAI;AACZ,kBAAI,KAAK,KAAK,IAAI;AAAA,YACpB,OAAO;AACL,mBAAK,IAAI,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,oBAAI,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG;AAChB,sBAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI;AACtB;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAEA,mBAAO;AAAA,UACT;AAEA,mBAASG,UAAS,GAAG,GAAG,IAAI;AAC1B,gBAAI,IAAI;AAGR,mBAAO,QAAO;AACZ,gBAAE,EAAE,KAAK;AACT,kBAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,IAAI;AACxB,gBAAE,EAAE,IAAI,IAAI,OAAO,EAAE,EAAE,IAAI,EAAE,EAAE;AAAA,YACjC;AAGA,mBAAO,CAAC,EAAE,CAAC,KAAK,EAAE,SAAS,IAAI,GAAE,MAAM;AAAA,UACzC;AAEA,iBAAO,SAAU,GAAG,GAAG,IAAI,IAAI;AAC7B,gBAAI,KAAK,GAAG,GAAG,GAAG,MAAM,OAAO,GAAG,IAAI,KAAK,MAAM,MAAM,IAAI,GAAG,IAAI,IAAI,KAAK,IAAI,IAC7E,OAAO,EAAE,aACTF,QAAO,EAAE,KAAK,EAAE,IAAI,IAAI,IACxB,KAAK,EAAE,GACP,KAAK,EAAE;AAGT,gBAAI,CAAC,EAAE,EAAG,QAAO,IAAI,KAAK,CAAC;AAC3B,gBAAI,CAAC,EAAE,EAAG,OAAM,MAAM,eAAe,kBAAkB;AAEvD,gBAAI,EAAE,IAAI,EAAE;AACZ,iBAAK,GAAG;AACR,iBAAK,GAAG;AACR,gBAAI,IAAI,KAAKA,KAAI;AACjB,iBAAK,EAAE,IAAI,CAAC;AAGZ,iBAAK,IAAI,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,KAAK,KAAM,GAAE;AACvC,gBAAI,GAAG,CAAC,KAAK,GAAG,CAAC,KAAK,GAAI,GAAE;AAE5B,gBAAI,MAAM,MAAM;AACd,mBAAK,KAAK,KAAK;AAAA,YACjB,WAAW,IAAI;AACb,mBAAK,MAAM,kBAAkB,CAAC,IAAI,kBAAkB,CAAC,KAAK;AAAA,YAC5D,OAAO;AACL,mBAAK;AAAA,YACP;AAEA,gBAAI,KAAK,EAAG,QAAO,IAAI,KAAK,CAAC;AAG7B,iBAAK,KAAK,WAAW,IAAI;AACzB,gBAAI;AAGJ,gBAAI,MAAM,GAAG;AACX,kBAAI;AACJ,mBAAK,GAAG,CAAC;AACT;AAGA,sBAAQ,IAAI,MAAM,MAAM,MAAM,KAAK;AACjC,oBAAI,IAAI,QAAQ,GAAG,CAAC,KAAK;AACzB,mBAAG,CAAC,IAAI,IAAI,KAAK;AACjB,oBAAI,IAAI,KAAK;AAAA,cACf;AAAA,YAGF,OAAO;AAGL,kBAAI,QAAQ,GAAG,CAAC,IAAI,KAAK;AAEzB,kBAAI,IAAI,GAAG;AACT,qBAAK,gBAAgB,IAAI,CAAC;AAC1B,qBAAK,gBAAgB,IAAI,CAAC;AAC1B,qBAAK,GAAG;AACR,qBAAK,GAAG;AAAA,cACV;AAEA,mBAAK;AACL,oBAAM,GAAG,MAAM,GAAG,EAAE;AACpB,qBAAO,IAAI;AAGX,qBAAO,OAAO,KAAK,KAAI,MAAM,IAAI;AAEjC,mBAAK,GAAG,MAAM;AACd,iBAAG,QAAQ,CAAC;AACZ,oBAAM,GAAG,CAAC;AAEV,kBAAI,GAAG,CAAC,KAAK,OAAO,EAAG,GAAE;AAEzB,iBAAG;AACD,oBAAI;AAGJ,sBAAM,QAAQ,IAAI,KAAK,IAAI,IAAI;AAG/B,oBAAI,MAAM,GAAG;AAGX,yBAAO,IAAI,CAAC;AACZ,sBAAI,MAAM,KAAM,QAAO,OAAO,QAAQ,IAAI,CAAC,KAAK;AAGhD,sBAAI,OAAO,MAAM;AAUjB,sBAAI,IAAI,GAAG;AACT,wBAAI,KAAK,KAAM,KAAI,OAAO;AAG1B,2BAAO,gBAAgB,IAAI,CAAC;AAC5B,4BAAQ,KAAK;AACb,2BAAO,IAAI;AAGX,0BAAM,QAAQ,MAAM,KAAK,OAAO,IAAI;AAGpC,wBAAI,OAAO,GAAG;AACZ;AAGA,sBAAAE,UAAS,MAAM,KAAK,QAAQ,KAAK,IAAI,KAAK;AAAA,oBAC5C;AAAA,kBACF,OAAO;AAKL,wBAAI,KAAK,EAAG,OAAM,IAAI;AACtB,2BAAO,GAAG,MAAM;AAAA,kBAClB;AAEA,0BAAQ,KAAK;AACb,sBAAI,QAAQ,KAAM,MAAK,QAAQ,CAAC;AAGhC,kBAAAA,UAAS,KAAK,MAAM,IAAI;AAGxB,sBAAI,OAAO,IAAI;AACb,2BAAO,IAAI;AAGX,0BAAM,QAAQ,IAAI,KAAK,IAAI,IAAI;AAG/B,wBAAI,MAAM,GAAG;AACX;AAGA,sBAAAA,UAAS,KAAK,KAAK,OAAO,KAAK,IAAI,IAAI;AAAA,oBACzC;AAAA,kBACF;AAEA,yBAAO,IAAI;AAAA,gBACb,WAAW,QAAQ,GAAG;AACpB;AACA,wBAAM,CAAC,CAAC;AAAA,gBACV;AAGA,mBAAG,GAAG,IAAI;AAGV,oBAAI,OAAO,IAAI,CAAC,GAAG;AACjB,sBAAI,MAAM,IAAI,GAAG,EAAE,KAAK;AAAA,gBAC1B,OAAO;AACL,wBAAM,CAAC,GAAG,EAAE,CAAC;AACb,yBAAO;AAAA,gBACT;AAAA,cAEF,UAAU,OAAO,MAAM,IAAI,CAAC,MAAM,WAAW;AAAA,YAC/C;AAGA,gBAAI,CAAC,GAAG,CAAC,EAAG,IAAG,MAAM;AAErB,cAAE,IAAI;AAEN,mBAAO,MAAM,GAAG,KAAK,KAAK,kBAAkB,CAAC,IAAI,IAAI,EAAE;AAAA,UACzD;AAAA,QACF,EAAG;AAyBH,iBAAS,IAAI,GAAG,IAAI;AAClB,cAAI,aAAaD,QAAOE,MAAK,KAAK,GAAG,KACnC,IAAI,GACJ,IAAI,GACJ,OAAO,EAAE,aACT,KAAK,KAAK;AAEZ,cAAI,kBAAkB,CAAC,IAAI,GAAI,OAAM,MAAM,qBAAqB,kBAAkB,CAAC,CAAC;AAGpF,cAAI,CAAC,EAAE,EAAG,QAAO,IAAI,KAAK,GAAG;AAE7B,cAAI,MAAM,MAAM;AACd,uBAAW;AACX,kBAAM;AAAA,UACR,OAAO;AACL,kBAAM;AAAA,UACR;AAEA,cAAI,IAAI,KAAK,OAAO;AAEpB,iBAAO,EAAE,IAAI,EAAE,IAAI,GAAG,GAAG;AACvB,gBAAI,EAAE,MAAM,CAAC;AACb,iBAAK;AAAA,UACP;AAGA,UAAAF,SAAQ,KAAK,IAAI,QAAQ,GAAG,CAAC,CAAC,IAAI,KAAK,OAAO,IAAI,IAAI;AACtD,iBAAOA;AACP,wBAAcE,OAAM,MAAM,IAAI,KAAK,GAAG;AACtC,eAAK,YAAY;AAEjB,qBAAS;AACP,YAAAA,OAAM,MAAMA,KAAI,MAAM,CAAC,GAAG,GAAG;AAC7B,0BAAc,YAAY,MAAM,EAAE,CAAC;AACnC,gBAAI,IAAI,KAAK,OAAOA,MAAK,aAAa,GAAG,CAAC;AAE1C,gBAAI,eAAe,EAAE,CAAC,EAAE,MAAM,GAAG,GAAG,MAAM,eAAe,IAAI,CAAC,EAAE,MAAM,GAAG,GAAG,GAAG;AAC7E,qBAAO,IAAK,OAAM,MAAM,IAAI,MAAM,GAAG,GAAG,GAAG;AAC3C,mBAAK,YAAY;AACjB,qBAAO,MAAM,QAAQ,WAAW,MAAM,MAAM,KAAK,EAAE,KAAK;AAAA,YAC1D;AAEA,kBAAM;AAAA,UACR;AAAA,QACF;AAIA,iBAAS,kBAAkB,GAAG;AAC5B,cAAI,IAAI,EAAE,IAAI,UACZ,IAAI,EAAE,EAAE,CAAC;AAGX,iBAAO,KAAK,IAAI,KAAK,GAAI;AACzB,iBAAO;AAAA,QACT;AAGA,iBAAS,QAAQ,MAAM,IAAI,IAAI;AAE7B,cAAI,KAAK,KAAK,KAAK,GAAG,GAAG;AAIvB,uBAAW;AACX,gBAAI,GAAI,MAAK,YAAY;AACzB,kBAAM,MAAM,eAAe,+BAA+B;AAAA,UAC5D;AAEA,iBAAO,MAAM,IAAI,KAAK,KAAK,IAAI,GAAG,EAAE;AAAA,QACtC;AAGA,iBAAS,cAAc,GAAG;AACxB,cAAI,KAAK;AACT,iBAAO,MAAM,OAAM;AACnB,iBAAO;AAAA,QACT;AAUA,iBAAS,GAAG,GAAG,IAAI;AACjB,cAAI,GAAG,IAAI,aAAa,GAAG,WAAW,KAAK,GAAG,KAAK,IACjD,IAAI,GACJF,SAAQ,IACR,IAAI,GACJ,KAAK,EAAE,GACP,OAAO,EAAE,aACT,KAAK,KAAK;AAIZ,cAAI,EAAE,IAAI,EAAG,OAAM,MAAM,gBAAgB,EAAE,IAAI,QAAQ,YAAY;AAGnE,cAAI,EAAE,GAAG,GAAG,EAAG,QAAO,IAAI,KAAK,CAAC;AAEhC,cAAI,MAAM,MAAM;AACd,uBAAW;AACX,kBAAM;AAAA,UACR,OAAO;AACL,kBAAM;AAAA,UACR;AAEA,cAAI,EAAE,GAAG,EAAE,GAAG;AACZ,gBAAI,MAAM,KAAM,YAAW;AAC3B,mBAAO,QAAQ,MAAM,GAAG;AAAA,UAC1B;AAEA,iBAAOA;AACP,eAAK,YAAY;AACjB,cAAI,eAAe,EAAE;AACrB,eAAK,EAAE,OAAO,CAAC;AACf,cAAI,kBAAkB,CAAC;AAEvB,cAAI,KAAK,IAAI,CAAC,IAAI,OAAQ;AAaxB,mBAAO,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,EAAE,OAAO,CAAC,IAAI,GAAG;AACtD,kBAAI,EAAE,MAAM,CAAC;AACb,kBAAI,eAAe,EAAE,CAAC;AACtB,mBAAK,EAAE,OAAO,CAAC;AACf;AAAA,YACF;AAEA,gBAAI,kBAAkB,CAAC;AAEvB,gBAAI,KAAK,GAAG;AACV,kBAAI,IAAI,KAAK,OAAO,CAAC;AACrB;AAAA,YACF,OAAO;AACL,kBAAI,IAAI,KAAK,KAAK,MAAM,EAAE,MAAM,CAAC,CAAC;AAAA,YACpC;AAAA,UACF,OAAO;AAKL,gBAAI,QAAQ,MAAM,MAAM,GAAG,EAAE,EAAE,MAAM,IAAI,EAAE;AAC3C,gBAAI,GAAG,IAAI,KAAK,KAAK,MAAM,EAAE,MAAM,CAAC,CAAC,GAAG,MAAMA,MAAK,EAAE,KAAK,CAAC;AAE3D,iBAAK,YAAY;AACjB,mBAAO,MAAM,QAAQ,WAAW,MAAM,MAAM,GAAG,EAAE,KAAK;AAAA,UACxD;AAOA,gBAAM,YAAY,IAAI,OAAO,EAAE,MAAM,GAAG,GAAG,EAAE,KAAK,GAAG,GAAG,GAAG;AAC3D,eAAK,MAAM,EAAE,MAAM,CAAC,GAAG,GAAG;AAC1B,wBAAc;AAEd,qBAAS;AACP,wBAAY,MAAM,UAAU,MAAM,EAAE,GAAG,GAAG;AAC1C,gBAAI,IAAI,KAAK,OAAO,WAAW,IAAI,KAAK,WAAW,GAAG,GAAG,CAAC;AAE1D,gBAAI,eAAe,EAAE,CAAC,EAAE,MAAM,GAAG,GAAG,MAAM,eAAe,IAAI,CAAC,EAAE,MAAM,GAAG,GAAG,GAAG;AAC7E,oBAAM,IAAI,MAAM,CAAC;AAGjB,kBAAI,MAAM,EAAG,OAAM,IAAI,KAAK,QAAQ,MAAM,MAAM,GAAG,EAAE,EAAE,MAAM,IAAI,EAAE,CAAC;AACpE,oBAAM,OAAO,KAAK,IAAI,KAAK,CAAC,GAAG,GAAG;AAElC,mBAAK,YAAY;AACjB,qBAAO,MAAM,QAAQ,WAAW,MAAM,MAAM,KAAK,EAAE,KAAK;AAAA,YAC1D;AAEA,kBAAM;AACN,2BAAe;AAAA,UACjB;AAAA,QACF;AAMA,iBAAS,aAAa,GAAG,KAAK;AAC5B,cAAI,GAAG,GAAG;AAGV,eAAK,IAAI,IAAI,QAAQ,GAAG,KAAK,GAAI,OAAM,IAAI,QAAQ,KAAK,EAAE;AAG1D,eAAK,IAAI,IAAI,OAAO,IAAI,KAAK,GAAG;AAG9B,gBAAI,IAAI,EAAG,KAAI;AACf,iBAAK,CAAC,IAAI,MAAM,IAAI,CAAC;AACrB,kBAAM,IAAI,UAAU,GAAG,CAAC;AAAA,UAC1B,WAAW,IAAI,GAAG;AAGhB,gBAAI,IAAI;AAAA,UACV;AAGA,eAAK,IAAI,GAAG,IAAI,WAAW,CAAC,MAAM,KAAK,GAAE;AAGzC,eAAK,MAAM,IAAI,QAAQ,IAAI,WAAW,MAAM,CAAC,MAAM,KAAK,GAAE;AAC1D,gBAAM,IAAI,MAAM,GAAG,GAAG;AAEtB,cAAI,KAAK;AACP,mBAAO;AACP,gBAAI,IAAI,IAAI;AACZ,cAAE,IAAI,UAAU,IAAI,QAAQ;AAC5B,cAAE,IAAI,CAAC;AAMP,iBAAK,IAAI,KAAK;AACd,gBAAI,IAAI,EAAG,MAAK;AAEhB,gBAAI,IAAI,KAAK;AACX,kBAAI,EAAG,GAAE,EAAE,KAAK,CAAC,IAAI,MAAM,GAAG,CAAC,CAAC;AAChC,mBAAK,OAAO,UAAU,IAAI,MAAM,GAAE,EAAE,KAAK,CAAC,IAAI,MAAM,GAAG,KAAK,QAAQ,CAAC;AACrE,oBAAM,IAAI,MAAM,CAAC;AACjB,kBAAI,WAAW,IAAI;AAAA,YACrB,OAAO;AACL,mBAAK;AAAA,YACP;AAEA,mBAAO,MAAM,QAAO;AACpB,cAAE,EAAE,KAAK,CAAC,GAAG;AAEb,gBAAI,aAAa,EAAE,IAAI,SAAS,EAAE,IAAI,CAAC,OAAQ,OAAM,MAAM,qBAAqB,CAAC;AAAA,UACnF,OAAO;AAGL,cAAE,IAAI;AACN,cAAE,IAAI;AACN,cAAE,IAAI,CAAC,CAAC;AAAA,UACV;AAEA,iBAAO;AAAA,QACT;AAMC,iBAAS,MAAM,GAAG,IAAI,IAAI;AACzB,cAAI,GAAG,GAAG,GAAG,GAAG,IAAI,SAAS,GAAG,KAC9B,KAAK,EAAE;AAWT,eAAK,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,KAAK,IAAI,KAAK,GAAI;AACzC,cAAI,KAAK;AAGT,cAAI,IAAI,GAAG;AACT,iBAAK;AACL,gBAAI;AACJ,gBAAI,GAAG,MAAM,CAAC;AAAA,UAChB,OAAO;AACL,kBAAM,KAAK,MAAM,IAAI,KAAK,QAAQ;AAClC,gBAAI,GAAG;AACP,gBAAI,OAAO,EAAG,QAAO;AACrB,gBAAI,IAAI,GAAG,GAAG;AAGd,iBAAK,IAAI,GAAG,KAAK,IAAI,KAAK,GAAI;AAG9B,iBAAK;AAIL,gBAAI,IAAI,WAAW;AAAA,UACrB;AAEA,cAAI,OAAO,QAAQ;AACjB,gBAAI,QAAQ,IAAI,IAAI,IAAI,CAAC;AAGzB,iBAAK,IAAI,IAAI,KAAK;AAGlB,sBAAU,KAAK,KAAK,GAAG,MAAM,CAAC,MAAM,UAAU,IAAI;AAMlD,sBAAU,KAAK,KACV,MAAM,aAAa,MAAM,KAAK,OAAO,EAAE,IAAI,IAAI,IAAI,MACpD,KAAK,KAAK,MAAM,MAAM,MAAM,KAAK,WAAW,MAAM;AAAA,aAGhD,IAAI,IAAI,IAAI,IAAI,IAAI,QAAQ,IAAI,IAAI,CAAC,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,KAAM,KAClE,OAAO,EAAE,IAAI,IAAI,IAAI;AAAA,UAC7B;AAEA,cAAI,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG;AACpB,gBAAI,SAAS;AACX,kBAAI,kBAAkB,CAAC;AACvB,iBAAG,SAAS;AAGZ,mBAAK,KAAK,IAAI;AAGd,iBAAG,CAAC,IAAI,QAAQ,KAAK,WAAW,KAAK,YAAY,QAAQ;AACzD,gBAAE,IAAI,UAAU,CAAC,KAAK,QAAQ,KAAK;AAAA,YACrC,OAAO;AACL,iBAAG,SAAS;AAGZ,iBAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI;AAAA,YACtB;AAEA,mBAAO;AAAA,UACT;AAGA,cAAI,KAAK,GAAG;AACV,eAAG,SAAS;AACZ,gBAAI;AACJ;AAAA,UACF,OAAO;AACL,eAAG,SAAS,MAAM;AAClB,gBAAI,QAAQ,IAAI,WAAW,CAAC;AAI5B,eAAG,GAAG,IAAI,IAAI,KAAK,IAAI,QAAQ,IAAI,IAAI,CAAC,IAAI,QAAQ,IAAI,CAAC,IAAI,KAAK,IAAI;AAAA,UACxE;AAEA,cAAI,SAAS;AACX,uBAAS;AAGP,kBAAI,OAAO,GAAG;AACZ,qBAAK,GAAG,CAAC,KAAK,MAAM,MAAM;AACxB,qBAAG,CAAC,IAAI;AACR,oBAAE,EAAE;AAAA,gBACN;AAEA;AAAA,cACF,OAAO;AACL,mBAAG,GAAG,KAAK;AACX,oBAAI,GAAG,GAAG,KAAK,KAAM;AACrB,mBAAG,KAAK,IAAI;AACZ,oBAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAGA,eAAK,IAAI,GAAG,QAAQ,GAAG,EAAE,CAAC,MAAM,IAAI,IAAG,IAAI;AAE3C,cAAI,aAAa,EAAE,IAAI,SAAS,EAAE,IAAI,CAAC,QAAQ;AAC7C,kBAAM,MAAM,qBAAqB,kBAAkB,CAAC,CAAC;AAAA,UACvD;AAEA,iBAAO;AAAA,QACT;AAGA,iBAAS,SAAS,GAAG,GAAG;AACtB,cAAI,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,IAAI,IAAI,MAAM,IACpC,OAAO,EAAE,aACT,KAAK,KAAK;AAIZ,cAAI,CAAC,EAAE,KAAK,CAAC,EAAE,GAAG;AAChB,gBAAI,EAAE,EAAG,GAAE,IAAI,CAAC,EAAE;AAAA,gBACb,KAAI,IAAI,KAAK,CAAC;AACnB,mBAAO,WAAW,MAAM,GAAG,EAAE,IAAI;AAAA,UACnC;AAEA,eAAK,EAAE;AACP,eAAK,EAAE;AAIP,cAAI,EAAE;AACN,eAAK,EAAE;AACP,eAAK,GAAG,MAAM;AACd,cAAI,KAAK;AAGT,cAAI,GAAG;AACL,mBAAO,IAAI;AAEX,gBAAI,MAAM;AACR,kBAAI;AACJ,kBAAI,CAAC;AACL,oBAAM,GAAG;AAAA,YACX,OAAO;AACL,kBAAI;AACJ,kBAAI;AACJ,oBAAM,GAAG;AAAA,YACX;AAKA,gBAAI,KAAK,IAAI,KAAK,KAAK,KAAK,QAAQ,GAAG,GAAG,IAAI;AAE9C,gBAAI,IAAI,GAAG;AACT,kBAAI;AACJ,gBAAE,SAAS;AAAA,YACb;AAGA,cAAE,QAAQ;AACV,iBAAK,IAAI,GAAG,MAAM,GAAE,KAAK,CAAC;AAC1B,cAAE,QAAQ;AAAA,UAGZ,OAAO;AAIL,gBAAI,GAAG;AACP,kBAAM,GAAG;AACT,mBAAO,IAAI;AACX,gBAAI,KAAM,OAAM;AAEhB,iBAAK,IAAI,GAAG,IAAI,KAAK,KAAK;AACxB,kBAAI,GAAG,CAAC,KAAK,GAAG,CAAC,GAAG;AAClB,uBAAO,GAAG,CAAC,IAAI,GAAG,CAAC;AACnB;AAAA,cACF;AAAA,YACF;AAEA,gBAAI;AAAA,UACN;AAEA,cAAI,MAAM;AACR,gBAAI;AACJ,iBAAK;AACL,iBAAK;AACL,cAAE,IAAI,CAAC,EAAE;AAAA,UACX;AAEA,gBAAM,GAAG;AAIT,eAAK,IAAI,GAAG,SAAS,KAAK,IAAI,GAAG,EAAE,EAAG,IAAG,KAAK,IAAI;AAGlD,eAAK,IAAI,GAAG,QAAQ,IAAI,KAAI;AAC1B,gBAAI,GAAG,EAAE,CAAC,IAAI,GAAG,CAAC,GAAG;AACnB,mBAAK,IAAI,GAAG,KAAK,GAAG,EAAE,CAAC,MAAM,IAAI,IAAG,CAAC,IAAI,OAAO;AAChD,gBAAE,GAAG,CAAC;AACN,iBAAG,CAAC,KAAK;AAAA,YACX;AAEA,eAAG,CAAC,KAAK,GAAG,CAAC;AAAA,UACf;AAGA,iBAAO,GAAG,EAAE,GAAG,MAAM,IAAI,IAAG,IAAI;AAGhC,iBAAO,GAAG,CAAC,MAAM,GAAG,GAAG,MAAM,EAAG,GAAE;AAGlC,cAAI,CAAC,GAAG,CAAC,EAAG,QAAO,IAAI,KAAK,CAAC;AAE7B,YAAE,IAAI;AACN,YAAE,IAAI;AAGN,iBAAO,WAAW,MAAM,GAAG,EAAE,IAAI;AAAA,QACnC;AAGA,iBAASF,UAAS,GAAG,OAAO,IAAI;AAC9B,cAAI,GACF,IAAI,kBAAkB,CAAC,GACvB,MAAM,eAAe,EAAE,CAAC,GACxB,MAAM,IAAI;AAEZ,cAAI,OAAO;AACT,gBAAI,OAAO,IAAI,KAAK,OAAO,GAAG;AAC5B,oBAAM,IAAI,OAAO,CAAC,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,cAAc,CAAC;AAAA,YAC5D,WAAW,MAAM,GAAG;AAClB,oBAAM,IAAI,OAAO,CAAC,IAAI,MAAM,IAAI,MAAM,CAAC;AAAA,YACzC;AAEA,kBAAM,OAAO,IAAI,IAAI,MAAM,QAAQ;AAAA,UACrC,WAAW,IAAI,GAAG;AAChB,kBAAM,OAAO,cAAc,CAAC,IAAI,CAAC,IAAI;AACrC,gBAAI,OAAO,IAAI,KAAK,OAAO,EAAG,QAAO,cAAc,CAAC;AAAA,UACtD,WAAW,KAAK,KAAK;AACnB,mBAAO,cAAc,IAAI,IAAI,GAAG;AAChC,gBAAI,OAAO,IAAI,KAAK,IAAI,KAAK,EAAG,OAAM,MAAM,MAAM,cAAc,CAAC;AAAA,UACnE,OAAO;AACL,iBAAK,IAAI,IAAI,KAAK,IAAK,OAAM,IAAI,MAAM,GAAG,CAAC,IAAI,MAAM,IAAI,MAAM,CAAC;AAChE,gBAAI,OAAO,IAAI,KAAK,OAAO,GAAG;AAC5B,kBAAI,IAAI,MAAM,IAAK,QAAO;AAC1B,qBAAO,cAAc,CAAC;AAAA,YACxB;AAAA,UACF;AAEA,iBAAO,EAAE,IAAI,IAAI,MAAM,MAAM;AAAA,QAC/B;AAIA,iBAAS,SAAS,KAAK,KAAK;AAC1B,cAAI,IAAI,SAAS,KAAK;AACpB,gBAAI,SAAS;AACb,mBAAO;AAAA,UACT;AAAA,QACF;AAiBA,iBAAS,MAAM,KAAK;AAClB,cAAI,GAAG,GAAG;AASV,mBAASF,SAAQ,OAAO;AACtB,gBAAI,IAAI;AAGR,gBAAI,EAAE,aAAaA,UAAU,QAAO,IAAIA,SAAQ,KAAK;AAIrD,cAAE,cAAcA;AAGhB,gBAAI,iBAAiBA,UAAS;AAC5B,gBAAE,IAAI,MAAM;AACZ,gBAAE,IAAI,MAAM;AACZ,gBAAE,KAAK,QAAQ,MAAM,KAAK,MAAM,MAAM,IAAI;AAC1C;AAAA,YACF;AAEA,gBAAI,OAAO,UAAU,UAAU;AAG7B,kBAAI,QAAQ,MAAM,GAAG;AACnB,sBAAM,MAAM,kBAAkB,KAAK;AAAA,cACrC;AAEA,kBAAI,QAAQ,GAAG;AACb,kBAAE,IAAI;AAAA,cACR,WAAW,QAAQ,GAAG;AACpB,wBAAQ,CAAC;AACT,kBAAE,IAAI;AAAA,cACR,OAAO;AACL,kBAAE,IAAI;AACN,kBAAE,IAAI;AACN,kBAAE,IAAI,CAAC,CAAC;AACR;AAAA,cACF;AAGA,kBAAI,UAAU,CAAC,CAAC,SAAS,QAAQ,KAAK;AACpC,kBAAE,IAAI;AACN,kBAAE,IAAI,CAAC,KAAK;AACZ;AAAA,cACF;AAEA,qBAAO,aAAa,GAAG,MAAM,SAAS,CAAC;AAAA,YACzC,WAAW,OAAO,UAAU,UAAU;AACpC,oBAAM,MAAM,kBAAkB,KAAK;AAAA,YACrC;AAGA,gBAAI,MAAM,WAAW,CAAC,MAAM,IAAI;AAC9B,sBAAQ,MAAM,MAAM,CAAC;AACrB,gBAAE,IAAI;AAAA,YACR,OAAO;AACL,gBAAE,IAAI;AAAA,YACR;AAEA,gBAAI,UAAU,KAAK,KAAK,EAAG,cAAa,GAAG,KAAK;AAAA,gBAC3C,OAAM,MAAM,kBAAkB,KAAK;AAAA,UAC1C;AAEA,UAAAA,SAAQ,YAAY;AAEpB,UAAAA,SAAQ,WAAW;AACnB,UAAAA,SAAQ,aAAa;AACrB,UAAAA,SAAQ,aAAa;AACrB,UAAAA,SAAQ,cAAc;AACtB,UAAAA,SAAQ,gBAAgB;AACxB,UAAAA,SAAQ,kBAAkB;AAC1B,UAAAA,SAAQ,kBAAkB;AAC1B,UAAAA,SAAQ,kBAAkB;AAC1B,UAAAA,SAAQ,mBAAmB;AAE3B,UAAAA,SAAQ,QAAQ;AAChB,UAAAA,SAAQ,SAASA,SAAQ,MAAMO;AAE/B,cAAI,QAAQ,OAAQ,OAAM,CAAC;AAC3B,cAAI,KAAK;AACP,iBAAK,CAAC,aAAa,YAAY,YAAY,YAAY,MAAM;AAC7D,iBAAK,IAAI,GAAG,IAAI,GAAG,SAAS,KAAI,CAAC,IAAI,eAAe,IAAI,GAAG,GAAG,CAAC,EAAG,KAAI,CAAC,IAAI,KAAK,CAAC;AAAA,UACnF;AAEA,UAAAP,SAAQ,OAAO,GAAG;AAElB,iBAAOA;AAAA,QACT;AAgBA,iBAASO,QAAO,KAAK;AACnB,cAAI,CAAC,OAAO,OAAO,QAAQ,UAAU;AACnC,kBAAM,MAAM,eAAe,iBAAiB;AAAA,UAC9C;AACA,cAAI,GAAG,GAAG,GACR,KAAK;AAAA,YACH;AAAA,YAAa;AAAA,YAAG;AAAA,YAChB;AAAA,YAAY;AAAA,YAAG;AAAA,YACf;AAAA,YAAY,KAAK;AAAA,YAAG;AAAA,YACpB;AAAA,YAAY;AAAA,YAAG,IAAI;AAAA,UACrB;AAEF,eAAK,IAAI,GAAG,IAAI,GAAG,QAAQ,KAAK,GAAG;AACjC,iBAAK,IAAI,IAAI,IAAI,GAAG,CAAC,CAAC,OAAO,QAAQ;AACnC,kBAAI,UAAU,CAAC,MAAM,KAAK,KAAK,GAAG,IAAI,CAAC,KAAK,KAAK,GAAG,IAAI,CAAC,EAAG,MAAK,CAAC,IAAI;AAAA,kBACjE,OAAM,MAAM,kBAAkB,IAAI,OAAO,CAAC;AAAA,YACjD;AAAA,UACF;AAEA,eAAK,IAAI,IAAI,IAAI,MAAM,OAAO,QAAQ;AAClC,gBAAI,KAAK,KAAK,KAAM,MAAK,CAAC,IAAI,IAAI,KAAK,CAAC;AAAA,gBACnC,OAAM,MAAM,kBAAkB,IAAI,OAAO,CAAC;AAAA,UACnD;AAEA,iBAAO;AAAA,QACT;AAIA,QAAAP,WAAU,MAAMA,QAAO;AAEvB,QAAAA,SAAQ,SAAS,IAAIA,SAAQ,UAAUA;AAGvC,cAAM,IAAIA,SAAQ,CAAC;AAOnB,YAAI,OAAO,UAAU,cAAc,OAAO,KAAK;AAC7C,iBAAO,WAAY;AACjB,mBAAOA;AAAA,UACT,CAAC;AAAA,QAGH,WAAW,OAAO,UAAU,eAAe,OAAO,SAAS;AACzD,iBAAO,UAAUA;AAAA,QAGnB,OAAO;AACL,cAAI,CAAC,aAAa;AAChB,0BAAc,OAAO,QAAQ,eAAe,QAAQ,KAAK,QAAQ,OAC7D,OAAO,SAAS,aAAa,EAAE;AAAA,UACrC;AAEA,sBAAY,UAAUA;AAAA,QACxB;AAAA,MACF,GAAG,OAAI;AAAA;AAAA;;;AC79DP;AAAA;AAAA;AAMC,OAAC,SAAU,QAAQ;AAClB;AACA,YAAIQ,MAYF,KAAK,IAUL,KAAK,GAGL,SAAS,KAGT,YAAY,KAOZ,KAAK,IAQL,KAAK,IAOLC,QAAO,aACP,UAAUA,QAAO,YACjB,aAAa,UAAU,kBACvB,aAAa,UAAU,iBACvB,cAAcA,QAAO,oBAGrB,IAAI,CAAC,GACL,YAAY,QACZ,UAAU;AAOZ,iBAAS,QAAQ;AAQf,mBAASD,KAAI,GAAG;AACd,gBAAI,IAAI;AAGR,gBAAI,EAAE,aAAaA,MAAM,QAAO,MAAM,YAAY,MAAM,IAAI,IAAIA,KAAI,CAAC;AAGrE,gBAAI,aAAaA,MAAK;AACpB,gBAAE,IAAI,EAAE;AACR,gBAAE,IAAI,EAAE;AACR,gBAAE,IAAI,EAAE,EAAE,MAAM;AAAA,YAClB,OAAO;AACL,cAAAE,OAAM,GAAG,CAAC;AAAA,YACZ;AAMA,cAAE,cAAcF;AAAA,UAClB;AAEA,UAAAA,KAAI,YAAY;AAChB,UAAAA,KAAI,KAAK;AACT,UAAAA,KAAI,KAAK;AACT,UAAAA,KAAI,KAAK;AACT,UAAAA,KAAI,KAAK;AACT,UAAAA,KAAI,UAAU;AAEd,iBAAOA;AAAA,QACT;AASA,iBAASE,OAAM,GAAG,GAAG;AACnB,cAAI,GAAG,GAAG;AAGV,cAAI,MAAM,KAAK,IAAI,IAAI,EAAG,KAAI;AAAA,mBACrB,CAAC,QAAQ,KAAK,KAAK,EAAE,EAAG,OAAM,MAAM,UAAU,QAAQ;AAG/D,YAAE,IAAI,EAAE,OAAO,CAAC,KAAK,OAAO,IAAI,EAAE,MAAM,CAAC,GAAG,MAAM;AAGlD,eAAK,IAAI,EAAE,QAAQ,GAAG,KAAK,GAAI,KAAI,EAAE,QAAQ,KAAK,EAAE;AAGpD,eAAK,IAAI,EAAE,OAAO,IAAI,KAAK,GAAG;AAG5B,gBAAI,IAAI,EAAG,KAAI;AACf,iBAAK,CAAC,EAAE,MAAM,IAAI,CAAC;AACnB,gBAAI,EAAE,UAAU,GAAG,CAAC;AAAA,UACtB,WAAW,IAAI,GAAG;AAGhB,gBAAI,EAAE;AAAA,UACR;AAEA,eAAK,EAAE;AAGP,eAAK,IAAI,GAAG,IAAI,MAAM,EAAE,OAAO,CAAC,KAAK,MAAM,GAAE;AAE7C,cAAI,KAAK,IAAI;AAGX,cAAE,IAAI,CAAC,EAAE,IAAI,CAAC;AAAA,UAChB,OAAO;AAGL,mBAAO,KAAK,KAAK,EAAE,OAAO,EAAE,EAAE,KAAK,MAAK;AACxC,cAAE,IAAI,IAAI,IAAI;AACd,cAAE,IAAI,CAAC;AAGP,iBAAK,IAAI,GAAG,KAAK,KAAK,GAAE,EAAE,GAAG,IAAI,CAAC,EAAE,OAAO,GAAG;AAAA,UAChD;AAEA,iBAAO;AAAA,QACT;AAYA,iBAAS,MAAM,GAAG,IAAI,IAAI,MAAM;AAC9B,cAAI,KAAK,EAAE,GACT,IAAI,EAAE,IAAI,KAAK;AAEjB,cAAI,IAAI,GAAG,QAAQ;AACjB,gBAAI,OAAO,GAAG;AAGZ,qBAAO,GAAG,CAAC,KAAK;AAAA,YAClB,WAAW,OAAO,GAAG;AACnB,qBAAO,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,KAAK,MAC1B,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI;AAAA,YAC7D,WAAW,OAAO,GAAG;AACnB,qBAAO,QAAQ,CAAC,CAAC,GAAG,CAAC;AAAA,YACvB,OAAO;AACL,qBAAO;AACP,kBAAI,OAAO,EAAG,OAAM,MAAM,UAAU;AAAA,YACtC;AAEA,gBAAI,IAAI,GAAG;AACT,iBAAG,SAAS;AAEZ,kBAAI,MAAM;AAGR,kBAAE,IAAI,CAAC;AACP,mBAAG,CAAC,IAAI;AAAA,cACV,OAAO;AAGL,mBAAG,CAAC,IAAI,EAAE,IAAI;AAAA,cAChB;AAAA,YACF,OAAO;AAGL,iBAAG,SAAS;AAGZ,kBAAI,MAAM;AAGR,uBAAO,EAAE,GAAG,CAAC,IAAI,KAAI;AACnB,qBAAG,CAAC,IAAI;AACR,sBAAI,CAAC,KAAK;AACR,sBAAE,EAAE;AACJ,uBAAG,QAAQ,CAAC;AAAA,kBACd;AAAA,gBACF;AAAA,cACF;AAGA,mBAAK,IAAI,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC,IAAI,IAAG,IAAI;AAAA,YACxC;AAAA,UACF,WAAW,KAAK,KAAK,KAAK,KAAK,OAAO,CAAC,CAAC,IAAI;AAC1C,kBAAM,MAAM,UAAU;AAAA,UACxB;AAEA,iBAAO;AAAA,QACT;AAgBA,iBAASC,WAAU,GAAG,IAAI,GAAG,GAAG;AAC9B,cAAI,GAAG,GACLH,OAAM,EAAE,aACR,IAAI,CAAC,EAAE,EAAE,CAAC;AAEZ,cAAI,MAAM,WAAW;AACnB,gBAAI,MAAM,CAAC,CAAC,KAAK,KAAK,MAAM,MAAM,IAAI,QAAQ;AAC5C,oBAAM,MAAM,MAAM,IAAI,UAAU,cAAc,UAAU;AAAA,YAC1D;AAEA,gBAAI,IAAIA,KAAI,CAAC;AAGb,gBAAI,IAAI,EAAE;AAGV,gBAAI,EAAE,EAAE,SAAS,EAAE,EAAG,OAAM,GAAG,GAAGA,KAAI,EAAE;AAGxC,gBAAI,MAAM,EAAG,KAAI,EAAE,IAAI,IAAI;AAG3B,mBAAO,EAAE,EAAE,SAAS,IAAI,GAAE,EAAE,KAAK,CAAC;AAAA,UACpC;AAEA,cAAI,EAAE;AACN,cAAI,EAAE,EAAE,KAAK,EAAE;AACf,cAAI,EAAE;AAGN,cAAI,MAAM,MAAM,MAAM,KAAK,MAAM,KAAK,KAAK,KAAK,KAAKA,KAAI,MAAM,KAAKA,KAAI,KAAK;AAC3E,gBAAI,EAAE,OAAO,CAAC,KAAK,IAAI,IAAI,MAAM,EAAE,MAAM,CAAC,IAAI,OAAO,IAAI,IAAI,MAAM,QAAQ;AAAA,UAG7E,WAAW,IAAI,GAAG;AAChB,mBAAO,EAAE,IAAI,KAAI,MAAM;AACvB,gBAAI,OAAO;AAAA,UACb,WAAW,IAAI,GAAG;AAChB,gBAAI,EAAE,IAAI,EAAG,MAAK,KAAK,GAAG,MAAM,MAAK;AAAA,qBAC5B,IAAI,EAAG,KAAI,EAAE,MAAM,GAAG,CAAC,IAAI,MAAM,EAAE,MAAM,CAAC;AAAA,UACrD,WAAW,IAAI,GAAG;AAChB,gBAAI,EAAE,OAAO,CAAC,IAAI,MAAM,EAAE,MAAM,CAAC;AAAA,UACnC;AAEA,iBAAO,EAAE,IAAI,MAAM,CAAC,KAAK,MAAM,KAAK,MAAM,IAAI;AAAA,QAChD;AASA,UAAE,MAAM,WAAY;AAClB,cAAI,IAAI,IAAI,KAAK,YAAY,IAAI;AACjC,YAAE,IAAI;AACN,iBAAO;AAAA,QACT;AAQA,UAAE,MAAM,SAAU,GAAG;AACnB,cAAI,OACF,IAAI,MACJ,KAAK,EAAE,GACP,MAAM,IAAI,IAAI,EAAE,YAAY,CAAC,GAAG,GAChC,IAAI,EAAE,GACN,IAAI,EAAE,GACN,IAAI,EAAE,GACN,IAAI,EAAE;AAGR,cAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,EAAG,QAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI;AAGxD,cAAI,KAAK,EAAG,QAAO;AAEnB,kBAAQ,IAAI;AAGZ,cAAI,KAAK,EAAG,QAAO,IAAI,IAAI,QAAQ,IAAI;AAEvC,eAAK,IAAI,GAAG,WAAW,IAAI,GAAG,UAAU,IAAI;AAG5C,eAAK,IAAI,IAAI,EAAE,IAAI,KAAI;AACrB,gBAAI,GAAG,CAAC,KAAK,GAAG,CAAC,EAAG,QAAO,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,QAAQ,IAAI;AAAA,UACzD;AAGA,iBAAO,KAAK,IAAI,IAAI,IAAI,IAAI,QAAQ,IAAI;AAAA,QAC1C;AAOA,UAAE,MAAM,SAAU,GAAG;AACnB,cAAI,IAAI,MACNA,OAAM,EAAE,aACR,IAAI,EAAE,GACN,KAAK,IAAI,IAAIA,KAAI,CAAC,GAAG,GACrB,IAAI,EAAE,KAAK,EAAE,IAAI,IAAI,IACrB,KAAKA,KAAI;AAEX,cAAI,OAAO,CAAC,CAAC,MAAM,KAAK,KAAK,KAAK,OAAQ,OAAM,MAAM,UAAU;AAGhE,cAAI,CAAC,EAAE,CAAC,EAAG,OAAM,MAAM,WAAW;AAGlC,cAAI,CAAC,EAAE,CAAC,EAAG,QAAO,IAAIA,KAAI,IAAI,CAAC;AAE/B,cAAI,IAAI,IAAI,GAAG,KAAK,IAClB,KAAK,EAAE,MAAM,GACb,KAAK,KAAK,EAAE,QACZ,KAAK,EAAE,QACP,IAAI,EAAE,MAAM,GAAG,EAAE,GACjB,KAAK,EAAE,QACP,IAAI,GACJ,KAAK,EAAE,IAAI,CAAC,GACZ,KAAK,GACL,IAAI,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK;AAE/B,YAAE,IAAI;AACN,cAAI,IAAI,IAAI,IAAI;AAGhB,aAAG,QAAQ,CAAC;AAGZ,iBAAO,OAAO,KAAK,GAAE,KAAK,CAAC;AAE3B,aAAG;AAGD,iBAAK,IAAI,GAAG,IAAI,IAAI,KAAK;AAGvB,kBAAI,OAAO,KAAK,EAAE,SAAS;AACzB,sBAAM,KAAK,KAAK,IAAI;AAAA,cACtB,OAAO;AACL,qBAAK,KAAK,IAAI,MAAM,GAAG,EAAE,KAAK,MAAK;AACjC,sBAAI,EAAE,EAAE,KAAK,EAAE,EAAE,GAAG;AAClB,0BAAM,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,IAAI;AAC1B;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAGA,kBAAI,MAAM,GAAG;AAIX,qBAAK,KAAK,MAAM,KAAK,IAAI,IAAI,MAAK;AAChC,sBAAI,EAAE,EAAE,EAAE,IAAI,GAAG,EAAE,GAAG;AACpB,yBAAK;AACL,2BAAO,MAAM,CAAC,EAAE,EAAE,EAAE,IAAI,GAAE,EAAE,IAAI;AAChC,sBAAE,EAAE,EAAE;AACN,sBAAE,EAAE,KAAK;AAAA,kBACX;AACA,oBAAE,EAAE,KAAK,GAAG,EAAE;AAAA,gBAChB;AAEA,uBAAO,CAAC,EAAE,CAAC,IAAI,GAAE,MAAM;AAAA,cACzB,OAAO;AACL;AAAA,cACF;AAAA,YACF;AAGA,eAAG,IAAI,IAAI,MAAM,IAAI,EAAE;AAGvB,gBAAI,EAAE,CAAC,KAAK,IAAK,GAAE,EAAE,IAAI,EAAE,EAAE,KAAK;AAAA,gBAC7B,KAAI,CAAC,EAAE,EAAE,CAAC;AAAA,UAEjB,UAAU,OAAO,MAAM,EAAE,CAAC,MAAM,cAAc;AAG9C,cAAI,CAAC,GAAG,CAAC,KAAK,MAAM,GAAG;AAGrB,eAAG,MAAM;AACT,cAAE;AAAA,UACJ;AAGA,cAAI,KAAK,EAAG,OAAM,GAAG,IAAIA,KAAI,IAAI,EAAE,CAAC,MAAM,SAAS;AAEnD,iBAAO;AAAA,QACT;AAMA,UAAE,KAAK,SAAU,GAAG;AAClB,iBAAO,CAAC,KAAK,IAAI,CAAC;AAAA,QACpB;AAOA,UAAE,KAAK,SAAU,GAAG;AAClB,iBAAO,KAAK,IAAI,CAAC,IAAI;AAAA,QACvB;AAOA,UAAE,MAAM,SAAU,GAAG;AACnB,iBAAO,KAAK,IAAI,CAAC,IAAI;AAAA,QACvB;AAMA,UAAE,KAAK,SAAU,GAAG;AAClB,iBAAO,KAAK,IAAI,CAAC,IAAI;AAAA,QACvB;AAOA,UAAE,MAAM,SAAU,GAAG;AACnB,iBAAO,KAAK,IAAI,CAAC,IAAI;AAAA,QACvB;AAMA,UAAE,QAAQ,EAAE,MAAM,SAAU,GAAG;AAC7B,cAAI,GAAG,GAAG,GAAG,MACX,IAAI,MACJA,OAAM,EAAE,aACR,IAAI,EAAE,GACN,KAAK,IAAI,IAAIA,KAAI,CAAC,GAAG;AAGvB,cAAI,KAAK,GAAG;AACV,cAAE,IAAI,CAAC;AACP,mBAAO,EAAE,KAAK,CAAC;AAAA,UACjB;AAEA,cAAI,KAAK,EAAE,EAAE,MAAM,GACjB,KAAK,EAAE,GACP,KAAK,EAAE,GACP,KAAK,EAAE;AAGT,cAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG;AAGpB,mBAAO,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,KAAK,IAAIA,KAAI,GAAG,CAAC,IAAI,IAAI,CAAC;AAAA,UACtD;AAGA,cAAI,IAAI,KAAK,IAAI;AAEf,gBAAI,OAAO,IAAI,GAAG;AAChB,kBAAI,CAAC;AACL,kBAAI;AAAA,YACN,OAAO;AACL,mBAAK;AACL,kBAAI;AAAA,YACN;AAEA,cAAE,QAAQ;AACV,iBAAK,IAAI,GAAG,MAAM,GAAE,KAAK,CAAC;AAC1B,cAAE,QAAQ;AAAA,UACZ,OAAO;AAGL,kBAAM,OAAO,GAAG,SAAS,GAAG,UAAU,KAAK,IAAI;AAE/C,iBAAK,IAAI,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,kBAAI,GAAG,CAAC,KAAK,GAAG,CAAC,GAAG;AAClB,uBAAO,GAAG,CAAC,IAAI,GAAG,CAAC;AACnB;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAGA,cAAI,MAAM;AACR,gBAAI;AACJ,iBAAK;AACL,iBAAK;AACL,cAAE,IAAI,CAAC,EAAE;AAAA,UACX;AAMA,eAAK,KAAK,IAAI,GAAG,WAAW,IAAI,GAAG,WAAW,EAAG,QAAO,MAAM,IAAG,GAAG,IAAI;AAGxE,eAAK,IAAI,GAAG,IAAI,KAAI;AAClB,gBAAI,GAAG,EAAE,CAAC,IAAI,GAAG,CAAC,GAAG;AACnB,mBAAK,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,IAAG,CAAC,IAAI;AACpC,gBAAE,GAAG,CAAC;AACN,iBAAG,CAAC,KAAK;AAAA,YACX;AAEA,eAAG,CAAC,KAAK,GAAG,CAAC;AAAA,UACf;AAGA,iBAAO,GAAG,EAAE,CAAC,MAAM,IAAI,IAAG,IAAI;AAG9B,iBAAO,GAAG,CAAC,MAAM,KAAI;AACnB,eAAG,MAAM;AACT,cAAE;AAAA,UACJ;AAEA,cAAI,CAAC,GAAG,CAAC,GAAG;AAGV,cAAE,IAAI;AAGN,iBAAK,CAAC,KAAK,CAAC;AAAA,UACd;AAEA,YAAE,IAAI;AACN,YAAE,IAAI;AAEN,iBAAO;AAAA,QACT;AAMA,UAAE,MAAM,SAAU,GAAG;AACnB,cAAI,MACF,IAAI,MACJA,OAAM,EAAE,aACR,IAAI,EAAE,GACN,KAAK,IAAI,IAAIA,KAAI,CAAC,GAAG;AAEvB,cAAI,CAAC,EAAE,EAAE,CAAC,EAAG,OAAM,MAAM,WAAW;AAEpC,YAAE,IAAI,EAAE,IAAI;AACZ,iBAAO,EAAE,IAAI,CAAC,KAAK;AACnB,YAAE,IAAI;AACN,YAAE,IAAI;AAEN,cAAI,KAAM,QAAO,IAAIA,KAAI,CAAC;AAE1B,cAAIA,KAAI;AACR,cAAIA,KAAI;AACR,UAAAA,KAAI,KAAKA,KAAI,KAAK;AAClB,cAAI,EAAE,IAAI,CAAC;AACX,UAAAA,KAAI,KAAK;AACT,UAAAA,KAAI,KAAK;AAET,iBAAO,KAAK,MAAM,EAAE,MAAM,CAAC,CAAC;AAAA,QAC9B;AAMA,UAAE,OAAO,EAAE,MAAM,SAAU,GAAG;AAC5B,cAAI,GACF,IAAI,MACJA,OAAM,EAAE,aACR,IAAI,EAAE,GACN,KAAK,IAAI,IAAIA,KAAI,CAAC,GAAG;AAGvB,cAAI,KAAK,GAAG;AACV,cAAE,IAAI,CAAC;AACP,mBAAO,EAAE,MAAM,CAAC;AAAA,UAClB;AAEA,cAAI,KAAK,EAAE,GACT,KAAK,EAAE,GACP,KAAK,EAAE,GACP,KAAK,EAAE;AAGT,cAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,EAAG,QAAO,GAAG,CAAC,IAAI,IAAI,IAAIA,KAAI,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;AAElE,eAAK,GAAG,MAAM;AAId,cAAI,IAAI,KAAK,IAAI;AACf,gBAAI,IAAI,GAAG;AACT,mBAAK;AACL,kBAAI;AAAA,YACN,OAAO;AACL,kBAAI,CAAC;AACL,kBAAI;AAAA,YACN;AAEA,cAAE,QAAQ;AACV,mBAAO,MAAM,GAAE,KAAK,CAAC;AACrB,cAAE,QAAQ;AAAA,UACZ;AAGA,cAAI,GAAG,SAAS,GAAG,SAAS,GAAG;AAC7B,gBAAI;AACJ,iBAAK;AACL,iBAAK;AAAA,UACP;AAEA,cAAI,GAAG;AAGP,eAAK,IAAI,GAAG,GAAG,GAAG,CAAC,KAAK,GAAI,MAAK,GAAG,EAAE,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,KAAK,KAAK;AAIrE,cAAI,GAAG;AACL,eAAG,QAAQ,CAAC;AACZ,cAAE;AAAA,UACJ;AAGA,eAAK,IAAI,GAAG,QAAQ,GAAG,EAAE,CAAC,MAAM,IAAI,IAAG,IAAI;AAE3C,YAAE,IAAI;AACN,YAAE,IAAI;AAEN,iBAAO;AAAA,QACT;AAUA,UAAE,MAAM,SAAU,GAAG;AACnB,cAAI,IAAI,MACN,MAAM,IAAI,EAAE,YAAY,CAAC,GACzB,IAAI,KACJ,QAAQ,IAAI;AAEd,cAAI,MAAM,CAAC,CAAC,KAAK,IAAI,CAAC,aAAa,IAAI,UAAW,OAAM,MAAM,UAAU,UAAU;AAClF,cAAI,MAAO,KAAI,CAAC;AAEhB,qBAAS;AACP,gBAAI,IAAI,EAAG,KAAI,EAAE,MAAM,CAAC;AACxB,kBAAM;AACN,gBAAI,CAAC,EAAG;AACR,gBAAI,EAAE,MAAM,CAAC;AAAA,UACf;AAEA,iBAAO,QAAQ,IAAI,IAAI,CAAC,IAAI;AAAA,QAC9B;AAaA,UAAE,QAAQ,SAAU,IAAI,IAAI;AAC1B,cAAIA,OAAM,KAAK;AACf,cAAI,OAAO,UAAW,MAAK;AAAA,mBAClB,OAAO,CAAC,CAAC,MAAM,KAAK,CAAC,UAAU,KAAK,OAAQ,OAAM,MAAM,UAAU;AAC3E,iBAAO,MAAM,IAAIA,KAAI,IAAI,GAAG,IAAI,OAAO,YAAYA,KAAI,KAAK,EAAE;AAAA,QAChE;AAOA,UAAE,OAAO,WAAY;AACnB,cAAI,GAAG,GAAG,GACR,IAAI,MACJA,OAAM,EAAE,aACR,IAAI,EAAE,GACN,IAAI,EAAE,GACN,OAAO,IAAIA,KAAI,GAAG;AAGpB,cAAI,CAAC,EAAE,EAAE,CAAC,EAAG,QAAO,IAAIA,KAAI,CAAC;AAG7B,cAAI,IAAI,EAAG,OAAM,MAAMC,QAAO,gBAAgB;AAG9C,cAAI,KAAK,KAAK,IAAI,EAAE;AAIpB,cAAI,MAAM,KAAK,MAAM,IAAI,GAAG;AAC1B,gBAAI,EAAE,EAAE,KAAK,EAAE;AACf,gBAAI,EAAE,EAAE,SAAS,IAAI,GAAI,MAAK;AAC9B,gBAAI,KAAK,KAAK,CAAC;AACf,kBAAM,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI;AACtC,gBAAI,IAAID,MAAK,KAAK,IAAI,IAAI,QAAQ,IAAI,EAAE,cAAc,GAAG,MAAM,GAAG,EAAE,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC;AAAA,UAC5F,OAAO;AACL,gBAAI,IAAIA,KAAI,CAAC;AAAA,UACf;AAEA,cAAI,EAAE,KAAKA,KAAI,MAAM;AAGrB,aAAG;AACD,gBAAI;AACJ,gBAAI,KAAK,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;AAAA,UACjC,SAAS,EAAE,EAAE,MAAM,GAAG,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,MAAM,GAAG,CAAC,EAAE,KAAK,EAAE;AAE7D,iBAAO,MAAM,GAAGA,KAAI,MAAM,GAAGA,KAAI,EAAE;AAAA,QACrC;AAMA,UAAE,QAAQ,EAAE,MAAM,SAAU,GAAG;AAC7B,cAAI,GACF,IAAI,MACJA,OAAM,EAAE,aACR,KAAK,EAAE,GACP,MAAM,IAAI,IAAIA,KAAI,CAAC,GAAG,GACtB,IAAI,GAAG,QACP,IAAI,GAAG,QACP,IAAI,EAAE,GACN,IAAI,EAAE;AAGR,YAAE,IAAI,EAAE,KAAK,EAAE,IAAI,IAAI;AAGvB,cAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,EAAG,QAAO,IAAIA,KAAI,EAAE,IAAI,CAAC;AAG5C,YAAE,IAAI,IAAI;AAGV,cAAI,IAAI,GAAG;AACT,gBAAI;AACJ,iBAAK;AACL,iBAAK;AACL,gBAAI;AACJ,gBAAI;AACJ,gBAAI;AAAA,UACN;AAGA,eAAK,IAAI,IAAI,MAAM,IAAI,IAAI,CAAC,GAAG,MAAM,GAAE,CAAC,IAAI;AAK5C,eAAK,IAAI,GAAG,OAAM;AAChB,gBAAI;AAGJ,iBAAK,IAAI,IAAI,GAAG,IAAI,KAAI;AAGtB,kBAAI,EAAE,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI;AACnC,gBAAE,GAAG,IAAI,IAAI;AAGb,kBAAI,IAAI,KAAK;AAAA,YACf;AAEA,cAAE,CAAC,KAAK,EAAE,CAAC,IAAI,KAAK;AAAA,UACtB;AAGA,cAAI,EAAG,GAAE,EAAE;AAAA,cACN,GAAE,MAAM;AAGb,eAAK,IAAI,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC,IAAI,GAAE,IAAI;AACnC,YAAE,IAAI;AAEN,iBAAO;AAAA,QACT;AASA,UAAE,gBAAgB,SAAU,IAAI;AAC9B,iBAAOG,WAAU,MAAM,GAAG,IAAI,EAAE;AAAA,QAClC;AAYA,UAAE,UAAU,SAAU,IAAI;AACxB,iBAAOA,WAAU,MAAM,GAAG,IAAI,KAAK,IAAI,EAAE;AAAA,QAC3C;AAUA,UAAE,cAAc,SAAU,IAAI;AAC5B,iBAAOA,WAAU,MAAM,GAAG,IAAI,KAAK,CAAC;AAAA,QACtC;AASA,UAAE,WAAW,WAAY;AACvB,iBAAOA,WAAU,IAAI;AAAA,QACvB;AASA,UAAE,UAAU,EAAE,SAAS,WAAY;AACjC,iBAAOA,WAAU,MAAM,CAAC;AAAA,QAC1B;AAMA,QAAAH,OAAM,MAAM;AAEZ,QAAAA,KAAI,SAAS,IAAIA,KAAI,MAAMA;AAG3B,YAAI,OAAO,WAAW,cAAc,OAAO,KAAK;AAC9C,iBAAO,WAAY;AAAE,mBAAOA;AAAA,UAAK,CAAC;AAAA,QAGpC,WAAW,OAAO,WAAW,eAAe,OAAO,SAAS;AAC1D,iBAAO,UAAUA;AAAA,QAGnB,OAAO;AACL,iBAAO,MAAMA;AAAA,QACf;AAAA,MACF,GAAG,OAAI;AAAA;AAAA;;;AC56BP;AAAA;AAAA;AAWA,eAASI,UAAS,MAAM;AACtB;AAkDA,aAAK,UAAU,WAAW,SAASA,UAAS,IAAI,IAAI,KAAK;AAEvD,cAAI,CAAC,KAAK,KAAK,KAAK,MAAM,EAAG,QAAO,KAAK,SAAS;AAElD,cAAI,KAAK,IAAI,IAAI,GACf,GACA,IACA,MACA,MACA,OACA,MACA,MACA,OACA,QACA,OACA,QACA,OAAO,KAAK,UAAU,CAAC,GACvB,OAAO,KAAK,YAAY,UAAU,CAAC;AAErC,cAAI,MAAM,GAAG;AACX,gBAAI,OAAO,MAAM,UAAU;AACzB,oBAAM;AACN,mBAAK;AAAA,YACP,WAAW,MAAM,GAAG;AAClB,kBAAI,OAAO,MAAM,UAAU;AACzB,sBAAM;AACN,qBAAK;AAAA,cACP,WAAW,OAAO,OAAO,UAAU;AACjC,sBAAM,CAAC;AAAA,cACT;AAAA,YACF,OAAO;AACL,oBAAM,CAAC;AAAA,YACT;AAAA,UACF,OAAO;AACL,kBAAM,CAAC;AAAA,UACT;AAEA,gBAAM,KAAK,QAAQ,IAAI,EAAE,EAAE,MAAM,GAAG;AACpC,iBAAO,IAAI,CAAC;AACZ,kBAAQ,IAAI,CAAC;AACb,iBAAO,KAAK,IAAI,IAAI,KAAK,MAAM,CAAC,IAAI;AACpC,eAAK,KAAK;AAEV,iBAAO,IAAI;AACX,cAAI,QAAQ,GAAG;AACb,mBAAO,KAAK;AACZ,gBAAI,QAAQ,GAAG;AACb,qBAAO,KAAK;AACZ,kBAAI,QAAQ,EAAG,QAAO;AAAA,YACxB;AAAA,UACF;AAEA,iBAAO,IAAI;AACX,cAAI,QAAQ,GAAG;AACb,mBAAO,KAAK;AACZ,gBAAI,QAAQ,EAAG,QAAO,KAAK;AAAA,UAC7B;AAEA,cAAI,MAAM;AACR,oBAAQ,IAAI;AACZ,gBAAI,SAAS,GAAG;AACd,sBAAQ,KAAK;AACb,kBAAI,SAAS,GAAG;AACd,wBAAQ,KAAK;AACb,oBAAI,SAAS,EAAG,SAAQ;AAAA,cAC1B;AAAA,YACF;AAEA,qBAAS,IAAI;AACb,gBAAI,UAAU,GAAG;AACf,uBAAS,KAAK;AACd,kBAAI,UAAU,GAAG;AACf,yBAAS,KAAK;AACd,oBAAI,UAAU,EAAG,UAAS;AAAA,cAC5B;AAAA,YACF;AAEA,gBAAI,QAAQ;AACV,mBAAK,CAAC;AACN,mBAAK,CAAC;AACN,oBAAM;AAAA,YACR,OAAO;AACL,mBAAK,CAAC;AACN,mBAAK,CAAC;AAAA,YACR;AAEA,gBAAI,KAAK,KAAK,KAAK,GAAG;AACpB,kBAAI,KAAK,MAAM;AACf,qBAAO,KAAK,OAAO,GAAG,CAAC;AACvB,qBAAO,IAAI,IAAI,KAAK,GAAI,SAAQ,OAAO,KAAK,OAAO,GAAG,EAAE;AACxD,kBAAI,KAAK,EAAG,SAAQ,OAAO,KAAK,MAAM,CAAC;AACvC,kBAAI,KAAK,IAAI,EAAG,QAAO,MAAM;AAAA,YAC/B;AAAA,UACF;AAEA,cAAI,OAAO;AACT,oBAAQ,IAAI;AACZ,gBAAI,SAAS,GAAG;AACd,sBAAQ,KAAK;AACb,kBAAI,SAAS,EAAG,SAAQ,KAAK;AAAA,YAC/B;AAEA,gBAAI,OAAO;AACT,uBAAS,IAAI;AACb,kBAAI,UAAU,GAAG;AACf,yBAAS,KAAK;AACd,oBAAI,UAAU,GAAG;AACf,2BAAS,KAAK;AACd,sBAAI,UAAU,EAAG,UAAS;AAAA,gBAC5B;AAAA,cACF;AAEA,uBAAS,CAAC;AAEV,kBAAI,QAAQ;AACV,wBAAQ,MAAM,QAAQ,IAAI,OAAO,SAAS,SAAS,QAAQ,GAAG,GAAG,OAAO,KAAK;AAAA,cAC/E;AAAA,YACF;AAEA,mBAAO,OAAO,OAAO;AAAA,UACvB,OAAO;AAEL,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,aAAK,SAAS;AAAA,UACZ,kBAAkB;AAAA,UAClB,gBAAgB;AAAA,UAChB,WAAW;AAAA,UACX,oBAAoB;AAAA,UACpB,wBAAwB;AAAA,UACxB,mBAAmB;AAAA,QACrB;AAEA,eAAO;AAAA,MACT;AAEA,UAAI,OAAO,WAAW,eAAe,OAAO,QAAS,QAAO,UAAUA;AAAA;AAAA;;;;;;;;;;ACxMtE;AAAA;AAAA;AAAA,OAAC,SAAUC,SAAQC,UAAS;AAC1B;AAGA,iBAASC,QAAQ,KAAK,KAAK;AACzB,cAAI,CAAC,IAAK,OAAM,IAAI,MAAM,OAAO,kBAAkB;AAAA,QACrD;AAIA,iBAAS,SAAU,MAAM,WAAW;AAClC,eAAK,SAAS;AACd,cAAI,WAAW,WAAY;AAAA,UAAC;AAC5B,mBAAS,YAAY,UAAU;AAC/B,eAAK,YAAY,IAAI,SAAS;AAC9B,eAAK,UAAU,cAAc;AAAA,QAC/B;AAIA,iBAASC,IAAIC,SAAQ,MAAM,QAAQ;AACjC,cAAID,IAAG,KAAKC,OAAM,GAAG;AACnB,mBAAOA;AAAA,UACT;AAEA,eAAK,WAAW;AAChB,eAAK,QAAQ;AACb,eAAK,SAAS;AAGd,eAAK,MAAM;AAEX,cAAIA,YAAW,MAAM;AACnB,gBAAI,SAAS,QAAQ,SAAS,MAAM;AAClC,uBAAS;AACT,qBAAO;AAAA,YACT;AAEA,iBAAK,MAAMA,WAAU,GAAG,QAAQ,IAAI,UAAU,IAAI;AAAA,UACpD;AAAA,QACF;AACA,YAAI,OAAOJ,YAAW,UAAU;AAC9B,UAAAA,QAAO,UAAUG;AAAA,QACnB,OAAO;AACL,UAAAF,SAAQ,KAAKE;AAAA,QACf;AAEA,QAAAA,IAAG,KAAKA;AACR,QAAAA,IAAG,WAAW;AAEd,YAAIE;AACJ,YAAI;AACF,cAAI,OAAO,WAAW,eAAe,OAAO,OAAO,WAAW,aAAa;AACzE,YAAAA,UAAS,OAAO;AAAA,UAClB,OAAO;AACL,YAAAA,UAAS,iBAAkB;AAAA,UAC7B;AAAA,QACF,SAAS,GAAG;AAAA,QACZ;AAEA,QAAAF,IAAG,OAAO,SAAS,KAAM,KAAK;AAC5B,cAAI,eAAeA,KAAI;AACrB,mBAAO;AAAA,UACT;AAEA,iBAAO,QAAQ,QAAQ,OAAO,QAAQ,YACpC,IAAI,YAAY,aAAaA,IAAG,YAAY,MAAM,QAAQ,IAAI,KAAK;AAAA,QACvE;AAEA,QAAAA,IAAG,MAAM,SAAS,IAAK,MAAM,OAAO;AAClC,cAAI,KAAK,IAAI,KAAK,IAAI,EAAG,QAAO;AAChC,iBAAO;AAAA,QACT;AAEA,QAAAA,IAAG,MAAM,SAAS,IAAK,MAAM,OAAO;AAClC,cAAI,KAAK,IAAI,KAAK,IAAI,EAAG,QAAO;AAChC,iBAAO;AAAA,QACT;AAEA,QAAAA,IAAG,UAAU,QAAQ,SAAS,KAAMC,SAAQ,MAAM,QAAQ;AACxD,cAAI,OAAOA,YAAW,UAAU;AAC9B,mBAAO,KAAK,YAAYA,SAAQ,MAAM,MAAM;AAAA,UAC9C;AAEA,cAAI,OAAOA,YAAW,UAAU;AAC9B,mBAAO,KAAK,WAAWA,SAAQ,MAAM,MAAM;AAAA,UAC7C;AAEA,cAAI,SAAS,OAAO;AAClB,mBAAO;AAAA,UACT;AACA,UAAAF,QAAO,UAAU,OAAO,MAAM,QAAQ,KAAK,QAAQ,EAAE;AAErD,UAAAE,UAASA,QAAO,SAAS,EAAE,QAAQ,QAAQ,EAAE;AAC7C,cAAI,QAAQ;AACZ,cAAIA,QAAO,CAAC,MAAM,KAAK;AACrB;AACA,iBAAK,WAAW;AAAA,UAClB;AAEA,cAAI,QAAQA,QAAO,QAAQ;AACzB,gBAAI,SAAS,IAAI;AACf,mBAAK,UAAUA,SAAQ,OAAO,MAAM;AAAA,YACtC,OAAO;AACL,mBAAK,WAAWA,SAAQ,MAAM,KAAK;AACnC,kBAAI,WAAW,MAAM;AACnB,qBAAK,WAAW,KAAK,QAAQ,GAAG,MAAM,MAAM;AAAA,cAC9C;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAEA,QAAAD,IAAG,UAAU,cAAc,SAAS,YAAaC,SAAQ,MAAM,QAAQ;AACrE,cAAIA,UAAS,GAAG;AACd,iBAAK,WAAW;AAChB,YAAAA,UAAS,CAACA;AAAA,UACZ;AACA,cAAIA,UAAS,UAAW;AACtB,iBAAK,QAAQ,CAACA,UAAS,QAAS;AAChC,iBAAK,SAAS;AAAA,UAChB,WAAWA,UAAS,kBAAkB;AACpC,iBAAK,QAAQ;AAAA,cACXA,UAAS;AAAA,cACRA,UAAS,WAAa;AAAA,YACzB;AACA,iBAAK,SAAS;AAAA,UAChB,OAAO;AACL,YAAAF,QAAOE,UAAS,gBAAgB;AAChC,iBAAK,QAAQ;AAAA,cACXA,UAAS;AAAA,cACRA,UAAS,WAAa;AAAA,cACvB;AAAA,YACF;AACA,iBAAK,SAAS;AAAA,UAChB;AAEA,cAAI,WAAW,KAAM;AAGrB,eAAK,WAAW,KAAK,QAAQ,GAAG,MAAM,MAAM;AAAA,QAC9C;AAEA,QAAAD,IAAG,UAAU,aAAa,SAAS,WAAYC,SAAQ,MAAM,QAAQ;AAEnE,UAAAF,QAAO,OAAOE,QAAO,WAAW,QAAQ;AACxC,cAAIA,QAAO,UAAU,GAAG;AACtB,iBAAK,QAAQ,CAAC,CAAC;AACf,iBAAK,SAAS;AACd,mBAAO;AAAA,UACT;AAEA,eAAK,SAAS,KAAK,KAAKA,QAAO,SAAS,CAAC;AACzC,eAAK,QAAQ,IAAI,MAAM,KAAK,MAAM;AAClC,mBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,iBAAK,MAAM,CAAC,IAAI;AAAA,UAClB;AAEA,cAAI,GAAG;AACP,cAAI,MAAM;AACV,cAAI,WAAW,MAAM;AACnB,iBAAK,IAAIA,QAAO,SAAS,GAAG,IAAI,GAAG,KAAK,GAAG,KAAK,GAAG;AACjD,kBAAIA,QAAO,CAAC,IAAKA,QAAO,IAAI,CAAC,KAAK,IAAMA,QAAO,IAAI,CAAC,KAAK;AACzD,mBAAK,MAAM,CAAC,KAAM,KAAK,MAAO;AAC9B,mBAAK,MAAM,IAAI,CAAC,IAAK,MAAO,KAAK,MAAQ;AACzC,qBAAO;AACP,kBAAI,OAAO,IAAI;AACb,uBAAO;AACP;AAAA,cACF;AAAA,YACF;AAAA,UACF,WAAW,WAAW,MAAM;AAC1B,iBAAK,IAAI,GAAG,IAAI,GAAG,IAAIA,QAAO,QAAQ,KAAK,GAAG;AAC5C,kBAAIA,QAAO,CAAC,IAAKA,QAAO,IAAI,CAAC,KAAK,IAAMA,QAAO,IAAI,CAAC,KAAK;AACzD,mBAAK,MAAM,CAAC,KAAM,KAAK,MAAO;AAC9B,mBAAK,MAAM,IAAI,CAAC,IAAK,MAAO,KAAK,MAAQ;AACzC,qBAAO;AACP,kBAAI,OAAO,IAAI;AACb,uBAAO;AACP;AAAA,cACF;AAAA,YACF;AAAA,UACF;AACA,iBAAO,KAAK,OAAO;AAAA,QACrB;AAEA,iBAAS,cAAe,QAAQ,OAAO;AACrC,cAAI,IAAI,OAAO,WAAW,KAAK;AAE/B,cAAI,KAAK,MAAM,KAAK,IAAI;AACtB,mBAAO,IAAI;AAAA,UAEb,WAAW,KAAK,MAAM,KAAK,IAAI;AAC7B,mBAAO,IAAI;AAAA,UAEb,WAAW,KAAK,MAAM,KAAK,KAAK;AAC9B,mBAAO,IAAI;AAAA,UACb,OAAO;AACL,YAAAF,QAAO,OAAO,0BAA0B,MAAM;AAAA,UAChD;AAAA,QACF;AAEA,iBAAS,aAAc,QAAQ,YAAY,OAAO;AAChD,cAAI,IAAI,cAAc,QAAQ,KAAK;AACnC,cAAI,QAAQ,KAAK,YAAY;AAC3B,iBAAK,cAAc,QAAQ,QAAQ,CAAC,KAAK;AAAA,UAC3C;AACA,iBAAO;AAAA,QACT;AAEA,QAAAC,IAAG,UAAU,YAAY,SAAS,UAAWC,SAAQ,OAAO,QAAQ;AAElE,eAAK,SAAS,KAAK,MAAMA,QAAO,SAAS,SAAS,CAAC;AACnD,eAAK,QAAQ,IAAI,MAAM,KAAK,MAAM;AAClC,mBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,iBAAK,MAAM,CAAC,IAAI;AAAA,UAClB;AAGA,cAAI,MAAM;AACV,cAAI,IAAI;AAER,cAAI;AACJ,cAAI,WAAW,MAAM;AACnB,iBAAK,IAAIA,QAAO,SAAS,GAAG,KAAK,OAAO,KAAK,GAAG;AAC9C,kBAAI,aAAaA,SAAQ,OAAO,CAAC,KAAK;AACtC,mBAAK,MAAM,CAAC,KAAK,IAAI;AACrB,kBAAI,OAAO,IAAI;AACb,uBAAO;AACP,qBAAK;AACL,qBAAK,MAAM,CAAC,KAAK,MAAM;AAAA,cACzB,OAAO;AACL,uBAAO;AAAA,cACT;AAAA,YACF;AAAA,UACF,OAAO;AACL,gBAAI,cAAcA,QAAO,SAAS;AAClC,iBAAK,IAAI,cAAc,MAAM,IAAI,QAAQ,IAAI,OAAO,IAAIA,QAAO,QAAQ,KAAK,GAAG;AAC7E,kBAAI,aAAaA,SAAQ,OAAO,CAAC,KAAK;AACtC,mBAAK,MAAM,CAAC,KAAK,IAAI;AACrB,kBAAI,OAAO,IAAI;AACb,uBAAO;AACP,qBAAK;AACL,qBAAK,MAAM,CAAC,KAAK,MAAM;AAAA,cACzB,OAAO;AACL,uBAAO;AAAA,cACT;AAAA,YACF;AAAA,UACF;AAEA,eAAK,OAAO;AAAA,QACd;AAEA,iBAAS,UAAW,KAAK,OAAO,KAAK,KAAK;AACxC,cAAI,IAAI;AACR,cAAI,IAAI;AACR,cAAI,MAAM,KAAK,IAAI,IAAI,QAAQ,GAAG;AAClC,mBAAS,IAAI,OAAO,IAAI,KAAK,KAAK;AAChC,gBAAI,IAAI,IAAI,WAAW,CAAC,IAAI;AAE5B,iBAAK;AAGL,gBAAI,KAAK,IAAI;AACX,kBAAI,IAAI,KAAK;AAAA,YAGf,WAAW,KAAK,IAAI;AAClB,kBAAI,IAAI,KAAK;AAAA,YAGf,OAAO;AACL,kBAAI;AAAA,YACN;AACA,YAAAF,QAAO,KAAK,KAAK,IAAI,KAAK,mBAAmB;AAC7C,iBAAK;AAAA,UACP;AACA,iBAAO;AAAA,QACT;AAEA,QAAAC,IAAG,UAAU,aAAa,SAAS,WAAYC,SAAQ,MAAM,OAAO;AAElE,eAAK,QAAQ,CAAC,CAAC;AACf,eAAK,SAAS;AAGd,mBAAS,UAAU,GAAG,UAAU,GAAG,WAAW,UAAW,WAAW,MAAM;AACxE;AAAA,UACF;AACA;AACA,oBAAW,UAAU,OAAQ;AAE7B,cAAI,QAAQA,QAAO,SAAS;AAC5B,cAAIE,OAAM,QAAQ;AAClB,cAAI,MAAM,KAAK,IAAI,OAAO,QAAQA,IAAG,IAAI;AAEzC,cAAI,OAAO;AACX,mBAAS,IAAI,OAAO,IAAI,KAAK,KAAK,SAAS;AACzC,mBAAO,UAAUF,SAAQ,GAAG,IAAI,SAAS,IAAI;AAE7C,iBAAK,MAAM,OAAO;AAClB,gBAAI,KAAK,MAAM,CAAC,IAAI,OAAO,UAAW;AACpC,mBAAK,MAAM,CAAC,KAAK;AAAA,YACnB,OAAO;AACL,mBAAK,OAAO,IAAI;AAAA,YAClB;AAAA,UACF;AAEA,cAAIE,SAAQ,GAAG;AACb,gBAAIC,OAAM;AACV,mBAAO,UAAUH,SAAQ,GAAGA,QAAO,QAAQ,IAAI;AAE/C,iBAAK,IAAI,GAAG,IAAIE,MAAK,KAAK;AACxB,cAAAC,QAAO;AAAA,YACT;AAEA,iBAAK,MAAMA,IAAG;AACd,gBAAI,KAAK,MAAM,CAAC,IAAI,OAAO,UAAW;AACpC,mBAAK,MAAM,CAAC,KAAK;AAAA,YACnB,OAAO;AACL,mBAAK,OAAO,IAAI;AAAA,YAClB;AAAA,UACF;AAEA,eAAK,OAAO;AAAA,QACd;AAEA,QAAAJ,IAAG,UAAU,OAAO,SAAS,KAAM,MAAM;AACvC,eAAK,QAAQ,IAAI,MAAM,KAAK,MAAM;AAClC,mBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,iBAAK,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC;AAAA,UAC9B;AACA,eAAK,SAAS,KAAK;AACnB,eAAK,WAAW,KAAK;AACrB,eAAK,MAAM,KAAK;AAAA,QAClB;AAEA,iBAAS,KAAM,MAAM,KAAK;AACxB,eAAK,QAAQ,IAAI;AACjB,eAAK,SAAS,IAAI;AAClB,eAAK,WAAW,IAAI;AACpB,eAAK,MAAM,IAAI;AAAA,QACjB;AAEA,QAAAA,IAAG,UAAU,QAAQ,SAAS,MAAO,MAAM;AACzC,eAAK,MAAM,IAAI;AAAA,QACjB;AAEA,QAAAA,IAAG,UAAU,QAAQ,SAAS,QAAS;AACrC,cAAI,IAAI,IAAIA,IAAG,IAAI;AACnB,eAAK,KAAK,CAAC;AACX,iBAAO;AAAA,QACT;AAEA,QAAAA,IAAG,UAAU,UAAU,SAAS,QAAS,MAAM;AAC7C,iBAAO,KAAK,SAAS,MAAM;AACzB,iBAAK,MAAM,KAAK,QAAQ,IAAI;AAAA,UAC9B;AACA,iBAAO;AAAA,QACT;AAGA,QAAAA,IAAG,UAAU,SAAS,SAAS,QAAS;AACtC,iBAAO,KAAK,SAAS,KAAK,KAAK,MAAM,KAAK,SAAS,CAAC,MAAM,GAAG;AAC3D,iBAAK;AAAA,UACP;AACA,iBAAO,KAAK,UAAU;AAAA,QACxB;AAEA,QAAAA,IAAG,UAAU,YAAY,SAAS,YAAa;AAE7C,cAAI,KAAK,WAAW,KAAK,KAAK,MAAM,CAAC,MAAM,GAAG;AAC5C,iBAAK,WAAW;AAAA,UAClB;AACA,iBAAO;AAAA,QACT;AAIA,YAAI,OAAO,WAAW,eAAe,OAAO,OAAO,QAAQ,YAAY;AACrE,cAAI;AACF,YAAAA,IAAG,UAAU,OAAO,IAAI,4BAA4B,CAAC,IAAI;AAAA,UAC3D,SAAS,GAAG;AACV,YAAAA,IAAG,UAAU,UAAU;AAAA,UACzB;AAAA,QACF,OAAO;AACL,UAAAA,IAAG,UAAU,UAAU;AAAA,QACzB;AAEA,iBAAS,UAAW;AAClB,kBAAQ,KAAK,MAAM,YAAY,WAAW,KAAK,SAAS,EAAE,IAAI;AAAA,QAChE;AAgCA,YAAI,QAAQ;AAAA,UACV;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAEA,YAAI,aAAa;AAAA,UACf;AAAA,UAAG;AAAA,UACH;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAI;AAAA,UAAG;AAAA,UACvB;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAClB;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAClB;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAClB;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,UAAG;AAAA,QACpB;AAEA,YAAI,aAAa;AAAA,UACf;AAAA,UAAG;AAAA,UACH;AAAA,UAAU;AAAA,UAAU;AAAA,UAAU;AAAA,UAAU;AAAA,UAAU;AAAA,UAAU;AAAA,UAC5D;AAAA,UAAU;AAAA,UAAU;AAAA,UAAU;AAAA,UAAU;AAAA,UAAU;AAAA,UAAS;AAAA,UAC3D;AAAA,UAAU;AAAA,UAAU;AAAA,UAAU;AAAA,UAAU;AAAA,UAAU;AAAA,UAAS;AAAA,UAC3D;AAAA,UAAS;AAAA,UAAS;AAAA,UAAS;AAAA,UAAU;AAAA,UAAU;AAAA,UAAU;AAAA,UACzD;AAAA,UAAU;AAAA,UAAU;AAAA,UAAU;AAAA,UAAU;AAAA,UAAU;AAAA,UAAU;AAAA,QAC9D;AAEA,QAAAA,IAAG,UAAU,WAAW,SAASK,UAAU,MAAMC,UAAS;AACxD,iBAAO,QAAQ;AACf,UAAAA,WAAUA,WAAU,KAAK;AAEzB,cAAI;AACJ,cAAI,SAAS,MAAM,SAAS,OAAO;AACjC,kBAAM;AACN,gBAAI,MAAM;AACV,gBAAI,QAAQ;AACZ,qBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,kBAAI,IAAI,KAAK,MAAM,CAAC;AACpB,kBAAI,SAAU,KAAK,MAAO,SAAS,UAAU,SAAS,EAAE;AACxD,sBAAS,MAAO,KAAK,MAAQ;AAC7B,qBAAO;AACP,kBAAI,OAAO,IAAI;AACb,uBAAO;AACP;AAAA,cACF;AACA,kBAAI,UAAU,KAAK,MAAM,KAAK,SAAS,GAAG;AACxC,sBAAM,MAAM,IAAI,KAAK,MAAM,IAAI,OAAO;AAAA,cACxC,OAAO;AACL,sBAAM,OAAO;AAAA,cACf;AAAA,YACF;AACA,gBAAI,UAAU,GAAG;AACf,oBAAM,MAAM,SAAS,EAAE,IAAI;AAAA,YAC7B;AACA,mBAAO,IAAI,SAASA,aAAY,GAAG;AACjC,oBAAM,MAAM;AAAA,YACd;AACA,gBAAI,KAAK,aAAa,GAAG;AACvB,oBAAM,MAAM;AAAA,YACd;AACA,mBAAO;AAAA,UACT;AAEA,cAAI,UAAU,OAAO,MAAM,QAAQ,KAAK,QAAQ,IAAI;AAElD,gBAAI,YAAY,WAAW,IAAI;AAE/B,gBAAI,YAAY,WAAW,IAAI;AAC/B,kBAAM;AACN,gBAAI,IAAI,KAAK,MAAM;AACnB,cAAE,WAAW;AACb,mBAAO,CAAC,EAAE,OAAO,GAAG;AAClB,kBAAI,IAAI,EAAE,MAAM,SAAS,EAAE,SAAS,IAAI;AACxC,kBAAI,EAAE,MAAM,SAAS;AAErB,kBAAI,CAAC,EAAE,OAAO,GAAG;AACf,sBAAM,MAAM,YAAY,EAAE,MAAM,IAAI,IAAI;AAAA,cAC1C,OAAO;AACL,sBAAM,IAAI;AAAA,cACZ;AAAA,YACF;AACA,gBAAI,KAAK,OAAO,GAAG;AACjB,oBAAM,MAAM;AAAA,YACd;AACA,mBAAO,IAAI,SAASA,aAAY,GAAG;AACjC,oBAAM,MAAM;AAAA,YACd;AACA,gBAAI,KAAK,aAAa,GAAG;AACvB,oBAAM,MAAM;AAAA,YACd;AACA,mBAAO;AAAA,UACT;AAEA,UAAAP,QAAO,OAAO,iCAAiC;AAAA,QACjD;AAEA,QAAAC,IAAG,UAAU,WAAW,SAAS,WAAY;AAC3C,cAAI,MAAM,KAAK,MAAM,CAAC;AACtB,cAAI,KAAK,WAAW,GAAG;AACrB,mBAAO,KAAK,MAAM,CAAC,IAAI;AAAA,UACzB,WAAW,KAAK,WAAW,KAAK,KAAK,MAAM,CAAC,MAAM,GAAM;AAEtD,mBAAO,mBAAoB,KAAK,MAAM,CAAC,IAAI;AAAA,UAC7C,WAAW,KAAK,SAAS,GAAG;AAC1B,YAAAD,QAAO,OAAO,4CAA4C;AAAA,UAC5D;AACA,iBAAQ,KAAK,aAAa,IAAK,CAAC,MAAM;AAAA,QACxC;AAEA,QAAAC,IAAG,UAAU,SAAS,SAAS,SAAU;AACvC,iBAAO,KAAK,SAAS,IAAI,CAAC;AAAA,QAC5B;AAEA,YAAIE,SAAQ;AACV,UAAAF,IAAG,UAAU,WAAW,SAAS,SAAU,QAAQ,QAAQ;AACzD,mBAAO,KAAK,YAAYE,SAAQ,QAAQ,MAAM;AAAA,UAChD;AAAA,QACF;AAEA,QAAAF,IAAG,UAAU,UAAU,SAAS,QAAS,QAAQ,QAAQ;AACvD,iBAAO,KAAK,YAAY,OAAO,QAAQ,MAAM;AAAA,QAC/C;AAEA,YAAI,WAAW,SAASO,UAAU,WAAW,MAAM;AACjD,cAAI,UAAU,aAAa;AACzB,mBAAO,UAAU,YAAY,IAAI;AAAA,UACnC;AACA,iBAAO,IAAI,UAAU,IAAI;AAAA,QAC3B;AAEA,QAAAP,IAAG,UAAU,cAAc,SAAS,YAAa,WAAW,QAAQ,QAAQ;AAC1E,eAAK,OAAO;AAEZ,cAAI,aAAa,KAAK,WAAW;AACjC,cAAI,YAAY,UAAU,KAAK,IAAI,GAAG,UAAU;AAChD,UAAAD,QAAO,cAAc,WAAW,uCAAuC;AACvE,UAAAA,QAAO,YAAY,GAAG,6BAA6B;AAEnD,cAAI,MAAM,SAAS,WAAW,SAAS;AACvC,cAAI,UAAU,WAAW,OAAO,OAAO;AACvC,eAAK,iBAAiB,OAAO,EAAE,KAAK,UAAU;AAC9C,iBAAO;AAAA,QACT;AAEA,QAAAC,IAAG,UAAU,iBAAiB,SAAS,eAAgB,KAAK,YAAY;AACtE,cAAI,WAAW;AACf,cAAI,QAAQ;AAEZ,mBAAS,IAAI,GAAG,QAAQ,GAAG,IAAI,KAAK,QAAQ,KAAK;AAC/C,gBAAI,OAAQ,KAAK,MAAM,CAAC,KAAK,QAAS;AAEtC,gBAAI,UAAU,IAAI,OAAO;AACzB,gBAAI,WAAW,IAAI,QAAQ;AACzB,kBAAI,UAAU,IAAK,QAAQ,IAAK;AAAA,YAClC;AACA,gBAAI,WAAW,IAAI,QAAQ;AACzB,kBAAI,UAAU,IAAK,QAAQ,KAAM;AAAA,YACnC;AAEA,gBAAI,UAAU,GAAG;AACf,kBAAI,WAAW,IAAI,QAAQ;AACzB,oBAAI,UAAU,IAAK,QAAQ,KAAM;AAAA,cACnC;AACA,sBAAQ;AACR,sBAAQ;AAAA,YACV,OAAO;AACL,sBAAQ,SAAS;AACjB,uBAAS;AAAA,YACX;AAAA,UACF;AAEA,cAAI,WAAW,IAAI,QAAQ;AACzB,gBAAI,UAAU,IAAI;AAElB,mBAAO,WAAW,IAAI,QAAQ;AAC5B,kBAAI,UAAU,IAAI;AAAA,YACpB;AAAA,UACF;AAAA,QACF;AAEA,QAAAA,IAAG,UAAU,iBAAiB,SAAS,eAAgB,KAAK,YAAY;AACtE,cAAI,WAAW,IAAI,SAAS;AAC5B,cAAI,QAAQ;AAEZ,mBAAS,IAAI,GAAG,QAAQ,GAAG,IAAI,KAAK,QAAQ,KAAK;AAC/C,gBAAI,OAAQ,KAAK,MAAM,CAAC,KAAK,QAAS;AAEtC,gBAAI,UAAU,IAAI,OAAO;AACzB,gBAAI,YAAY,GAAG;AACjB,kBAAI,UAAU,IAAK,QAAQ,IAAK;AAAA,YAClC;AACA,gBAAI,YAAY,GAAG;AACjB,kBAAI,UAAU,IAAK,QAAQ,KAAM;AAAA,YACnC;AAEA,gBAAI,UAAU,GAAG;AACf,kBAAI,YAAY,GAAG;AACjB,oBAAI,UAAU,IAAK,QAAQ,KAAM;AAAA,cACnC;AACA,sBAAQ;AACR,sBAAQ;AAAA,YACV,OAAO;AACL,sBAAQ,SAAS;AACjB,uBAAS;AAAA,YACX;AAAA,UACF;AAEA,cAAI,YAAY,GAAG;AACjB,gBAAI,UAAU,IAAI;AAElB,mBAAO,YAAY,GAAG;AACpB,kBAAI,UAAU,IAAI;AAAA,YACpB;AAAA,UACF;AAAA,QACF;AAEA,YAAI,KAAK,OAAO;AACd,UAAAA,IAAG,UAAU,aAAa,SAAS,WAAY,GAAG;AAChD,mBAAO,KAAK,KAAK,MAAM,CAAC;AAAA,UAC1B;AAAA,QACF,OAAO;AACL,UAAAA,IAAG,UAAU,aAAa,SAAS,WAAY,GAAG;AAChD,gBAAI,IAAI;AACR,gBAAI,IAAI;AACR,gBAAI,KAAK,MAAQ;AACf,mBAAK;AACL,qBAAO;AAAA,YACT;AACA,gBAAI,KAAK,IAAM;AACb,mBAAK;AACL,qBAAO;AAAA,YACT;AACA,gBAAI,KAAK,GAAK;AACZ,mBAAK;AACL,qBAAO;AAAA,YACT;AACA,gBAAI,KAAK,GAAM;AACb,mBAAK;AACL,qBAAO;AAAA,YACT;AACA,mBAAO,IAAI;AAAA,UACb;AAAA,QACF;AAEA,QAAAA,IAAG,UAAU,YAAY,SAAS,UAAW,GAAG;AAE9C,cAAI,MAAM,EAAG,QAAO;AAEpB,cAAI,IAAI;AACR,cAAI,IAAI;AACR,eAAK,IAAI,UAAY,GAAG;AACtB,iBAAK;AACL,mBAAO;AAAA,UACT;AACA,eAAK,IAAI,SAAU,GAAG;AACpB,iBAAK;AACL,mBAAO;AAAA,UACT;AACA,eAAK,IAAI,QAAS,GAAG;AACnB,iBAAK;AACL,mBAAO;AAAA,UACT;AACA,eAAK,IAAI,OAAS,GAAG;AACnB,iBAAK;AACL,mBAAO;AAAA,UACT;AACA,eAAK,IAAI,OAAS,GAAG;AACnB;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAGA,QAAAA,IAAG,UAAU,YAAY,SAAS,YAAa;AAC7C,cAAI,IAAI,KAAK,MAAM,KAAK,SAAS,CAAC;AAClC,cAAI,KAAK,KAAK,WAAW,CAAC;AAC1B,kBAAQ,KAAK,SAAS,KAAK,KAAK;AAAA,QAClC;AAEA,iBAAS,WAAY,KAAK;AACxB,cAAI,IAAI,IAAI,MAAM,IAAI,UAAU,CAAC;AAEjC,mBAAS,MAAM,GAAG,MAAM,EAAE,QAAQ,OAAO;AACvC,gBAAI,MAAO,MAAM,KAAM;AACvB,gBAAI,OAAO,MAAM;AAEjB,cAAE,GAAG,IAAK,IAAI,MAAM,GAAG,MAAM,OAAQ;AAAA,UACvC;AAEA,iBAAO;AAAA,QACT;AAGA,QAAAA,IAAG,UAAU,WAAW,SAAS,WAAY;AAC3C,cAAI,KAAK,OAAO,EAAG,QAAO;AAE1B,cAAI,IAAI;AACR,mBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,gBAAI,IAAI,KAAK,UAAU,KAAK,MAAM,CAAC,CAAC;AACpC,iBAAK;AACL,gBAAI,MAAM,GAAI;AAAA,UAChB;AACA,iBAAO;AAAA,QACT;AAEA,QAAAA,IAAG,UAAU,aAAa,SAAS,aAAc;AAC/C,iBAAO,KAAK,KAAK,KAAK,UAAU,IAAI,CAAC;AAAA,QACvC;AAEA,QAAAA,IAAG,UAAU,SAAS,SAAS,OAAQ,OAAO;AAC5C,cAAI,KAAK,aAAa,GAAG;AACvB,mBAAO,KAAK,IAAI,EAAE,MAAM,KAAK,EAAE,MAAM,CAAC;AAAA,UACxC;AACA,iBAAO,KAAK,MAAM;AAAA,QACpB;AAEA,QAAAA,IAAG,UAAU,WAAW,SAAS,SAAU,OAAO;AAChD,cAAI,KAAK,MAAM,QAAQ,CAAC,GAAG;AACzB,mBAAO,KAAK,KAAK,KAAK,EAAE,MAAM,CAAC,EAAE,KAAK;AAAA,UACxC;AACA,iBAAO,KAAK,MAAM;AAAA,QACpB;AAEA,QAAAA,IAAG,UAAU,QAAQ,SAAS,QAAS;AACrC,iBAAO,KAAK,aAAa;AAAA,QAC3B;AAGA,QAAAA,IAAG,UAAU,MAAM,SAAS,MAAO;AACjC,iBAAO,KAAK,MAAM,EAAE,KAAK;AAAA,QAC3B;AAEA,QAAAA,IAAG,UAAU,OAAO,SAAS,OAAQ;AACnC,cAAI,CAAC,KAAK,OAAO,GAAG;AAClB,iBAAK,YAAY;AAAA,UACnB;AAEA,iBAAO;AAAA,QACT;AAGA,QAAAA,IAAG,UAAU,OAAO,SAAS,KAAM,KAAK;AACtC,iBAAO,KAAK,SAAS,IAAI,QAAQ;AAC/B,iBAAK,MAAM,KAAK,QAAQ,IAAI;AAAA,UAC9B;AAEA,mBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,iBAAK,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC;AAAA,UAC7C;AAEA,iBAAO,KAAK,OAAO;AAAA,QACrB;AAEA,QAAAA,IAAG,UAAU,MAAM,SAAS,IAAK,KAAK;AACpC,UAAAD,SAAQ,KAAK,WAAW,IAAI,cAAc,CAAC;AAC3C,iBAAO,KAAK,KAAK,GAAG;AAAA,QACtB;AAGA,QAAAC,IAAG,UAAU,KAAK,SAAS,GAAI,KAAK;AAClC,cAAI,KAAK,SAAS,IAAI,OAAQ,QAAO,KAAK,MAAM,EAAE,IAAI,GAAG;AACzD,iBAAO,IAAI,MAAM,EAAE,IAAI,IAAI;AAAA,QAC7B;AAEA,QAAAA,IAAG,UAAU,MAAM,SAAS,IAAK,KAAK;AACpC,cAAI,KAAK,SAAS,IAAI,OAAQ,QAAO,KAAK,MAAM,EAAE,KAAK,GAAG;AAC1D,iBAAO,IAAI,MAAM,EAAE,KAAK,IAAI;AAAA,QAC9B;AAGA,QAAAA,IAAG,UAAU,QAAQ,SAAS,MAAO,KAAK;AAExC,cAAI;AACJ,cAAI,KAAK,SAAS,IAAI,QAAQ;AAC5B,gBAAI;AAAA,UACN,OAAO;AACL,gBAAI;AAAA,UACN;AAEA,mBAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AACjC,iBAAK,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC;AAAA,UAC7C;AAEA,eAAK,SAAS,EAAE;AAEhB,iBAAO,KAAK,OAAO;AAAA,QACrB;AAEA,QAAAA,IAAG,UAAU,OAAO,SAAS,KAAM,KAAK;AACtC,UAAAD,SAAQ,KAAK,WAAW,IAAI,cAAc,CAAC;AAC3C,iBAAO,KAAK,MAAM,GAAG;AAAA,QACvB;AAGA,QAAAC,IAAG,UAAU,MAAM,SAAS,IAAK,KAAK;AACpC,cAAI,KAAK,SAAS,IAAI,OAAQ,QAAO,KAAK,MAAM,EAAE,KAAK,GAAG;AAC1D,iBAAO,IAAI,MAAM,EAAE,KAAK,IAAI;AAAA,QAC9B;AAEA,QAAAA,IAAG,UAAU,OAAO,SAAS,KAAM,KAAK;AACtC,cAAI,KAAK,SAAS,IAAI,OAAQ,QAAO,KAAK,MAAM,EAAE,MAAM,GAAG;AAC3D,iBAAO,IAAI,MAAM,EAAE,MAAM,IAAI;AAAA,QAC/B;AAGA,QAAAA,IAAG,UAAU,QAAQ,SAAS,MAAO,KAAK;AAExC,cAAI;AACJ,cAAI;AACJ,cAAI,KAAK,SAAS,IAAI,QAAQ;AAC5B,gBAAI;AACJ,gBAAI;AAAA,UACN,OAAO;AACL,gBAAI;AACJ,gBAAI;AAAA,UACN;AAEA,mBAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AACjC,iBAAK,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC;AAAA,UACxC;AAEA,cAAI,SAAS,GAAG;AACd,mBAAO,IAAI,EAAE,QAAQ,KAAK;AACxB,mBAAK,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC;AAAA,YAC3B;AAAA,UACF;AAEA,eAAK,SAAS,EAAE;AAEhB,iBAAO,KAAK,OAAO;AAAA,QACrB;AAEA,QAAAA,IAAG,UAAU,OAAO,SAAS,KAAM,KAAK;AACtC,UAAAD,SAAQ,KAAK,WAAW,IAAI,cAAc,CAAC;AAC3C,iBAAO,KAAK,MAAM,GAAG;AAAA,QACvB;AAGA,QAAAC,IAAG,UAAU,MAAM,SAAS,IAAK,KAAK;AACpC,cAAI,KAAK,SAAS,IAAI,OAAQ,QAAO,KAAK,MAAM,EAAE,KAAK,GAAG;AAC1D,iBAAO,IAAI,MAAM,EAAE,KAAK,IAAI;AAAA,QAC9B;AAEA,QAAAA,IAAG,UAAU,OAAO,SAAS,KAAM,KAAK;AACtC,cAAI,KAAK,SAAS,IAAI,OAAQ,QAAO,KAAK,MAAM,EAAE,MAAM,GAAG;AAC3D,iBAAO,IAAI,MAAM,EAAE,MAAM,IAAI;AAAA,QAC/B;AAGA,QAAAA,IAAG,UAAU,QAAQ,SAAS,MAAO,OAAO;AAC1C,UAAAD,QAAO,OAAO,UAAU,YAAY,SAAS,CAAC;AAE9C,cAAI,cAAc,KAAK,KAAK,QAAQ,EAAE,IAAI;AAC1C,cAAI,WAAW,QAAQ;AAGvB,eAAK,QAAQ,WAAW;AAExB,cAAI,WAAW,GAAG;AAChB;AAAA,UACF;AAGA,mBAAS,IAAI,GAAG,IAAI,aAAa,KAAK;AACpC,iBAAK,MAAM,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,IAAI;AAAA,UACnC;AAGA,cAAI,WAAW,GAAG;AAChB,iBAAK,MAAM,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,IAAK,YAAc,KAAK;AAAA,UACvD;AAGA,iBAAO,KAAK,OAAO;AAAA,QACrB;AAEA,QAAAC,IAAG,UAAU,OAAO,SAAS,KAAM,OAAO;AACxC,iBAAO,KAAK,MAAM,EAAE,MAAM,KAAK;AAAA,QACjC;AAGA,QAAAA,IAAG,UAAU,OAAO,SAAS,KAAM,KAAK,KAAK;AAC3C,UAAAD,QAAO,OAAO,QAAQ,YAAY,OAAO,CAAC;AAE1C,cAAI,MAAO,MAAM,KAAM;AACvB,cAAI,OAAO,MAAM;AAEjB,eAAK,QAAQ,MAAM,CAAC;AAEpB,cAAI,KAAK;AACP,iBAAK,MAAM,GAAG,IAAI,KAAK,MAAM,GAAG,IAAK,KAAK;AAAA,UAC5C,OAAO;AACL,iBAAK,MAAM,GAAG,IAAI,KAAK,MAAM,GAAG,IAAI,EAAE,KAAK;AAAA,UAC7C;AAEA,iBAAO,KAAK,OAAO;AAAA,QACrB;AAGA,QAAAC,IAAG,UAAU,OAAO,SAAS,KAAM,KAAK;AACtC,cAAI;AAGJ,cAAI,KAAK,aAAa,KAAK,IAAI,aAAa,GAAG;AAC7C,iBAAK,WAAW;AAChB,gBAAI,KAAK,KAAK,GAAG;AACjB,iBAAK,YAAY;AACjB,mBAAO,KAAK,UAAU;AAAA,UAGxB,WAAW,KAAK,aAAa,KAAK,IAAI,aAAa,GAAG;AACpD,gBAAI,WAAW;AACf,gBAAI,KAAK,KAAK,GAAG;AACjB,gBAAI,WAAW;AACf,mBAAO,EAAE,UAAU;AAAA,UACrB;AAGA,cAAI,GAAG;AACP,cAAI,KAAK,SAAS,IAAI,QAAQ;AAC5B,gBAAI;AACJ,gBAAI;AAAA,UACN,OAAO;AACL,gBAAI;AACJ,gBAAI;AAAA,UACN;AAEA,cAAI,QAAQ;AACZ,mBAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AACjC,iBAAK,EAAE,MAAM,CAAC,IAAI,MAAM,EAAE,MAAM,CAAC,IAAI,KAAK;AAC1C,iBAAK,MAAM,CAAC,IAAI,IAAI;AACpB,oBAAQ,MAAM;AAAA,UAChB;AACA,iBAAO,UAAU,KAAK,IAAI,EAAE,QAAQ,KAAK;AACvC,iBAAK,EAAE,MAAM,CAAC,IAAI,KAAK;AACvB,iBAAK,MAAM,CAAC,IAAI,IAAI;AACpB,oBAAQ,MAAM;AAAA,UAChB;AAEA,eAAK,SAAS,EAAE;AAChB,cAAI,UAAU,GAAG;AACf,iBAAK,MAAM,KAAK,MAAM,IAAI;AAC1B,iBAAK;AAAA,UAEP,WAAW,MAAM,MAAM;AACrB,mBAAO,IAAI,EAAE,QAAQ,KAAK;AACxB,mBAAK,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC;AAAA,YAC3B;AAAA,UACF;AAEA,iBAAO;AAAA,QACT;AAGA,QAAAA,IAAG,UAAU,MAAM,SAAS,IAAK,KAAK;AACpC,cAAI;AACJ,cAAI,IAAI,aAAa,KAAK,KAAK,aAAa,GAAG;AAC7C,gBAAI,WAAW;AACf,kBAAM,KAAK,IAAI,GAAG;AAClB,gBAAI,YAAY;AAChB,mBAAO;AAAA,UACT,WAAW,IAAI,aAAa,KAAK,KAAK,aAAa,GAAG;AACpD,iBAAK,WAAW;AAChB,kBAAM,IAAI,IAAI,IAAI;AAClB,iBAAK,WAAW;AAChB,mBAAO;AAAA,UACT;AAEA,cAAI,KAAK,SAAS,IAAI,OAAQ,QAAO,KAAK,MAAM,EAAE,KAAK,GAAG;AAE1D,iBAAO,IAAI,MAAM,EAAE,KAAK,IAAI;AAAA,QAC9B;AAGA,QAAAA,IAAG,UAAU,OAAO,SAAS,KAAM,KAAK;AAEtC,cAAI,IAAI,aAAa,GAAG;AACtB,gBAAI,WAAW;AACf,gBAAI,IAAI,KAAK,KAAK,GAAG;AACrB,gBAAI,WAAW;AACf,mBAAO,EAAE,UAAU;AAAA,UAGrB,WAAW,KAAK,aAAa,GAAG;AAC9B,iBAAK,WAAW;AAChB,iBAAK,KAAK,GAAG;AACb,iBAAK,WAAW;AAChB,mBAAO,KAAK,UAAU;AAAA,UACxB;AAGA,cAAI,MAAM,KAAK,IAAI,GAAG;AAGtB,cAAI,QAAQ,GAAG;AACb,iBAAK,WAAW;AAChB,iBAAK,SAAS;AACd,iBAAK,MAAM,CAAC,IAAI;AAChB,mBAAO;AAAA,UACT;AAGA,cAAI,GAAG;AACP,cAAI,MAAM,GAAG;AACX,gBAAI;AACJ,gBAAI;AAAA,UACN,OAAO;AACL,gBAAI;AACJ,gBAAI;AAAA,UACN;AAEA,cAAI,QAAQ;AACZ,mBAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AACjC,iBAAK,EAAE,MAAM,CAAC,IAAI,MAAM,EAAE,MAAM,CAAC,IAAI,KAAK;AAC1C,oBAAQ,KAAK;AACb,iBAAK,MAAM,CAAC,IAAI,IAAI;AAAA,UACtB;AACA,iBAAO,UAAU,KAAK,IAAI,EAAE,QAAQ,KAAK;AACvC,iBAAK,EAAE,MAAM,CAAC,IAAI,KAAK;AACvB,oBAAQ,KAAK;AACb,iBAAK,MAAM,CAAC,IAAI,IAAI;AAAA,UACtB;AAGA,cAAI,UAAU,KAAK,IAAI,EAAE,UAAU,MAAM,MAAM;AAC7C,mBAAO,IAAI,EAAE,QAAQ,KAAK;AACxB,mBAAK,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC;AAAA,YAC3B;AAAA,UACF;AAEA,eAAK,SAAS,KAAK,IAAI,KAAK,QAAQ,CAAC;AAErC,cAAI,MAAM,MAAM;AACd,iBAAK,WAAW;AAAA,UAClB;AAEA,iBAAO,KAAK,OAAO;AAAA,QACrB;AAGA,QAAAA,IAAG,UAAU,MAAM,SAAS,IAAK,KAAK;AACpC,iBAAO,KAAK,MAAM,EAAE,KAAK,GAAG;AAAA,QAC9B;AAEA,iBAAS,WAAYQ,OAAM,KAAK,KAAK;AACnC,cAAI,WAAW,IAAI,WAAWA,MAAK;AACnC,cAAI,MAAOA,MAAK,SAAS,IAAI,SAAU;AACvC,cAAI,SAAS;AACb,gBAAO,MAAM,IAAK;AAGlB,cAAI,IAAIA,MAAK,MAAM,CAAC,IAAI;AACxB,cAAI,IAAI,IAAI,MAAM,CAAC,IAAI;AACvB,cAAI,IAAI,IAAI;AAEZ,cAAI,KAAK,IAAI;AACb,cAAI,QAAS,IAAI,WAAa;AAC9B,cAAI,MAAM,CAAC,IAAI;AAEf,mBAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAG5B,gBAAI,SAAS,UAAU;AACvB,gBAAI,QAAQ,QAAQ;AACpB,gBAAI,OAAO,KAAK,IAAI,GAAG,IAAI,SAAS,CAAC;AACrC,qBAAS,IAAI,KAAK,IAAI,GAAG,IAAIA,MAAK,SAAS,CAAC,GAAG,KAAK,MAAM,KAAK;AAC7D,kBAAI,IAAK,IAAI,IAAK;AAClB,kBAAIA,MAAK,MAAM,CAAC,IAAI;AACpB,kBAAI,IAAI,MAAM,CAAC,IAAI;AACnB,kBAAI,IAAI,IAAI;AACZ,wBAAW,IAAI,WAAa;AAC5B,sBAAQ,IAAI;AAAA,YACd;AACA,gBAAI,MAAM,CAAC,IAAI,QAAQ;AACvB,oBAAQ,SAAS;AAAA,UACnB;AACA,cAAI,UAAU,GAAG;AACf,gBAAI,MAAM,CAAC,IAAI,QAAQ;AAAA,UACzB,OAAO;AACL,gBAAI;AAAA,UACN;AAEA,iBAAO,IAAI,OAAO;AAAA,QACpB;AAKA,YAAI,cAAc,SAASC,aAAaD,OAAM,KAAK,KAAK;AACtD,cAAI,IAAIA,MAAK;AACb,cAAI,IAAI,IAAI;AACZ,cAAI,IAAI,IAAI;AACZ,cAAI,IAAI;AACR,cAAI;AACJ,cAAI;AACJ,cAAI;AACJ,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AACjB,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AACjB,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AACjB,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AACjB,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AACjB,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AACjB,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AACjB,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AACjB,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AACjB,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AACjB,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AACjB,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AACjB,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AACjB,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AACjB,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AACjB,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AACjB,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AACjB,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AACjB,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AACjB,cAAI,KAAK,EAAE,CAAC,IAAI;AAChB,cAAI,MAAM,KAAK;AACf,cAAI,MAAM,OAAO;AAEjB,cAAI,WAAWA,MAAK,WAAW,IAAI;AACnC,cAAI,SAAS;AAEb,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,gBAAM,KAAK,KAAK,KAAK,GAAG;AACxB,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,cAAI,MAAQ,IAAI,KAAM,OAAO,MAAM,SAAW,MAAO;AACrD,eAAO,MAAM,QAAQ,MAAO,MAAM,OAAO,MAAO;AAChD,gBAAM;AAEN,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,gBAAM,KAAK,KAAK,KAAK,GAAG;AACxB,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,cAAI,MAAQ,IAAI,KAAM,OAAO,MAAM,SAAW,MAAO;AACrD,eAAO,MAAM,QAAQ,MAAO,MAAM,OAAO,MAAO;AAChD,gBAAM;AAEN,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,gBAAM,KAAK,KAAK,KAAK,GAAG;AACxB,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,cAAI,MAAQ,IAAI,KAAM,OAAO,MAAM,SAAW,MAAO;AACrD,eAAO,MAAM,QAAQ,MAAO,MAAM,OAAO,MAAO;AAChD,gBAAM;AAEN,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,gBAAM,KAAK,KAAK,KAAK,GAAG;AACxB,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,cAAI,MAAQ,IAAI,KAAM,OAAO,MAAM,SAAW,MAAO;AACrD,eAAO,MAAM,QAAQ,MAAO,MAAM,OAAO,MAAO;AAChD,gBAAM;AAEN,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,gBAAM,KAAK,KAAK,KAAK,GAAG;AACxB,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,cAAI,MAAQ,IAAI,KAAM,OAAO,MAAM,SAAW,MAAO;AACrD,eAAO,MAAM,QAAQ,MAAO,MAAM,OAAO,MAAO;AAChD,gBAAM;AAEN,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,gBAAM,KAAK,KAAK,KAAK,GAAG;AACxB,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,cAAI,MAAQ,IAAI,KAAM,OAAO,MAAM,SAAW,MAAO;AACrD,eAAO,MAAM,QAAQ,MAAO,MAAM,OAAO,MAAO;AAChD,gBAAM;AAEN,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,gBAAM,KAAK,KAAK,KAAK,GAAG;AACxB,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,cAAI,MAAQ,IAAI,KAAM,OAAO,MAAM,SAAW,MAAO;AACrD,eAAO,MAAM,QAAQ,MAAO,MAAM,OAAO,MAAO;AAChD,gBAAM;AAEN,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,gBAAM,KAAK,KAAK,KAAK,GAAG;AACxB,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,cAAI,MAAQ,IAAI,KAAM,OAAO,MAAM,SAAW,MAAO;AACrD,eAAO,MAAM,QAAQ,MAAO,MAAM,OAAO,MAAO;AAChD,gBAAM;AAEN,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,gBAAM,KAAK,KAAK,KAAK,GAAG;AACxB,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,cAAI,MAAQ,IAAI,KAAM,OAAO,MAAM,SAAW,MAAO;AACrD,eAAO,MAAM,QAAQ,MAAO,MAAM,OAAO,MAAO;AAChD,gBAAM;AAEN,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,gBAAM,KAAK,KAAK,KAAK,GAAG;AACxB,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAK,KAAK,KAAK,KAAK,GAAG;AACvB,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AAClC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,gBAAO,MAAM,KAAK,KAAK,KAAK,GAAG,IAAK;AACpC,eAAM,KAAK,KAAK,KAAK,KAAK,GAAG,IAAK;AACl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","names":["Math","imul","clz32","abs","max","floor","JSBI","Array","constructor","length","sign","__kMaxLength","RangeError","BigInt","arg","_","Number","isFinite","__zero","__isOneDigitInt","__oneDigit","g","__fromDouble","result","__fromString","SyntaxError","primitive","__toPrimitive","TypeError","toDebugString","digit","push","toString","join","radix","__toStringBasePowerOfTwo","__toStringGeneric","toNumber","x","xLength","value","__unsignedDigit","xMsd","__digit","msdLeadingZeros","__clz30","xBitLength","exponent","currentDigit","digitIndex","shift","mantissaHigh","mantissaHighBitsUnset","mantissaLow","mantissaLowBitsUnset","rounding","__decideRounding","signBit","__kBitConversionInts","__kBitConversionDouble","unaryMinus","__copy","bitwiseNot","__absoluteSubOne","__trim","__absoluteAddOne","exponentiate","y","expValue","__kMaxLengthBits","neededDigits","__initializeDigits","msd","__setDigit","runningSquare","multiply","resultLength","__clzmsd","i","__multiplyAccumulate","divide","__absoluteCompare","resultSign","divisor","quotient","__absoluteDivSmall","__absoluteDivLarge","remainder","remainderDigit","__absoluteModSmall","add","__absoluteAdd","__absoluteSub","subtract","leftShift","__rightShiftByAbsolute","__leftShiftByAbsolute","signedRightShift","unsignedRightShift","lessThan","__compareToBigInt","lessThanOrEqual","greaterThan","greaterThanOrEqual","equal","notEqual","bitwiseAnd","__absoluteAnd","y1","__absoluteOr","__absoluteAndNot","bitwiseXor","__absoluteXor","bitwiseOr","asIntN","n","neededLength","topDigit","compareDigit","__truncateToNBits","__truncateAndSubFromPowerOfTwo","asUintN","bitsInTopDigit","ADD","__toNumeric","__isBigInt","LT","__compare","LE","GT","GE","EQ","__equalToNumber","NE","newLength","last","pop","mantissaBitsUnset","topUnconsumedBit","mask","rawExponent","digits","kMantissaHighTopBit","msdTopBit","remainingMantissaBits","__isWhitespace","c","string","cursor","current","charCodeAt","chars","bitsPerChar","__kMaxBitsPerChar","roundup","__kBitsPerCharTableMultiplier","bitsMin","__kBitsPerCharTableShift","limDigit","limAlpha","parts","partsBits","done","part","bits","d","__fillFromParts","charsSoFar","multiplier","m","digitsSoFar","__inplaceMultiplyAdd","bitsInDigit","partBits","Error","charMask","charsRequired","pos","availableBits","newDigit","__kConversionChars","consumedBits","isRecursiveCall","bitLength","maxBitsPerChar","minBitsPerChar","secondHalfChars","conqueror","secondHalf","input","__halfDigit","__setHalfDigit","divisionResult","firstHalf","__unequalSign","leftNegative","__absoluteGreater","bothNegative","__absoluteLess","xSign","__compareToNumber","ySign","yAbs","xDigit","__compareToDouble","yBitLength","compareMantissa","__comparisonResultToBool","op","carry","r","borrow","inputLength","__setDigitGrow","yLength","numPairs","tmp","tmpLength","diff","multiplicand","accumulator","accumulatorIndex","m2Low","m2High","high","acc","m1","m1Low","m1High","rLow","__imul","rMid1","rMid2","rHigh","__internalMultiplyAdd","source","factor","summand","rx","ry","mLow","mHigh","dLow","dHigh","pLow","pMid1","pMid2","pHigh","upperHalf","lowerHalf","dividend","wantQuotient","wantRemainder","__halfDigitLength","n2","q","qhatv","__clz15","__specialLeftShift","u","vn1","halfDigitBuffer","qhat","j","ujn","rhat","vn2","ujn2","__inplaceSub","__inplaceAdd","__inplaceRightShift","startIndex","halfDigits","sum","subtrahend","r0","sub","r15","addDigit","__toShiftAmount","digitShift","bitsShift","grow","__rightShiftByMaximum","mustRoundDown","obj","hint","Symbol","toPrimitive","exoticToPrim","valueOf","call","drop","min","limit","msdBitsConsumed","resultMsd","minuendMsd","len","previous","updated","__digitPow","base","ArrayBuffer","Float64Array","__kBitConversionBuffer","Int32Array","LN2","log","t","a","b","Decimal","MAX_SAFE_INTEGER","toString","sign","guard","subtract","pow","config","Big","NAME","parse","stringify","toFormat","module","exports","assert","BN","number","Buffer","mod","pow","toString","padding","allocate","self","comb10MulTo","g","gcd","split","output","prime","bits","padding","Keccak","methods","createMethod","i","bytes","j","bytes","split","err","global","isObject","isNumber","format","locale","to","from","config","now","output","number","sign","token","ordinal","i","diff","localeData","mod","hours","minutes","split","tokens","meridiem","years","months","weeks","days","seconds","milliseconds","offset","toString","prefix","thresholds","constants_exports","constants_exports","Ether","LogLevel","ErrorCode","version","error","version","version","version","_BN","logger","version","logger","sha3","version","logger","version","logger","ChainId","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","UNI_ADDRESSES","V2_FACTORY_ADDRESSES","_V2_FACTORY_ADDRESSES","ChainId","MAINNET","GOERLI","SEPOLIA","OPTIMISM","ARBITRUM_ONE","AVALANCHE","BASE","BNB","POLYGON","CELO","BLAST","V2_ROUTER_ADDRESSES","_V2_ROUTER_ADDRESSES","ChainId","MAINNET","GOERLI","ARBITRUM_ONE","OPTIMISM","BASE","AVALANCHE","BNB","POLYGON","BLAST","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","_extends","v1MixedRouteQuoterAddress","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","BNB_ADDRESSES","swapRouter02Address","OPTIMISM_GOERLI_ADDRESSES","OPTIMISM_SEPOLIA_ADDRESSES","ARBITRUM_GOERLI_ADDRESSES","ARBITRUM_SEPOLIA_ADDRESSES","SEPOLIA_ADDRESSES","AVALANCHE_ADDRESSES","BASE_ADDRESSES","BASE_GOERLI_ADDRESSES","ZORA_ADDRESSES","ZORA_SEPOLIA_ADDRESSES","ROOTSTOCK_ADDRESSES","BLAST_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","_CHAIN_TO_ADDRESSES_M","POLYGON_MUMBAI","CELO","CELO_ALFAJORES","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","SEPOLIA","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","GOVERNANCE_ALPHA_V1_ADDRESSES","_GOVERNANCE_ALPHA_V1_","ChainId","MAINNET","GOVERNANCE_BRAVO_ADDRESSES","_GOVERNANCE_BRAVO_ADD","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","ChainId","MAINNET","ARGENT_WALLET_DETECTOR_ADDRESS","_ARGENT_WALLET_DETECT","SOCKS_CONTROLLER_ADDRESSES","_SOCKS_CONTROLLER_ADD","ChainId","MAINNET","TradeType","Rounding","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","Rounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","JSBI","BigInt","tryParseFraction","fractionish","Error","_proto","prototype","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","process","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","ONE_HUNDRED","Fraction","JSBI","BigInt","toPercent","fraction","Percent","numerator","denominator","_Fraction","_inheritsLoose","_this","_proto","prototype","add","other","call","subtract","multiply","divide","toSignificant","significantDigits","format","rounding","toFixed","decimalPlaces","BaseCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","process","invariant","isInteger","NativeCurrency","_BaseCurrency","_inheritsLoose","_this","validateAndParseAddress","address","getAddress","error","Error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","buyFeeBps","sellFeeBps","call","gte","BigNumber","from","_proto","prototype","equals","other","isToken","toLowerCase","sortsBefore","_createClass","key","get","WETH9","Ether","_NativeCurrency","onChain","_this$_etherCache$cha","_etherCache","isNative","weth9","MAX_SAFE_INTEGER","JSBI","BigInt","Number","Entrypoint","LiquidityType","AMM","isBytes","decode","alphabet","padding","bytes","isBytes","bytes","gen","isBytes","isBytes","utf8ToBytes","isBytes","_0n","_1n","_2n","bytes","isLE","_32n","_0n","_1n","_2n","number","_0n","_1n","gcd","_2n","g","_0n","_1n","nBitLength","bitLen","isLE","_0n","_1n","bytes","isLE","_1n","rc","i","poseidonHash","_0n","_1n","window","curve","curve","s","_0n","_1n","_2n","_3n","_4n","CURVE","toBytes","bytes","a","validateOpts","CURVE_ORDER","number","Signature","prefix","utils","getPublicKey","getSharedSecret","bits2int","hash","randomBytes","sign","verify","r","tv5","c1","c2","number","bytes","hash","number","exists","u8a","isLE","utf8ToBytes","toBytes","u8a","concatBytes","Hash","toStr","Hash","hash","toBytes","exists","bytes","hash","concatBytes","bytes","ensureBytes","bytes","ensureBytes","constants","utf8ToBytes","isInteger","value","INTEGER_REGEX","test","isNumber","NUMBER_REGEX","isSafeNumber","config","num","parseFloat","str","String","v","extractSignificantDigits","s","approx","requiredDigits","length","startsWith","substring","UnsafeNumberReason","getUnsafeNumberReason","undefined","truncate_integer","isFinite","overflow","underflow","truncate_float","extractSignificantDigits","value","replace","EXPONENTIAL_PART_REGEX","DOT_REGEX","TRAILING_ZEROS_REGEX","LEADING_MINUS_AND_ZEROS_REGEX","LosslessNumber","value","_classCallCheck","_defineProperty","isNumber","Error","_createClass","key","valueOf","unsafeReason","getUnsafeNumberReason","undefined","UnsafeNumberReason","truncate_float","parseFloat","isInteger","BigInt","concat","toString","isLosslessNumber","_typeof","parseLosslessNumber","value","LosslessNumber","parseNumberAndBigInt","isInteger","BigInt","parseFloat","revive","json","reviver","reviveValue","context","key","value","Array","isArray","call","reviveArray","_typeof","isLosslessNumber","reviveObject","object","Object","keys","forEach","undefined","array","i","length","parse","text","reviver","parseNumber","arguments","length","undefined","parseLosslessNumber","i","value","parseValue","expectValue","expectEndOfInput","revive","parseObject","charCodeAt","codeOpeningBrace","skipWhitespace","object","initial","codeClosingBrace","eatComma","start","key","parseString","throwObjectKeyExpected","eatColon","throwObjectValueExpected","Object","prototype","hasOwnProperty","call","isDeepEqual","throwDuplicateKey","throwObjectKeyOrEndExpected","parseArray","codeOpeningBracket","array","codeClosingBracket","expectArrayItem","push","throwArrayItemOrEndExpected","_ref","_ref2","_ref3","_ref4","_ref5","_parseString","parseNumeric","parseKeyword","name","slice","isWhitespace","codeDoubleQuote","result","codeBackslash","char","escapeChar","escapeCharacters","isHex","String","fromCharCode","parseInt","throwInvalidUnicodeCharacter","throwInvalidEscapeCharacter","isValidStringCharacter","throwInvalidCharacter","expectEndOfString","codeMinus","expectDigit","codeZero","isNonZeroDigit","isDigit","codeDot","codeLowercaseE","codeUppercaseE","codePlus","codeComma","SyntaxError","concat","gotAt","codeColon","numSoFar","pos","chars","end","test","got","code","codeSpace","codeNewline","codeTab","codeReturn","codeNine","codeUppercaseA","codeUppercaseF","codeLowercaseA","codeLowercaseF","codeOne","a","b","Array","isArray","every","item","index","isObject","keys","_toConsumableArray","Set","_typeof","f","n","r","t","stringify","value","replacer","space","numberStringifiers","resolvedSpace","resolveSpace","replacedValue","call","stringifyValue","indent","Array","isArray","stringifier","find","item","test","str","isNumber","Error","concat","Date","Boolean","Number","String","JSON","isLosslessNumber","toString","stringifyArray","_typeof","stringifyObject","undefined","array","length","childIndent","i","object","toJSON","keys","map","Object","first","forEach","key","includeProperty","keyStr","repeat","rank","output","import_url_join","__export","MASK_250","padding","BaseUrl","NetworkName","StarknetChainId","TransactionHashPrefix","SIMULATION_FLAG","ValidateType","Uint","Litteral","EntryPointType","TransactionType","TransactionStatus","TransactionFinalityStatus","TransactionExecutionStatus","BlockStatus","BlockTag","ETransactionType","ESimulationFlag","ETransactionStatus","ETransactionFinalityStatus","ETransactionExecutionStatus","EBlockTag","EDataAvailabilityMode","hexToBytes","isHex","toHex","number","hash","uint256","CairoOptionVariant","CairoResultVariant","version","listTypeVariant","parsedParameter","parseBaseTypes","output","prefix","computeHashOnElements","parse","stringify","isInteger","json","base64","isomorphicFetch","__export","stringify","parse","StarknetIdContract","isHex","toHex","urljoin","defaultOptions","__export","toHex","isHex","computeHashOnElements","__export","toHex","validateAndParseAddress","getChecksumAddress","hexToBytes","Safety","moment","QUOTE_TOKEN_SYMBOL","Ether","getChecksumAddress","config","getChecksumAddress"]}