import { Percent, Fraction } from '@uniswap/sdk-core';
import moment from 'moment';
import { constants } from 'starknet';

declare const MAX_TEAM_ALLOCATION_HOLDERS_COUNT = 10;
declare const MAX_TEAM_ALLOCATION_TOTAL_SUPPLY_PERCENTAGE: Percent;
declare const DECIMALS = 18;
declare enum Entrypoint {
    CREATE_MEMECOIN = "create_memecoin",
    IS_MEMECOIN = "is_memecoin",
    AGGREGATE = "aggregate",
    NAME = "name",
    SYMBOL = "symbol",
    IS_LAUNCHED = "is_launched",
    GET_TEAM_ALLOCATION = "get_team_allocation",
    TOTAL_SUPPLY = "total_supply",
    OWNER = "owner",
    LOCKED_LIQUIDITY = "locked_liquidity",
    LAUNCH_ON_JEDISWAP = "launch_on_jediswap",
    LAUNCH_ON_EKUBO = "launch_on_ekubo",
    LAUNCH_ON_STARKDEFI = "launch_on_starkdefi",
    APPROVE = "approve",
    GET_REMAINING_TIME = "get_remaining_time",
    LAUNCHED_WITH_LIQUIDITY_PARAMETERS = "launched_with_liquidity_parameters",
    GET_LOCK_DETAILS = "get_lock_details",
    LAUNCHED_AT_BLOCK_NUMBER = "launched_at_block_number",
    GET_RESERVES = "get_reserves",
    LIQUIDITY_POSITION_DETAILS = "liquidity_position_details",
    WITHDRAW_FEES = "withdraw_fees",
    EXTEND_LOCK = "extend_lock",
    BALANCE_OF_CAMEL = "balanceOf",
    BALANCE_OF = "balance_of",
    TRANSFER = "transfer",
    GET_TOKEN_INFOS = "get_token_info"
}
declare enum LiquidityType {
    JEDISWAP_ERC20 = "JEDISWAP_ERC20",
    STARKDEFI_ERC20 = "STARKDEFI_ERC20",
    EKUBO_NFT = "EKUBO_NFT"
}
declare const MIN_STARTING_MCAP = 5000;
declare const RECOMMENDED_STARTING_MCAP = 10000;
declare const MIN_HODL_LIMIT: Percent;
declare const MAX_HODL_LIMIT: Percent;
declare const RECOMMENDED_HODL_LIMIT: Percent;
declare const TRANSFER_RESTRICTION_DELAY_STEP = 15;
declare const MIN_TRANSFER_RESTRICTION_DELAY = 30;
declare const MAX_TRANSFER_RESTRICTION_DELAY = 1440;
declare const LIQUIDITY_LOCK_PERIOD_STEP = 1;
declare const MIN_LIQUIDITY_LOCK_PERIOD = 6;
declare const MAX_LIQUIDITY_LOCK_PERIOD = 25;
declare const LIQUIDITY_LOCK_INCREASE_STEP = 1;
declare const MIN_LIQUIDITY_LOCK_INCREASE = 1;
declare const MAX_LIQUIDITY_LOCK_INCREASE = 25;
declare const LIQUIDITY_LOCK_FOREVER_TIMESTAMP = 9999999999;
declare const MIN_EKUBO_FEES: Percent;
declare const MAX_EKUBO_FEES: Percent;
declare const RECOMMENDED_EKUBO_FEES: Percent;
declare const EKUBO_TICK_SIZE = 1.000001;
declare const EKUBO_TICK_SPACING = 5982;
declare const EKUBO_TICK_SIZE_LOG: number;
declare const EKUBO_FEES_MULTIPLICATOR = "0x100000000000000000000000000000000";
declare const EKUBO_BOUND: number;

declare enum AMM {
    EKUBO = "Ekubo",
    JEDISWAP = "Jediswap",
    STARKDEFI = "StarkDeFi"
}
declare const AMMS: {
    Ekubo: {
        description: string;
        launchEntrypoint: Entrypoint;
    };
    Jediswap: {
        description: string;
        launchEntrypoint: Entrypoint;
    };
    StarkDeFi: {
        description: string;
        launchEntrypoint: Entrypoint;
    };
};

declare const TOKEN_CLASS_HASH: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};
declare const FACTORY_ADDRESSES: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};
declare const EKUBO_POSITIONS_ADDRESSES: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};
declare const ETH_ADDRESSES: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};
declare const STRK_ADDRESSES: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};
declare const USDC_ADDRESSES: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};
declare const MULTICALL_ADDRESSES: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};
declare const JEDISWAP_ETH_USDC: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};
declare const JEDISWAP_STRK_USDC: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};
declare const compiledMulticall: any;
declare const compiledJediswapPair: any;
declare const compiledEkuboPositions: any;

declare enum Safety {
    SAFE = 0,
    CORRECT = 1,
    DANGEROUS = 2,
    UNKNOWN = 3
}
declare const TEAM_ALLOCATION_SAFETY_BOUNDS: {
    0: Percent;
    1: Percent;
};
declare const LIQUIDITY_LOCK_SAFETY_BOUNDS: {
    0: moment.Duration;
    1: moment.Duration;
};
declare const STARTING_MCAP_SAFETY_BOUNDS: {
    0: {
        mcap: Fraction;
        teamAllocatoion: Fraction;
    };
    1: {
        mcap: Fraction;
        teamAllocatoion: Fraction;
    };
};

type USDCPair = {
    address: string;
    reversed: boolean;
};
type Token = {
    address: string;
    symbol: QUOTE_TOKEN_SYMBOL;
    name: string;
    decimals: number;
    camelCased?: boolean;
    usdcPair?: USDCPair;
};
type MultichainToken = {
    [chainId in constants.StarknetChainId]: Token;
};

declare enum QUOTE_TOKEN_SYMBOL {
    ETH = "ETH",
    STRK = "STRK",
    USDC = "USDC"
}
declare const Ether: MultichainToken;
declare const Stark: MultichainToken;
declare const USDCoin: MultichainToken;
declare const QUOTE_TOKENS: {
    [chainId in constants.StarknetChainId]: Record<string, Token>;
};
declare const DEFAULT_QUOTE_TOKEN_ADDRESSES: {
    "0x534e5f474f45524c49": string;
    "0x534e5f4d41494e": string;
};

export { AMM, AMMS, DECIMALS, DEFAULT_QUOTE_TOKEN_ADDRESSES, EKUBO_BOUND, EKUBO_FEES_MULTIPLICATOR, EKUBO_POSITIONS_ADDRESSES, EKUBO_TICK_SIZE, EKUBO_TICK_SIZE_LOG, EKUBO_TICK_SPACING, ETH_ADDRESSES, Entrypoint, Ether, FACTORY_ADDRESSES, JEDISWAP_ETH_USDC, JEDISWAP_STRK_USDC, LIQUIDITY_LOCK_FOREVER_TIMESTAMP, LIQUIDITY_LOCK_INCREASE_STEP, LIQUIDITY_LOCK_PERIOD_STEP, LIQUIDITY_LOCK_SAFETY_BOUNDS, LiquidityType, MAX_EKUBO_FEES, MAX_HODL_LIMIT, MAX_LIQUIDITY_LOCK_INCREASE, MAX_LIQUIDITY_LOCK_PERIOD, MAX_TEAM_ALLOCATION_HOLDERS_COUNT, MAX_TEAM_ALLOCATION_TOTAL_SUPPLY_PERCENTAGE, MAX_TRANSFER_RESTRICTION_DELAY, MIN_EKUBO_FEES, MIN_HODL_LIMIT, MIN_LIQUIDITY_LOCK_INCREASE, MIN_LIQUIDITY_LOCK_PERIOD, MIN_STARTING_MCAP, MIN_TRANSFER_RESTRICTION_DELAY, MULTICALL_ADDRESSES, QUOTE_TOKENS, QUOTE_TOKEN_SYMBOL, RECOMMENDED_EKUBO_FEES, RECOMMENDED_HODL_LIMIT, RECOMMENDED_STARTING_MCAP, STARTING_MCAP_SAFETY_BOUNDS, STRK_ADDRESSES, Safety, Stark, TEAM_ALLOCATION_SAFETY_BOUNDS, TOKEN_CLASS_HASH, TRANSFER_RESTRICTION_DELAY_STEP, USDC_ADDRESSES, USDCoin, compiledEkuboPositions, compiledJediswapPair, compiledMulticall };
