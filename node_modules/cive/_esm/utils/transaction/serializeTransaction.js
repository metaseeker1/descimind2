import { concatHex, toHex, toRlp, } from 'viem';
import { rlpTransaction1559Type, rlpTransaction2930Type, } from '../../constants/transaction.js';
import { base32AddressToHex } from '../address/base32AddressToHex.js';
import { assertTransactionEIP1559, assertTransactionEIP2930, assertTransactionLegacy, } from './assertTransaction.js';
import { getTransactionType, } from './getTransactionType.js';
import { serializeAccessList, } from './serializeAccessList.js';
export function serializeTransaction(transaction, signature) {
    const type = getTransactionType(transaction);
    if (type === 'eip1559')
        return serializeTransactionEIP1559(transaction, signature);
    if (type === 'eip2930')
        return serializeTransactionEIP2930(transaction, signature);
    return serializeTransactionLegacy(transaction, signature);
}
function serializeTransactionEIP1559(transaction, signature) {
    const { chainId, gas, nonce, to, value, maxFeePerGas, maxPriorityFeePerGas, accessList, data, storageLimit, epochHeight, } = transaction;
    assertTransactionEIP1559(transaction);
    const serializedAccessList = serializeAccessList(accessList);
    const toHexAddress = to ? base32AddressToHex({ address: to }) : undefined;
    //[nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, storageLimit, epochHeight, chainId, data, accessList]
    const serializedTransaction = [
        nonce ? toHex(nonce) : '0x',
        maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',
        maxFeePerGas ? toHex(maxFeePerGas) : '0x',
        gas ? toHex(gas) : '0x',
        toHexAddress ?? '0x',
        value ? toHex(value) : '0x',
        storageLimit ? toHex(storageLimit) : '0x',
        epochHeight ? toHex(epochHeight) : '0x',
        toHex(chainId),
        data ?? '0x',
        serializedAccessList,
    ];
    if (signature) {
        return concatHex([
            rlpTransaction1559Type,
            toRlp([
                serializedTransaction,
                signature.v ? toHex(signature.v) : '0x',
                signature.r,
                signature.s,
            ]),
        ]);
    }
    return concatHex([
        rlpTransaction1559Type,
        toRlp(serializedTransaction),
    ]);
}
function serializeTransactionEIP2930(transaction, signature) {
    const { chainId, gas, data, nonce, to, value, accessList, gasPrice, storageLimit, epochHeight, } = transaction;
    assertTransactionEIP2930(transaction);
    const toHexAddress = to ? base32AddressToHex({ address: to }) : undefined;
    const serializedAccessList = serializeAccessList(accessList);
    const serializedTransaction = [
        nonce ? toHex(nonce) : '0x',
        gasPrice ? toHex(gasPrice) : '0x',
        gas ? toHex(gas) : '0x',
        toHexAddress ?? '0x',
        value ? toHex(value) : '0x',
        storageLimit ? toHex(storageLimit) : '0x',
        epochHeight ? toHex(epochHeight) : '0x',
        toHex(chainId),
        data ?? '0x',
        serializedAccessList,
    ];
    if (signature) {
        return concatHex([
            rlpTransaction2930Type,
            toRlp([
                serializedTransaction,
                signature.v ? toHex(signature.v) : '0x',
                signature.r,
                signature.s,
            ]),
        ]);
    }
    return concatHex([
        rlpTransaction2930Type,
        toRlp(serializedTransaction),
    ]);
}
function serializeTransactionLegacy(transaction, signature) {
    const { chainId = 1, gas, data, nonce, to, value, gasPrice, storageLimit, epochHeight, } = transaction;
    assertTransactionLegacy(transaction);
    const serializedTransaction = [
        nonce ? toHex(nonce) : '0x',
        gasPrice ? toHex(gasPrice) : '0x',
        gas ? toHex(gas) : '0x',
        to ? base32AddressToHex({ address: to }) : '0x',
        value ? toHex(value) : '0x',
        storageLimit ? toHex(storageLimit) : '0x',
        epochHeight ? toHex(epochHeight) : '0x',
    ];
    if (signature) {
        return toRlp([
            [...serializedTransaction, toHex(chainId), data ?? '0x'],
            signature.v ? toHex(signature.v) : '0x',
            signature.r,
            signature.s,
        ]);
    }
    return toRlp([
        ...serializedTransaction,
        toHex(chainId),
        data ?? '0x',
    ]);
}
//# sourceMappingURL=serializeTransaction.js.map