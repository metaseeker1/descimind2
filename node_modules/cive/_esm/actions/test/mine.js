import { deferredStateEpochCount } from '../../constants/epoch.js';
import { getAction } from '../../utils/getAction.js';
import { generateEmptyLocalNodeBlocks } from './generateEmptyLocalNodeBlocks.js';
import { generateLocalNodeBlock } from './generateLocalNodeBlock.js';
export async function mine(client, parameters = {}) {
    if ('blocks' in parameters) {
        const { blocks } = parameters;
        const generateBlocks = getAction(client, generateEmptyLocalNodeBlocks, 'generateEmptyLocalNodeBlocks');
        await generateBlocks({ numBlocks: blocks });
    }
    else {
        const { numTxs = 1, blockSizeLimit = 20480 } = parameters;
        const generateOneBlock = getAction(client, generateLocalNodeBlock, 'generateLocalNodeBlock');
        for (let i = 0; i < deferredStateEpochCount; i++) {
            await generateOneBlock({
                numTxs,
                blockSizeLimit,
            });
        }
    }
}
//# sourceMappingURL=mine.js.map