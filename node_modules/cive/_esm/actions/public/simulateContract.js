import { parseAccount, } from '../../accounts/index.js';
import { ChainIdNotFoundError } from '../../errors/chain.js';
import { getContractError, } from '../../errors/getContractError.js';
import { getAction } from '../../utils/getAction.js';
import { decodeFunctionResult, encodeFunctionData, } from '../../utils/index.js';
import { call } from './call.js';
export async function simulateContract(client, parameters) {
    const { abi, address, args, dataSuffix, functionName, ...callRequest } = parameters;
    const account = callRequest.account
        ? parseAccount(callRequest.account)
        : client.account;
    const calldata = encodeFunctionData({ abi, args, functionName });
    // TODO: update this
    if (typeof client.chain === 'undefined' || !('id' in client.chain)) {
        throw new ChainIdNotFoundError();
    }
    try {
        const { data } = await getAction(client, call, 'call')({
            batch: false,
            data: `${calldata}${dataSuffix ? dataSuffix.replace('0x', '') : ''}`,
            to: address,
            ...callRequest,
            account,
        });
        const result = decodeFunctionResult({
            networkId: client.chain.id,
            abi,
            args,
            functionName,
            data: data || '0x',
        });
        const minimizedAbi = abi.filter((abiItem) => 'name' in abiItem && abiItem.name === parameters.functionName);
        return {
            result,
            request: {
                abi: minimizedAbi,
                address,
                args,
                dataSuffix,
                functionName,
                ...callRequest,
                account,
            },
        };
    }
    catch (error) {
        throw getContractError(error, {
            abi,
            address,
            args,
            docsPath: '/docs/contract/simulateContract',
            functionName,
            sender: account?.address,
        });
    }
}
//# sourceMappingURL=simulateContract.js.map