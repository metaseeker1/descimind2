import { ChainIdNotFoundError } from '../../errors/chain.js';
import { parseEventLogs } from '../../utils/abi/parseEventLogs.js';
import { formatLog } from '../../utils/formatters/log.js';
export async function getFilterChanges(client, { filter, }) {
    const strict = 'strict' in filter && filter.strict;
    // TODO: update this
    if (typeof client.chain === 'undefined' || !('id' in client.chain)) {
        throw new ChainIdNotFoundError();
    }
    const logs = await filter.request({
        method: 'cfx_getFilterChanges',
        params: [filter.id],
    });
    if (typeof logs[0] === 'string')
        return logs;
    const formattedLogs = logs.map((log) => formatLog(log));
    if (!('abi' in filter) || !filter.abi)
        return formattedLogs;
    return parseEventLogs({
        abi: filter.abi,
        logs: formattedLogs,
        strict,
        networkId: client.chain.id,
    });
}
//# sourceMappingURL=getFilterChanges.js.map