import { ChainIdNotFoundError } from '../../errors/chain.js';
import { getContractError } from '../../errors/getContractError.js';
import { getAction } from '../../utils/getAction.js';
import { decodeFunctionResult, encodeFunctionData, } from '../../utils/index.js';
import { call } from './call.js';
export async function readContract(client, parameters) {
    const { abi, address, args, functionName, ...rest } = parameters;
    const calldata = encodeFunctionData({
        abi,
        args,
        functionName,
    });
    // TODO: update this
    if (typeof client.chain === 'undefined' || !('id' in client.chain)) {
        throw new ChainIdNotFoundError();
    }
    try {
        const { data } = await getAction(client, call, 'call')({
            ...rest,
            data: calldata,
            to: address,
        });
        return decodeFunctionResult({
            networkId: client.chain.id,
            abi,
            args,
            functionName,
            data: data || '0x',
        });
    }
    catch (error) {
        throw getContractError(error, {
            abi,
            address,
            args,
            docsPath: '/docs/contract/readContract',
            functionName,
        });
    }
}
//# sourceMappingURL=readContract.js.map