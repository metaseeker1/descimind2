import { BlockNotFoundError } from '../../errors/block.js';
import { TransactionNotFoundError, TransactionReceiptNotFoundError, WaitForTransactionReceiptTimeoutError, } from '../../errors/transaction.js';
import { observe } from '../../types/observe.js';
import { getAction } from '../../utils/getAction.js';
import { withRetry, } from '../../utils/promise/withRetry.js';
import { stringify } from '../../utils/stringify.js';
import { getBlock } from './getBlock.js';
import { getTransaction, } from './getTransaction.js';
import { getTransactionReceipt, } from './getTransactionReceipt.js';
import { watchEpochNumber, } from './watchEpochNumber.js';
export async function waitForTransactionReceipt(client, { confirmations = 1, hash, onReplaced, pollingInterval = client.pollingInterval, retryCount = 6, retryDelay = ({ count }) => ~~(1 << count) * 200, // exponential backoff
timeout, epochTag = 'latest_state', }) {
    const observerId = stringify(['waitForTransactionReceipt', client.uid, hash]);
    let count = 0;
    let transaction;
    let replacedTransaction;
    let receipt;
    let retrying = false;
    return new Promise((resolve, reject) => {
        if (timeout)
            setTimeout(() => reject(new WaitForTransactionReceiptTimeoutError({ hash })), timeout);
        const _unobserve = observe(observerId, { onReplaced, resolve, reject }, (emit) => {
            const _unwatch = getAction(client, watchEpochNumber, 'watchEpochNumber')({
                emitMissed: true,
                emitOnBegin: true,
                poll: true,
                pollingInterval,
                epochTag,
                async onEpochNumber(epochNumber) {
                    const done = (fn) => {
                        _unwatch();
                        fn();
                        _unobserve();
                    };
                    if (retrying)
                        return;
                    if (count > retryCount) {
                        done(() => emit.reject(new WaitForTransactionReceiptTimeoutError({ hash })));
                    }
                    try {
                        // If we already have a valid receipt, let's check if we have enough
                        // confirmations. If we do, then we can resolve.
                        if (receipt) {
                            if (confirmations > 1 &&
                                (!receipt.epochNumber ||
                                    epochNumber - receipt.epochNumber + 1n < confirmations))
                                return;
                            done(() => emit.resolve(receipt));
                            return;
                        }
                        // Get the transaction to check if it's been replaced.
                        // We need to retry as some RPC Providers may be slow to sync
                        // up mined transactions.
                        if (!transaction) {
                            retrying = true;
                            await withRetry(async () => {
                                transaction = (await getAction(client, getTransaction, 'getTransaction')({ hash }));
                                // if (transaction.epochNumber)
                                //   epochNumber = transaction.epochNumber
                            }, {
                                delay: retryDelay,
                                retryCount,
                            });
                            retrying = false;
                        }
                        // Get the receipt to check if it's been processed.
                        receipt = await getAction(client, getTransactionReceipt, 'getTransactionReceipt')({ hash });
                        // Check if we have enough confirmations. If not, continue polling.
                        if (confirmations > 1 &&
                            (!receipt.epochNumber ||
                                epochNumber - receipt.epochNumber + 1n < confirmations))
                            return;
                        done(() => emit.resolve(receipt));
                    }
                    catch (err) {
                        // If the receipt is not found, the transaction will be pending.
                        // We need to check if it has potentially been replaced.
                        if (err instanceof TransactionNotFoundError ||
                            err instanceof TransactionReceiptNotFoundError) {
                            if (!transaction) {
                                retrying = false;
                                return;
                            }
                            try {
                                replacedTransaction = transaction;
                                // Let's retrieve the transactions from the current block.
                                // We need to retry as some RPC Providers may be slow to sync
                                // up mined blocks.
                                retrying = true;
                                const block = await withRetry(() => getAction(client, getBlock, 'getBlock')({
                                    epochNumber: epochNumber,
                                    includeTransactions: true,
                                }), {
                                    delay: retryDelay,
                                    retryCount,
                                    shouldRetry: ({ error }) => error instanceof BlockNotFoundError,
                                });
                                retrying = false;
                                const replacementTransaction = block.transactions.find(({ from, nonce }) => from === replacedTransaction.from &&
                                    nonce === replacedTransaction.nonce);
                                // If we couldn't find a replacement transaction, continue polling.
                                if (!replacementTransaction)
                                    return;
                                // If we found a replacement transaction, return it's receipt.
                                receipt = await getAction(client, getTransactionReceipt, 'getTransactionReceipt')({
                                    hash: replacementTransaction.hash,
                                });
                                // Check if we have enough confirmations. If not, continue polling.
                                if (confirmations > 1 &&
                                    (!receipt.epochNumber ||
                                        epochNumber - receipt.epochNumber + 1n < confirmations))
                                    return;
                                let reason = 'replaced';
                                if (replacementTransaction.to === replacedTransaction.to &&
                                    replacementTransaction.value === replacedTransaction.value) {
                                    reason = 'repriced';
                                }
                                else if (replacementTransaction.from === replacementTransaction.to &&
                                    replacementTransaction.value === 0n) {
                                    reason = 'cancelled';
                                }
                                done(() => {
                                    emit.onReplaced?.({
                                        reason,
                                        replacedTransaction: replacedTransaction,
                                        transaction: replacementTransaction,
                                        transactionReceipt: receipt,
                                    });
                                    emit.resolve(receipt);
                                });
                            }
                            catch (err_) {
                                done(() => emit.reject(err_));
                            }
                        }
                        else {
                            done(() => emit.reject(err));
                        }
                    }
                    finally {
                        count++;
                    }
                },
            });
        });
    });
}
//# sourceMappingURL=waitForTransactionReceipt.js.map