"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddressTypeNotMatchError = exports.InvalidAddressVersionError = exports.MixedCaseAddressError = exports.ConvertBitNonZeroPaddingError = exports.ConvertBitExcessPaddingError = exports.InvalidNetworkIdError = void 0;
const viem_1 = require("viem");
class InvalidNetworkIdError extends viem_1.BaseError {
    name = 'InvalidNetworkIdError';
    constructor({ networkId, message, }) {
        super(`Invalid network id: ${networkId}. ${message || ''}`);
    }
}
exports.InvalidNetworkIdError = InvalidNetworkIdError;
class ConvertBitExcessPaddingError extends viem_1.BaseError {
    name = 'ConvertBitExcessPaddingError';
    constructor() {
        super('Excess padding');
    }
}
exports.ConvertBitExcessPaddingError = ConvertBitExcessPaddingError;
class ConvertBitNonZeroPaddingError extends viem_1.BaseError {
    name = 'ConvertBitNonZeroPaddingError';
    constructor() {
        super('Non-zero padding');
    }
}
exports.ConvertBitNonZeroPaddingError = ConvertBitNonZeroPaddingError;
class MixedCaseAddressError extends viem_1.BaseError {
    name = 'MixedCaseAddressError';
    constructor({ address }) {
        super(`Mixed case address ${address}`);
    }
}
exports.MixedCaseAddressError = MixedCaseAddressError;
class InvalidAddressVersionError extends viem_1.BaseError {
    name = 'InvalidAddressVersionError';
    constructor({ address }) {
        super(`Invalid address version ${address}`);
    }
}
exports.InvalidAddressVersionError = InvalidAddressVersionError;
class AddressTypeNotMatchError extends viem_1.BaseError {
    name = 'AddressTypeNotMatchError';
    constructor({ address }) {
        super(`Address type not match ${address}`);
    }
}
exports.AddressTypeNotMatchError = AddressTypeNotMatchError;
//# sourceMappingURL=address.js.map