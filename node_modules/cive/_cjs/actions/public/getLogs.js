"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLogs = getLogs;
const utils_1 = require("viem/utils");
const chain_js_1 = require("../../errors/chain.js");
const encodeEventTopics_js_1 = require("../../utils/abi/encodeEventTopics.js");
const parseEventLogs_js_1 = require("../../utils/abi/parseEventLogs.js");
const log_js_1 = require("../../utils/formatters/log.js");
async function getLogs(client, { fromEpoch = 'latest_checkpoint', toEpoch = 'latest_state', fromBlock, toBlock, blockHashes, address, args, event, events: events_, strict: strict_, } = {}) {
    const strict = strict_ ?? false;
    const events = events_ ?? (event ? [event] : undefined);
    if (typeof client.chain === 'undefined' || !('id' in client.chain)) {
        throw new chain_js_1.ChainIdNotFoundError();
    }
    let topics = [];
    if (events) {
        const encoded = events.flatMap((event) => (0, encodeEventTopics_js_1.encodeEventTopics)({
            abi: [event],
            eventName: event.name,
            args: events_ ? undefined : args,
        }));
        topics = [encoded];
        if (event)
            topics = topics[0];
    }
    const _fromEpoch = fromBlock ? undefined : fromEpoch;
    const _toEpoch = toBlock ? undefined : toEpoch;
    const params = blockHashes
        ? {
            blockHashes,
            address,
            topics,
        }
        : {
            fromEpoch: typeof _fromEpoch === 'bigint' ? (0, utils_1.numberToHex)(_fromEpoch) : _fromEpoch,
            toEpoch: typeof _toEpoch === 'bigint' ? (0, utils_1.numberToHex)(_toEpoch) : _toEpoch,
            fromBlock: typeof fromBlock === 'bigint' ? (0, utils_1.numberToHex)(fromBlock) : fromBlock,
            toBlock: typeof toBlock === 'bigint' ? (0, utils_1.numberToHex)(toBlock) : toBlock,
            address,
            topics,
        };
    const logs = await client.request({
        method: 'cfx_getLogs',
        params: [params],
    });
    const formattedLogs = logs.map((log) => (0, log_js_1.formatLog)(log));
    if (!events)
        return formattedLogs;
    return (0, parseEventLogs_js_1.parseEventLogs)({
        abi: events,
        logs: formattedLogs,
        strict,
        networkId: client.chain.id,
    });
}
//# sourceMappingURL=getLogs.js.map