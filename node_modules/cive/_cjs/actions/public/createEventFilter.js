"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEventFilter = createEventFilter;
const utils_1 = require("viem/utils");
const createFilterRequestScope_js_1 = require("../../utils/filters/createFilterRequestScope.js");
async function createEventFilter(client, { address, args, event, events: events_, fromBlock, strict, toBlock, fromEpoch, toEpoch, blockHashes, } = {}) {
    const events = events_ ?? (event ? [event] : undefined);
    const getRequest = (0, createFilterRequestScope_js_1.createFilterRequestScope)(client, {
        method: 'cfx_newFilter',
    });
    let topics = [];
    if (events) {
        const encoded = events.flatMap((event) => (0, utils_1.encodeEventTopics)({
            abi: [event],
            eventName: event.name,
            args,
        }));
        topics = [encoded];
        if (event)
            topics = topics[0];
    }
    const fromBlock_ = typeof fromBlock === 'bigint' ? (0, utils_1.numberToHex)(fromBlock) : fromBlock;
    const toBlock_ = typeof toBlock === 'bigint' ? (0, utils_1.numberToHex)(toBlock) : toBlock;
    let id;
    if (blockHashes) {
        id = await client.request({
            method: 'cfx_newFilter',
            params: [
                {
                    fromBlock: fromBlock_,
                    toBlock: toBlock_,
                    blockHashes,
                    address,
                    ...(topics.length ? { topics } : {}),
                },
            ],
        });
    }
    else {
        const fromEpoch_ = typeof fromEpoch === 'bigint' ? (0, utils_1.numberToHex)(fromEpoch) : fromEpoch;
        const toEpoch_ = typeof toEpoch === 'bigint' ? (0, utils_1.numberToHex)(toEpoch) : toEpoch;
        id = await client.request({
            method: 'cfx_newFilter',
            params: [
                {
                    fromEpoch: fromEpoch_,
                    toEpoch: toEpoch_,
                    fromBlock: fromBlock_,
                    toBlock: toBlock_,
                    address,
                    ...(topics.length ? { topics } : {}),
                },
            ],
        });
    }
    return {
        abi: events,
        args,
        eventName: event ? event.name : undefined,
        fromBlock,
        id,
        request: getRequest(id),
        strict: Boolean(strict),
        toBlock,
        type: 'event',
    };
}
//# sourceMappingURL=createEventFilter.js.map