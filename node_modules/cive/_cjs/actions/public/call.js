"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.call = call;
exports.getRevertErrorData = getRevertErrorData;
const viem_1 = require("viem");
const parseAccount_js_1 = require("../../accounts/utils/parseAccount.js");
const contract_js_1 = require("../../constants/contract.js");
const chain_js_1 = require("../../errors/chain.js");
const decodeFunctionResult_js_1 = require("../../utils/abi/decodeFunctionResult.js");
const encodeFunctionData_js_1 = require("../../utils/abi/encodeFunctionData.js");
const getChainContractAddress_js_1 = require("../../utils/chain/getChainContractAddress.js");
const getCallError_js_1 = require("../../utils/errors/getCallError.js");
const transactionRequest_js_1 = require("../../utils/formatters/transactionRequest.js");
const createBatchScheduler_js_1 = require("../../utils/promise/createBatchScheduler.js");
async function call(client, args) {
    const { account: account_ = client.account, batch = Boolean(client.batch?.multicall), epochNumber, epochTag = 'latest_state', data, gas, gasPrice, storageLimit, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, } = args;
    const account = account_ ? (0, parseAccount_js_1.parseAccount)(account_) : undefined;
    try {
        const _epochNumber = epochNumber ? (0, viem_1.numberToHex)(epochNumber) : undefined;
        const epoch = _epochNumber || epochTag;
        const chainFormat = client.chain?.formatters?.transactionRequest?.format;
        const format = chainFormat || transactionRequest_js_1.formatTransactionRequest;
        const request = format({
            from: account?.address,
            data,
            gas,
            gasPrice,
            maxFeePerGas,
            maxPriorityFeePerGas,
            nonce,
            to,
            value,
            storageLimit,
        });
        if (batch && shouldPerformMulticall({ request })) {
            try {
                return await scheduleMulticall(client, {
                    ...request,
                    epochNumber,
                    epochTag,
                });
            }
            catch (err) {
                if (!(err instanceof viem_1.ClientChainNotConfiguredError) &&
                    !(err instanceof viem_1.ChainDoesNotSupportContract))
                    throw err;
            }
        }
        const response = await client.request({
            method: 'cfx_call',
            params: [request, epoch],
        });
        if (response === '0x')
            return { data: undefined };
        return { data: response };
    }
    catch (err) {
        getRevertErrorData(err);
        throw (0, getCallError_js_1.getCallError)(err, {
            ...args,
            account,
            chain: client.chain,
        });
    }
}
function shouldPerformMulticall({ request }) {
    const { data, to, ...request_ } = request;
    if (!data)
        return false;
    if (data.startsWith(contract_js_1.aggregate3Signature))
        return false;
    if (!to)
        return false;
    if (Object.values(request_).filter((x) => typeof x !== 'undefined').length > 0)
        return false;
    return true;
}
async function scheduleMulticall(client, args) {
    const { batchSize = 1024, wait = 0 } = typeof client.batch?.multicall === 'object' ? client.batch.multicall : {};
    const { epochNumber, epochTag = 'latest_state', data, multicallAddress: multicallAddress_, to, } = args;
    let multicallAddress = multicallAddress_;
    if (!multicallAddress) {
        if (!client.chain)
            throw new viem_1.ClientChainNotConfiguredError();
        multicallAddress = (0, getChainContractAddress_js_1.getChainContractAddress)({
            epochNumber,
            chain: client.chain,
            contract: 'multicall3',
        });
    }
    const epochNumberHex = epochNumber ? (0, viem_1.numberToHex)(epochNumber) : undefined;
    const block = epochNumberHex || epochTag;
    const { schedule } = (0, createBatchScheduler_js_1.createBatchScheduler)({
        id: `${client.uid}.${block}`,
        wait,
        shouldSplitBatch(args) {
            const size = args.reduce((size, { data }) => size + (data.length - 2), 0);
            return size > batchSize * 2;
        },
        fn: async (requests) => {
            const calls = requests.map((request) => ({
                allowFailure: true,
                callData: request.data,
                target: request.to,
            }));
            const calldata = (0, encodeFunctionData_js_1.encodeFunctionData)({
                abi: viem_1.multicall3Abi,
                args: [calls],
                functionName: 'aggregate3',
            });
            const data = await client.request({
                method: 'cfx_call',
                params: [
                    {
                        data: calldata,
                        to: multicallAddress,
                    },
                    block,
                ],
            });
            if (typeof client.chain === 'undefined' || !('id' in client.chain)) {
                throw new chain_js_1.ChainIdNotFoundError();
            }
            return (0, decodeFunctionResult_js_1.decodeFunctionResult)({
                abi: viem_1.multicall3Abi,
                args: [calls],
                functionName: 'aggregate3',
                data: data || '0x',
                networkId: client.chain.id,
            });
        },
    });
    const [{ returnData, success }] = await schedule({ data, to });
    if (!success)
        throw new viem_1.RawContractError({ data: returnData });
    if (returnData === '0x')
        return { data: undefined };
    return { data: returnData };
}
function getRevertErrorData(err) {
    if (!(err instanceof viem_1.BaseError))
        return undefined;
    const error = err.walk();
    return typeof error?.data === 'object' ? error.data?.data : error.data;
}
//# sourceMappingURL=call.js.map