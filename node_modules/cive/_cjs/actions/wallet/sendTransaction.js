"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendTransaction = sendTransaction;
const utils_1 = require("viem/utils");
const index_js_1 = require("../../accounts/index.js");
const account_js_1 = require("../../errors/account.js");
const assertCurrentChain_js_1 = require("../../utils/chain/assertCurrentChain.js");
const getTransactionError_js_1 = require("../../utils/errors/getTransactionError.js");
const transactionRequest_js_1 = require("../../utils/formatters/transactionRequest.js");
const getAction_js_1 = require("../../utils/getAction.js");
const assertRequest_js_1 = require("../../utils/transaction/assertRequest.js");
const getStatus_js_1 = require("../public/getStatus.js");
const prepareTransactionRequest_js_1 = require("./prepareTransactionRequest.js");
const sendRawTransaction_js_1 = require("./sendRawTransaction.js");
async function sendTransaction(client, parameters) {
    const { account: account_ = client.account, chain = client.chain, accessList, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, storageLimit, epochHeight, ...rest } = parameters;
    if (!account_) {
        throw new account_js_1.AccountNotFoundError({
            docsPath: '/docs/actions/wallet/sendTransaction',
        });
    }
    const account = (0, index_js_1.parseAccount)(account_);
    try {
        (0, assertRequest_js_1.assertRequest)(parameters);
        let chainId;
        if (chain !== null) {
            const nodeStatus = await (0, getAction_js_1.getAction)(client, getStatus_js_1.getStatus, 'getStatus')({});
            chainId = nodeStatus.chainId;
            (0, assertCurrentChain_js_1.assertCurrentChain)({
                currentChainId: chainId,
                chain,
            });
        }
        if (account.type === 'local') {
            const request = await (0, getAction_js_1.getAction)(client, prepareTransactionRequest_js_1.prepareTransactionRequest, 'prepareTransactionRequest')({
                account,
                accessList,
                chain,
                chainId,
                data,
                gas,
                gasPrice,
                storageLimit,
                epochHeight,
                maxFeePerGas,
                maxPriorityFeePerGas,
                nonce,
                parameters: [...prepareTransactionRequest_js_1.defaultParameters],
                to,
                value,
                ...rest,
            });
            const serializer = chain?.serializers?.transaction;
            const serializedTransaction = (await account.signTransaction(request, {
                serializer,
            }));
            return await (0, getAction_js_1.getAction)(client, sendRawTransaction_js_1.sendRawTransaction, 'sendRawTransaction')({
                serializedTransaction,
            });
        }
        const chainFormat = client.chain?.formatters?.transactionRequest?.format;
        const format = chainFormat || transactionRequest_js_1.formatTransactionRequest;
        const request = format({
            ...(0, utils_1.extract)(rest, { format: chainFormat }),
            accessList,
            data,
            from: account.address,
            gas,
            gasPrice,
            maxFeePerGas,
            maxPriorityFeePerGas,
            nonce,
            to,
            value,
        });
        return await client.request({
            method: 'cfx_sendTransaction',
            params: [request],
        }, { retryCount: 0 });
    }
    catch (err) {
        throw (0, getTransactionError_js_1.getTransactionError)(err, {
            ...parameters,
            account,
            chain: parameters.chain || undefined,
        });
    }
}
//# sourceMappingURL=sendTransaction.js.map