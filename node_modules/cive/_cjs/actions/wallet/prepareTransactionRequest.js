"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultParameters = void 0;
exports.prepareTransactionRequest = prepareTransactionRequest;
const viem_1 = require("viem");
const index_js_1 = require("../../accounts/index.js");
const transaction_js_1 = require("../../constants/transaction.js");
const decodeBase32Address_js_1 = require("../../utils/address/decodeBase32Address.js");
const getAction_js_1 = require("../../utils/getAction.js");
const assertRequest_js_1 = require("../../utils/transaction/assertRequest.js");
const getTransactionType_js_1 = require("../../utils/transaction/getTransactionType.js");
const estimateFeesPerGas_js_1 = require("../public/estimateFeesPerGas.js");
const estimateGasAndCollateral_js_1 = require("../public/estimateGasAndCollateral.js");
const getBlock_js_1 = require("../public/getBlock.js");
const getEpochNumber_js_1 = require("../public/getEpochNumber.js");
const getNextNonce_js_1 = require("../public/getNextNonce.js");
const getStatus_js_1 = require("../public/getStatus.js");
exports.defaultParameters = [
    'chainId',
    'fees',
    'gas',
    'nonce',
    'type',
    'epochHeight',
    'storageLimit',
];
async function prepareTransactionRequest(client, args) {
    const { account: account_ = client.account, chain, chainId, gas, nonce, parameters = exports.defaultParameters, type, epochHeight, storageLimit, to, data, accessList, } = args;
    const account = account_ ? (0, index_js_1.parseAccount)(account_) : undefined;
    const request = {
        ...args,
        ...(account ? { from: account?.address } : {}),
        to,
        data,
        accessList,
    };
    let block;
    async function getBlock(epochNumber) {
        if (block)
            return block;
        block = await (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, 'getBlock')({ epochNumber: epochNumber });
        return block;
    }
    if (parameters.includes('nonce') && typeof nonce === 'undefined' && account) {
        request.nonce = await (0, getAction_js_1.getAction)(client, getNextNonce_js_1.getNextNonce, 'getNextNonce')({
            address: account.address,
        });
    }
    if (parameters.includes('chainId')) {
        if (chain) {
            request.chainId = chain.id;
        }
        else if (typeof chainId !== 'undefined') {
            request.chainId = chainId;
        }
        else {
            const nodeStatus = await (0, getAction_js_1.getAction)(client, getStatus_js_1.getStatus, 'getChainId')({});
            request.chainId = nodeStatus.chainId;
        }
    }
    if (parameters.includes('epochHeight')) {
        if (typeof epochHeight !== 'undefined') {
            request.epochHeight = epochHeight;
        }
        else {
            request.epochHeight = await (0, getAction_js_1.getAction)(client, getEpochNumber_js_1.getEpochNumber, 'getEpochNumber')({ cacheTime: 0 });
        }
    }
    if ((parameters.includes('fees') || parameters.includes('type')) &&
        typeof type === 'undefined') {
        try {
            request.type = (0, getTransactionType_js_1.getTransactionType)(request);
        }
        catch {
            const block = await getBlock(request.epochHeight);
            request.type =
                typeof block?.baseFeePerGas === 'bigint' ? 'eip1559' : 'legacy';
        }
    }
    if ((parameters.includes('gas') && typeof gas === 'undefined') ||
        (parameters.includes('storageLimit') && typeof storageLimit === 'undefined')) {
        const isToUser = to && (0, decodeBase32Address_js_1.decodeBase32Address)({ address: to }).type === 'user';
        if (isToUser && !data && !accessList) {
            request.gas = transaction_js_1.transactionGas;
            request.storageLimit = transaction_js_1.transactionStorageLimit;
        }
        else {
            const { gasLimit, storageCollateralized } = await (0, getAction_js_1.getAction)(client, estimateGasAndCollateral_js_1.estimateGasAndCollateral, 'estimateGasAndCollateral')({
                ...request,
                account: account
                    ? { address: account.address, type: 'json-rpc' }
                    : undefined,
            });
            if (typeof gas === 'undefined') {
                request.gas = gasLimit;
            }
            if (typeof storageLimit === 'undefined') {
                request.storageLimit = storageCollateralized;
            }
        }
    }
    if (parameters.includes('fees')) {
        if (request.type !== 'legacy' && request.type !== 'eip2930') {
            if (typeof request.maxFeePerGas === 'undefined' ||
                typeof request.maxPriorityFeePerGas === 'undefined') {
                const block = await getBlock(request.epochHeight);
                const { maxFeePerGas, maxPriorityFeePerGas } = await (0, estimateFeesPerGas_js_1.internal_estimateFeesPerGas)(client, {
                    block: block,
                    chain,
                    request: request,
                });
                if (typeof args.maxPriorityFeePerGas === 'undefined' &&
                    args.maxFeePerGas &&
                    args.maxFeePerGas < maxPriorityFeePerGas)
                    throw new viem_1.MaxFeePerGasTooLowError({
                        maxPriorityFeePerGas,
                    });
                request.maxPriorityFeePerGas = maxPriorityFeePerGas;
                request.maxFeePerGas = maxFeePerGas;
            }
        }
        else {
            if (typeof args.maxFeePerGas !== 'undefined' ||
                typeof args.maxPriorityFeePerGas !== 'undefined')
                throw new viem_1.Eip1559FeesNotSupportedError();
            const block = await getBlock(request.epochHeight);
            const { gasPrice: gasPrice_ } = await (0, estimateFeesPerGas_js_1.internal_estimateFeesPerGas)(client, {
                block: block,
                chain,
                request: request,
                type: 'legacy',
            });
            request.gasPrice = gasPrice_;
        }
    }
    (0, assertRequest_js_1.assertRequest)(request);
    delete request.parameters;
    return request;
}
//# sourceMappingURL=prepareTransactionRequest.js.map