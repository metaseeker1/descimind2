"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeTransaction = serializeTransaction;
const viem_1 = require("viem");
const transaction_js_1 = require("../../constants/transaction.js");
const base32AddressToHex_js_1 = require("../address/base32AddressToHex.js");
const assertTransaction_js_1 = require("./assertTransaction.js");
const getTransactionType_js_1 = require("./getTransactionType.js");
const serializeAccessList_js_1 = require("./serializeAccessList.js");
function serializeTransaction(transaction, signature) {
    const type = (0, getTransactionType_js_1.getTransactionType)(transaction);
    if (type === 'eip1559')
        return serializeTransactionEIP1559(transaction, signature);
    if (type === 'eip2930')
        return serializeTransactionEIP2930(transaction, signature);
    return serializeTransactionLegacy(transaction, signature);
}
function serializeTransactionEIP1559(transaction, signature) {
    const { chainId, gas, nonce, to, value, maxFeePerGas, maxPriorityFeePerGas, accessList, data, storageLimit, epochHeight, } = transaction;
    (0, assertTransaction_js_1.assertTransactionEIP1559)(transaction);
    const serializedAccessList = (0, serializeAccessList_js_1.serializeAccessList)(accessList);
    const toHexAddress = to ? (0, base32AddressToHex_js_1.base32AddressToHex)({ address: to }) : undefined;
    const serializedTransaction = [
        nonce ? (0, viem_1.toHex)(nonce) : '0x',
        maxPriorityFeePerGas ? (0, viem_1.toHex)(maxPriorityFeePerGas) : '0x',
        maxFeePerGas ? (0, viem_1.toHex)(maxFeePerGas) : '0x',
        gas ? (0, viem_1.toHex)(gas) : '0x',
        toHexAddress ?? '0x',
        value ? (0, viem_1.toHex)(value) : '0x',
        storageLimit ? (0, viem_1.toHex)(storageLimit) : '0x',
        epochHeight ? (0, viem_1.toHex)(epochHeight) : '0x',
        (0, viem_1.toHex)(chainId),
        data ?? '0x',
        serializedAccessList,
    ];
    if (signature) {
        return (0, viem_1.concatHex)([
            transaction_js_1.rlpTransaction1559Type,
            (0, viem_1.toRlp)([
                serializedTransaction,
                signature.v ? (0, viem_1.toHex)(signature.v) : '0x',
                signature.r,
                signature.s,
            ]),
        ]);
    }
    return (0, viem_1.concatHex)([
        transaction_js_1.rlpTransaction1559Type,
        (0, viem_1.toRlp)(serializedTransaction),
    ]);
}
function serializeTransactionEIP2930(transaction, signature) {
    const { chainId, gas, data, nonce, to, value, accessList, gasPrice, storageLimit, epochHeight, } = transaction;
    (0, assertTransaction_js_1.assertTransactionEIP2930)(transaction);
    const toHexAddress = to ? (0, base32AddressToHex_js_1.base32AddressToHex)({ address: to }) : undefined;
    const serializedAccessList = (0, serializeAccessList_js_1.serializeAccessList)(accessList);
    const serializedTransaction = [
        nonce ? (0, viem_1.toHex)(nonce) : '0x',
        gasPrice ? (0, viem_1.toHex)(gasPrice) : '0x',
        gas ? (0, viem_1.toHex)(gas) : '0x',
        toHexAddress ?? '0x',
        value ? (0, viem_1.toHex)(value) : '0x',
        storageLimit ? (0, viem_1.toHex)(storageLimit) : '0x',
        epochHeight ? (0, viem_1.toHex)(epochHeight) : '0x',
        (0, viem_1.toHex)(chainId),
        data ?? '0x',
        serializedAccessList,
    ];
    if (signature) {
        return (0, viem_1.concatHex)([
            transaction_js_1.rlpTransaction2930Type,
            (0, viem_1.toRlp)([
                serializedTransaction,
                signature.v ? (0, viem_1.toHex)(signature.v) : '0x',
                signature.r,
                signature.s,
            ]),
        ]);
    }
    return (0, viem_1.concatHex)([
        transaction_js_1.rlpTransaction2930Type,
        (0, viem_1.toRlp)(serializedTransaction),
    ]);
}
function serializeTransactionLegacy(transaction, signature) {
    const { chainId = 1, gas, data, nonce, to, value, gasPrice, storageLimit, epochHeight, } = transaction;
    (0, assertTransaction_js_1.assertTransactionLegacy)(transaction);
    const serializedTransaction = [
        nonce ? (0, viem_1.toHex)(nonce) : '0x',
        gasPrice ? (0, viem_1.toHex)(gasPrice) : '0x',
        gas ? (0, viem_1.toHex)(gas) : '0x',
        to ? (0, base32AddressToHex_js_1.base32AddressToHex)({ address: to }) : '0x',
        value ? (0, viem_1.toHex)(value) : '0x',
        storageLimit ? (0, viem_1.toHex)(storageLimit) : '0x',
        epochHeight ? (0, viem_1.toHex)(epochHeight) : '0x',
    ];
    if (signature) {
        return (0, viem_1.toRlp)([
            [...serializedTransaction, (0, viem_1.toHex)(chainId), data ?? '0x'],
            signature.v ? (0, viem_1.toHex)(signature.v) : '0x',
            signature.r,
            signature.s,
        ]);
    }
    return (0, viem_1.toRlp)([
        ...serializedTransaction,
        (0, viem_1.toHex)(chainId),
        data ?? '0x',
    ]);
}
//# sourceMappingURL=serializeTransaction.js.map