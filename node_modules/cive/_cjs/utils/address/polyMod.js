"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.polyMod = polyMod;
const BIGINT_0 = 0n;
const BIGINT_1 = 1n;
const BIGINT_5 = 5n;
const BIGINT_35 = 35n;
const BIGINT_0B00001 = 1n;
const BIGINT_0B00010 = 2n;
const BIGINT_0B00100 = 4n;
const BIGINT_0B01000 = 8n;
const BIGINT_0B10000 = 16n;
const BIGINT_0X07FFFFFFFF = 34359738367n;
const BIGINT_0X98F2BC8E61 = 656907472481n;
const BIGINT_0X79B76D99E2 = 522768456162n;
const BIGINT_0XF33E5FB3C4 = 1044723512260n;
const BIGINT_0XAE2EABE2A8 = 748107326120n;
const BIGINT_0X1E4F43E470 = 130178868336n;
function polyMod(buffer) {
    let checksumBigInt = BIGINT_1;
    for (const byte of buffer) {
        const high = checksumBigInt >> BIGINT_35;
        checksumBigInt = (checksumBigInt & BIGINT_0X07FFFFFFFF) << BIGINT_5;
        checksumBigInt = byte ? checksumBigInt ^ BigInt(byte) : checksumBigInt;
        if ((high & BIGINT_0B00001) !== BIGINT_0) {
            checksumBigInt = checksumBigInt ^ BIGINT_0X98F2BC8E61;
        }
        if ((high & BIGINT_0B00010) !== BIGINT_0) {
            checksumBigInt = checksumBigInt ^ BIGINT_0X79B76D99E2;
        }
        if ((high & BIGINT_0B00100) !== BIGINT_0) {
            checksumBigInt = checksumBigInt ^ BIGINT_0XF33E5FB3C4;
        }
        if ((high & BIGINT_0B01000) !== BIGINT_0) {
            checksumBigInt = checksumBigInt ^ BIGINT_0XAE2EABE2A8;
        }
        if ((high & BIGINT_0B10000) !== BIGINT_0) {
            checksumBigInt = checksumBigInt ^ BIGINT_0X1E4F43E470;
        }
    }
    return checksumBigInt ^ BIGINT_1;
}
//# sourceMappingURL=polyMod.js.map