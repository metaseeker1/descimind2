"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNetworkIdByNetworkIdPrefix = getNetworkIdByNetworkIdPrefix;
const networkId_js_1 = require("../../constants/networkId.js");
const networkName_js_1 = require("../../constants/networkName.js");
const address_js_1 = require("../../errors/address.js");
const isValidNetworkId_js_1 = require("./isValidNetworkId.js");
function getNetworkIdByNetworkIdPrefix(networkName) {
    const lowerCaseNetworkName = networkName.toLowerCase();
    if (lowerCaseNetworkName === networkName_js_1.mainNetworkName) {
        return networkId_js_1.mainNetworkId;
    }
    if (lowerCaseNetworkName === networkName_js_1.testNetworkName) {
        return networkId_js_1.testNetworkId;
    }
    const netPrefix = lowerCaseNetworkName.slice(0, 3);
    const strNetId = lowerCaseNetworkName.slice(3);
    if (!(0, isValidNetworkId_js_1.isValidNetworkId)(strNetId)) {
        throw new address_js_1.InvalidNetworkIdError({ networkId: strNetId });
    }
    if (netPrefix !== networkName_js_1.otherNetworkName) {
        throw new address_js_1.InvalidNetworkIdError({
            networkId: strNetId,
            message: "netId prefix should be passed by 'cfx', 'cfxtest' or 'net[n]'",
        });
    }
    const netId = Number(strNetId);
    if (netId === networkId_js_1.mainNetworkId || netId === networkId_js_1.testNetworkId) {
        throw new address_js_1.InvalidNetworkIdError({
            networkId: strNetId,
            message: 'net1 or net1029 are invalid',
        });
    }
    return netId;
}
//# sourceMappingURL=getNetworkIdByNetworkIdPrefix.js.map