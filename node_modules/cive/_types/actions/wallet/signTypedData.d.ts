import type { Account } from '../../accounts/types.js';
import { type ParseAccountErrorType } from '../../accounts/utils/parseAccount.js';
import type { SignTypedDataErrorType as SignTypedDataErrorType_account } from '../../accounts/utils/signTypedData.js';
import type { Client } from '../../clients/createClient.js';
import { type AccountNotFoundErrorType } from '../../errors/account.js';
import type { ErrorType } from '../../errors/utils.js';
import type { TypedData } from '../../types/abitype.js';
import type { GetAccountParameter } from '../../types/account.js';
import type { Chain } from '../../types/chain.js';
import type { Hex } from '../../types/misc.js';
import type { TypedDataDefinition } from '../../types/typedData.js';
import type { IsHexErrorType, StringifyErrorType } from 'viem';
import type { RequestErrorType } from 'viem/utils';
import type { Transport } from '../../clients/transports/createTransport.js';
import { type GetTypesForCIP23DomainErrorType, type SerializeTypedDataErrorType, type ValidateTypedDataErrorType } from '../../utils/typedData.js';
export type SignTypedDataParameters<typedData extends TypedData | Record<string, unknown> = TypedData, primaryType extends keyof typedData | 'CIP23Domain' = keyof typedData, account extends Account | undefined = undefined, primaryTypes = typedData extends TypedData ? keyof typedData : string> = TypedDataDefinition<typedData, primaryType, primaryTypes> & GetAccountParameter<account>;
export type SignTypedDataReturnType = Hex;
export type SignTypedDataErrorType = AccountNotFoundErrorType | ParseAccountErrorType | GetTypesForCIP23DomainErrorType | ValidateTypedDataErrorType | StringifyErrorType | SignTypedDataErrorType_account | IsHexErrorType | RequestErrorType | SerializeTypedDataErrorType | ErrorType;
export declare function signTypedData<const typedData extends TypedData | Record<string, unknown>, primaryType extends keyof typedData | 'CIP23Domain', chain extends Chain | undefined, account extends Account | undefined>(client: Client<Transport, chain, account>, parameters: SignTypedDataParameters<typedData, primaryType, account>): Promise<SignTypedDataReturnType>;
//# sourceMappingURL=signTypedData.d.ts.map