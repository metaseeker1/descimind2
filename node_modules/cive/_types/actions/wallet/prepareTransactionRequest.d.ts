import { type GetTransactionRequestKzgParameter } from 'viem';
import { type ParseAccountErrorType } from '../../accounts/index.js';
import type { Account, Address } from '../../accounts/types.js';
import type { Client } from '../../clients/createClient.js';
import type { Transport } from '../../clients/transports/createTransport.js';
import type { AccountNotFoundErrorType } from '../../errors/account.js';
import type { DeriveAccount, GetAccountParameter } from '../../types/account.js';
import type { Chain, DeriveChain, GetChainParameter } from '../../types/chain.js';
import type { TransactionRequest, TransactionRequestEIP1559, TransactionRequestEIP2930, TransactionRequestLegacy } from '../../types/transaction.js';
import type { ExactPartial, IsNever, Prettify, UnionOmit, UnionRequiredBy } from '../../types/utils.js';
import type { FormattedTransactionRequest } from '../../utils/formatters/transactionRequest.js';
import { type AssertRequestErrorType } from '../../utils/transaction/assertRequest.js';
import { type GetTransactionType } from '../../utils/transaction/getTransactionType.js';
import { type EstimateGasAndCollateralParameters } from '../public/estimateGasAndCollateral.js';
import type { GetBlocksByEpochErrorType } from '../public/getBlocksByEpoch.js';
export declare const defaultParameters: readonly ["chainId", "fees", "gas", "nonce", "type", "epochHeight", "storageLimit"];
export type PrepareTransactionRequestParameterType = 'chainId' | 'fees' | 'gas' | 'nonce' | 'type' | 'epochHeight' | 'storageLimit';
type ParameterTypeToParameters<parameterType extends PrepareTransactionRequestParameterType> = parameterType extends 'fees' ? 'maxFeePerGas' | 'maxPriorityFeePerGas' | 'gasPrice' : parameterType;
export type PrepareTransactionRequestRequest<chain extends Chain | undefined = Chain | undefined, chainOverride extends Chain | undefined = Chain | undefined, _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>> = UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'> & GetTransactionRequestKzgParameter & {
    parameters?: readonly PrepareTransactionRequestParameterType[] | undefined;
};
export type PrepareTransactionRequestParameters<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, accountOverride extends Account | Address | undefined = Account | Address | undefined, request extends PrepareTransactionRequestRequest<chain, chainOverride> = PrepareTransactionRequestRequest<chain, chainOverride>> = request & GetAccountParameter<account, accountOverride, false> & GetChainParameter<chain, chainOverride> & GetTransactionRequestKzgParameter<request> & {
    chainId?: number | undefined;
};
export type PrepareTransactionRequestReturnType<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, accountOverride extends Account | Address | undefined = Account | Address | undefined, request extends PrepareTransactionRequestRequest<chain, chainOverride> = PrepareTransactionRequestRequest<chain, chainOverride>, _derivedAccount extends Account | Address | undefined = DeriveAccount<account, accountOverride>, _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>, _transactionType = request['type'] extends string | undefined ? request['type'] : GetTransactionType<request> extends 'legacy' ? unknown : GetTransactionType<request>, _transactionRequest extends TransactionRequest = (_transactionType extends 'legacy' ? TransactionRequestLegacy : never) | (_transactionType extends 'eip1559' ? TransactionRequestEIP1559 : never) | (_transactionType extends 'eip2930' ? TransactionRequestEIP2930 : never)> = Prettify<UnionRequiredBy<Extract<UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'> & (_derivedChain extends Chain ? {
    chain: _derivedChain;
} : {
    chain?: undefined;
}) & (_derivedAccount extends Account ? {
    account: _derivedAccount;
    from: Address;
} : {
    account?: undefined;
    from?: undefined;
}), IsNever<_transactionRequest> extends true ? unknown : ExactPartial<_transactionRequest>> & {
    chainId?: number | undefined;
}, ParameterTypeToParameters<request['parameters'] extends readonly PrepareTransactionRequestParameterType[] ? request['parameters'][number] : (typeof defaultParameters)[number]>>>;
export type PrepareTransactionRequestErrorType = AccountNotFoundErrorType | AssertRequestErrorType | ParseAccountErrorType | GetBlocksByEpochErrorType | EstimateGasAndCollateralParameters;
export declare function prepareTransactionRequest<chain extends Chain | undefined, account extends Account | undefined, const request extends PrepareTransactionRequestRequest<chain, chainOverride>, accountOverride extends Account | Address | undefined = undefined, chainOverride extends Chain | undefined = undefined>(client: Client<Transport, chain, account>, args: PrepareTransactionRequestParameters<chain, account, chainOverride, accountOverride, request>): Promise<PrepareTransactionRequestReturnType<chain, account, chainOverride, accountOverride, request>>;
export {};
//# sourceMappingURL=prepareTransactionRequest.d.ts.map