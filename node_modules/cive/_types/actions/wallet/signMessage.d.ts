import { type ToHexErrorType } from 'viem';
import type { RequestErrorType } from 'viem/utils';
import { type Account, type ParseAccountErrorType } from '../../accounts/index.js';
import type { SignMessageErrorType as SignMessageErrorType_account } from '../../accounts/utils/signMessage.js';
import type { Client } from '../../clients/createClient.js';
import type { Transport } from '../../clients/transports/createTransport.js';
import type { ErrorType } from '../../errors/utils.js';
import type { GetAccountParameter } from '../../types/account.js';
import type { Chain } from '../../types/chain.js';
import type { Hex, SignableMessage } from '../../types/misc.js';
export type SignMessageParameters<TAccount extends Account | undefined = Account | undefined> = GetAccountParameter<TAccount> & {
    message: SignableMessage;
};
export type SignMessageReturnType = Hex;
export type SignMessageErrorType = ParseAccountErrorType | RequestErrorType | SignMessageErrorType_account | ToHexErrorType | ErrorType;
export declare function signMessage<TChain extends Chain | undefined, TAccount extends Account | undefined>(client: Client<Transport, TChain, TAccount>, { account: account_, message, }: SignMessageParameters<TAccount>): Promise<SignMessageReturnType>;
//# sourceMappingURL=signMessage.d.ts.map