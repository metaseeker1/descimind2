import type { AssertCurrentChainErrorType, AssertRequestErrorType, GetChainIdErrorType, Hash, PrepareTransactionRequestErrorType, SendRawTransactionErrorType } from 'viem';
import type { SignTransactionErrorType } from 'viem/accounts';
import { type RequestErrorType } from 'viem/utils';
import { type ParseAccountErrorType } from '../../accounts/index.js';
import type { Account } from '../../accounts/types.js';
import type { Client } from '../../clients/createClient.js';
import type { Transport } from '../../clients/transports/createTransport.js';
import type { ErrorType } from '../../errors/utils.js';
import type { GetAccountParameter } from '../../types/account.js';
import type { Chain, DeriveChain, GetChainParameter } from '../../types/chain.js';
import type { UnionOmit } from '../../types/utils.js';
import { type GetTransactionErrorReturnType } from '../../utils/errors/getTransactionError.js';
import { type FormattedTransactionRequest } from '../../utils/formatters/transactionRequest.js';
export type SendTransactionRequest<chain extends Chain | undefined = Chain | undefined, chainOverride extends Chain | undefined = Chain | undefined, _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>> = UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'>;
export type SendTransactionParameters<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, request extends SendTransactionRequest<chain, chainOverride> = SendTransactionRequest<chain, chainOverride>> = request & GetAccountParameter<account> & GetChainParameter<chain, chainOverride>;
export type SendTransactionReturnType = Hash;
export type SendTransactionErrorType = ParseAccountErrorType | GetTransactionErrorReturnType<AssertCurrentChainErrorType | AssertRequestErrorType | GetChainIdErrorType | PrepareTransactionRequestErrorType | SendRawTransactionErrorType | SignTransactionErrorType | RequestErrorType> | ErrorType;
export declare function sendTransaction<chain extends Chain | undefined, account extends Account | undefined, const request extends SendTransactionRequest<chain, chainOverride>, chainOverride extends Chain | undefined = undefined>(client: Client<Transport, chain, account>, parameters: SendTransactionParameters<chain, account, chainOverride, request>): Promise<SendTransactionReturnType>;
//# sourceMappingURL=sendTransaction.d.ts.map