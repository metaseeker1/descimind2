import type { EncodeEventTopicsErrorType, Hash, NumberToHexErrorType } from 'viem';
import type { RequestErrorType } from 'viem/utils';
import type { Address } from '../../accounts/types.js';
import type { Client } from '../../clients/createClient.js';
import type { Transport } from '../../clients/transports/createTransport.js';
import type { ErrorType } from '../../errors/utils.js';
import type { AbiEvent } from '../../types/abitype.js';
import type { EpochNumber, EpochTag } from '../../types/block.js';
import type { Chain } from '../../types/chain.js';
import type { MaybeAbiEventName, MaybeExtractEventArgsFromAbi } from '../../types/contract.js';
import type { Filter } from '../../types/filter.js';
import type { Prettify } from '../../types/utils.js';
export type CreateEventFilterParameters<TAbiEvent extends AbiEvent | undefined = undefined, TAbiEvents extends readonly AbiEvent[] | readonly unknown[] | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined, TStrict extends boolean | undefined = undefined, _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>, _Args extends MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName> | undefined = undefined> = {
    address?: Address | Address[] | undefined;
    fromBlock?: bigint | undefined;
    toBlock?: bigint | undefined;
    /**
     * @default latest_checkpoint
     */
    fromEpoch?: EpochNumber | EpochTag | undefined;
    /**
     * @default latest_checkpoint
     */
    toEpoch?: EpochNumber | EpochTag | undefined;
    blockHashes?: Hash[] | undefined;
} & (MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName> extends infer TEventFilterArgs ? {
    args: TEventFilterArgs | (_Args extends TEventFilterArgs ? _Args : never);
    event: TAbiEvent;
    events?: never | undefined;
    /**
     * Whether or not the logs must match the indexed/non-indexed arguments on `event`.
     * @default false
     */
    strict?: TStrict | undefined;
} | {
    args?: never | undefined;
    event?: TAbiEvent | undefined;
    events?: never | undefined;
    /**
     * Whether or not the logs must match the indexed/non-indexed arguments on `event`.
     * @default false
     */
    strict?: TStrict | undefined;
} | {
    args?: never | undefined;
    event?: never | undefined;
    events: TAbiEvents | undefined;
    /**
     * Whether or not the logs must match the indexed/non-indexed arguments on `event`.
     * @default false
     */
    strict?: TStrict | undefined;
} | {
    args?: never | undefined;
    event?: never | undefined;
    events?: never | undefined;
    strict?: never | undefined;
} : {
    args?: never | undefined;
    event?: never | undefined;
    events?: never | undefined;
    strict?: never | undefined;
});
export type CreateEventFilterReturnType<TAbiEvent extends AbiEvent | undefined = undefined, TAbiEvents extends readonly AbiEvent[] | readonly unknown[] | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined, TStrict extends boolean | undefined = undefined, TFromEpoch extends EpochNumber | EpochTag | undefined = undefined, TToEpoch extends EpochNumber | EpochTag | undefined = undefined, _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>, _Args extends MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName> | undefined = undefined> = Prettify<Filter<'event', TAbiEvents, _EventName, _Args, TStrict, TFromEpoch, TToEpoch>>;
export type CreateEventFilterErrorType = EncodeEventTopicsErrorType | RequestErrorType | NumberToHexErrorType | ErrorType;
export declare function createEventFilter<TChain extends Chain | undefined, const TAbiEvent extends AbiEvent | undefined = undefined, const TAbiEvents extends readonly AbiEvent[] | readonly unknown[] | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined, TStrict extends boolean | undefined = undefined, TFromEpoch extends EpochNumber | EpochTag | undefined = undefined, TToEpoch extends EpochNumber | EpochTag | undefined = undefined, _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>, _Args extends MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName> | undefined = undefined>(client: Client<Transport, TChain>, { address, args, event, events: events_, fromBlock, strict, toBlock, fromEpoch, toEpoch, blockHashes, }?: CreateEventFilterParameters<TAbiEvent, TAbiEvents, TStrict, _EventName, _Args>): Promise<CreateEventFilterReturnType<TAbiEvent, TAbiEvents, TStrict, TFromEpoch, TToEpoch, _EventName, _Args>>;
//# sourceMappingURL=createEventFilter.d.ts.map