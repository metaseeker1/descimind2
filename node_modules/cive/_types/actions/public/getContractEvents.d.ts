import type { Client } from '../../clients/createClient.js';
import type { Transport } from '../../clients/transports/createTransport.js';
import type { ErrorType } from '../../errors/utils.js';
import type { Abi, Address } from '../../types/abitype.js';
import type { EpochNumber, EpochTag } from '../../types/block.js';
import type { Chain } from '../../types/chain.js';
import type { ContractEventArgs, ContractEventName } from '../../types/contract.js';
import type { Log } from '../../types/log.js';
import type { Hash } from '../../types/misc.js';
import { type GetAbiItemErrorType } from '../../utils/index.js';
import { type GetLogsErrorType } from './getLogs.js';
export type GetContractEventsParameters<abi extends Abi | readonly unknown[] = Abi, eventName extends ContractEventName<abi> | undefined = ContractEventName<abi> | undefined, strict extends boolean | undefined = undefined> = {
    /** The address of the contract. */
    address?: Address | Address[] | undefined;
    /** Contract ABI. */
    abi: abi;
    args?: ContractEventArgs<abi, eventName extends ContractEventName<abi> ? eventName : ContractEventName<abi>> | undefined;
    /** Contract event. */
    eventName?: eventName | ContractEventName<abi> | undefined;
    /**
     * Whether or not the logs must match the indexed/non-indexed arguments on `event`.
     * @default false
     */
    strict?: strict | boolean | undefined;
} & ({
    /**
     * @default latest_checkpoint
     */
    fromEpoch?: EpochNumber | Exclude<EpochTag, 'latest_finalized' | 'latest_mined'>;
    /**
     * @default latest_state
     */
    toEpoch?: EpochNumber | Exclude<EpochTag, 'latest_finalized' | 'latest_mined'>;
    toBlock?: never | undefined;
    fromBlock?: never | undefined;
    blockHashes?: never | undefined;
} | {
    fromEpoch?: never | undefined;
    toEpoch?: never | undefined;
    toBlock: EpochNumber;
    fromBlock: EpochNumber;
    blockHashes?: never | undefined;
} | {
    fromEpoch?: never | undefined;
    toEpoch?: never | undefined;
    toBlock?: never | undefined;
    fromBlock?: never | undefined;
    blockHashes: Hash[];
});
export type GetContractEventsReturnType<abi extends Abi | readonly unknown[] = readonly unknown[], eventName extends ContractEventName<abi> | undefined = ContractEventName<abi> | undefined, strict extends boolean | undefined = undefined> = Log<bigint, number, undefined, strict, abi, eventName>[];
export type GetContractEventsErrorType = GetAbiItemErrorType | GetLogsErrorType | ErrorType;
export declare function getContractEvents<chain extends Chain | undefined, const abi extends Abi | readonly unknown[], eventName extends ContractEventName<abi> | undefined = undefined, strict extends boolean | undefined = undefined>(client: Client<Transport, chain>, parameters: GetContractEventsParameters<abi, eventName, strict>): Promise<GetContractEventsReturnType<abi, eventName, strict>>;
//# sourceMappingURL=getContractEvents.d.ts.map