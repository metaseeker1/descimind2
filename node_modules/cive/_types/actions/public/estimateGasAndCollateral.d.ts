import type { Account, Address } from '../../accounts/types.js';
import type { Client } from '../../clients/createClient.js';
import type { Transport } from '../../clients/transports/createTransport.js';
import type { EpochNumber, EpochTag } from '../../types/block.js';
import type { Chain } from '../../types/chain.js';
import type { GasAndCollateral } from '../../types/fee.js';
import type { UnionOmit } from '../../types/utils.js';
import { type FormattedTransactionRequest } from '../../utils/formatters/transactionRequest.js';
export type FormattedCall<TChain extends Chain | undefined = Chain | undefined> = FormattedTransactionRequest<TChain>;
export type EstimateGasAndCollateralParameters<TChain extends Chain | undefined = Chain | undefined> = UnionOmit<FormattedCall<TChain>, 'from'> & {
    account?: Address | Account | undefined;
    batch?: boolean | undefined;
} & ({
    /**
     * @default 'latest_state'
     */
    epochTag?: Exclude<EpochTag, 'latest_finalized' | 'latest_mined'> | undefined;
    epochNumber?: never | undefined;
} | {
    epochTag?: never | undefined;
    epochNumber?: EpochNumber | undefined;
});
export type EstimateGasAndCollateralReturnType = GasAndCollateral;
export declare function estimateGasAndCollateral<TChain extends Chain | undefined>(client: Client<Transport, TChain>, args: EstimateGasAndCollateralParameters<TChain>): Promise<EstimateGasAndCollateralReturnType>;
//# sourceMappingURL=estimateGasAndCollateral.d.ts.map