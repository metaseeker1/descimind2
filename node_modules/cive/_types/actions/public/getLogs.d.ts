import type { DecodeEventLogErrorType, EncodeEventTopicsErrorType, FormatLogErrorType, Hash, NumberToHexErrorType } from 'viem';
import type { RequestErrorType } from 'viem/utils';
import type { Address } from '../../accounts/types.js';
import type { Client } from '../../clients/createClient.js';
import type { Transport } from '../../clients/transports/createTransport.js';
import type { ErrorType } from '../../errors/utils.js';
import type { AbiEvent } from '../../types/abitype.js';
import type { EpochNumber, EpochTag } from '../../types/block.js';
import type { Chain } from '../../types/chain.js';
import type { MaybeAbiEventName, MaybeExtractEventArgsFromAbi } from '../../types/contract.js';
import type { Log } from '../../types/log.js';
export type GetLogsParameters<TAbiEvent extends AbiEvent | undefined = undefined, TAbiEvents extends readonly AbiEvent[] | readonly unknown[] | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined, TStrict extends boolean | undefined = undefined, _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>> = {
    /** Address or list of addresses from which logs originated */
    address?: Address | Address[] | undefined;
    fromBlock?: bigint | undefined;
    toBlock?: bigint | undefined;
} & ({
    event: TAbiEvent;
    events?: never | undefined;
    args?: MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName> | undefined;
    /**
     * Whether or not the logs must match the indexed/non-indexed arguments on `event`.
     * @default false
     */
    strict?: TStrict | undefined;
} | {
    event?: never | undefined;
    events: TAbiEvents;
    args?: never | undefined;
    /**
     * Whether or not the logs must match the indexed/non-indexed arguments on `event`.
     * @default false
     */
    strict?: TStrict | undefined;
} | {
    event?: never | undefined;
    events?: never | undefined;
    args?: never | undefined;
    strict?: never | undefined;
}) & ({
    /**
     * @default latest_checkpoint
     */
    fromEpoch?: EpochNumber | Exclude<EpochTag, 'latest_finalized' | 'latest_mined'>;
    /**
     * @default latest_state
     */
    toEpoch?: EpochNumber | Exclude<EpochTag, 'latest_finalized' | 'latest_mined'>;
    toBlock?: never | undefined;
    fromBlock?: never | undefined;
    blockHashes?: never | undefined;
} | {
    fromEpoch?: never | undefined;
    toEpoch?: never | undefined;
    toBlock: EpochNumber;
    fromBlock: EpochNumber;
    blockHashes?: never | undefined;
} | {
    fromEpoch?: never | undefined;
    toEpoch?: never | undefined;
    toBlock?: never | undefined;
    fromBlock?: never | undefined;
    blockHashes: Hash[];
});
export type GetLogsReturnType<TAbiEvent extends AbiEvent | undefined = undefined, TAbiEvents extends readonly AbiEvent[] | readonly unknown[] | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined, TStrict extends boolean | undefined = undefined, _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>> = Log<bigint, number, TAbiEvent, TStrict, TAbiEvents, _EventName>[];
export type GetLogsErrorType = DecodeEventLogErrorType | EncodeEventTopicsErrorType | FormatLogErrorType | NumberToHexErrorType | RequestErrorType | ErrorType;
export declare function getLogs<TChain extends Chain | undefined, const TAbiEvent extends AbiEvent | undefined = undefined, const TAbiEvents extends readonly AbiEvent[] | readonly unknown[] | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined, TStrict extends boolean | undefined = undefined>(client: Client<Transport, TChain>, { fromEpoch, toEpoch, fromBlock, toBlock, blockHashes, address, args, event, events: events_, strict: strict_, }?: GetLogsParameters<TAbiEvent, TAbiEvents, TStrict>): Promise<GetLogsReturnType<TAbiEvent, TAbiEvents, TStrict>>;
//# sourceMappingURL=getLogs.d.ts.map