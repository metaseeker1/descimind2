import { type AssertRequestErrorType, type DecodeFunctionResultErrorType, type EncodeFunctionDataErrorType, type GetChainContractAddressErrorType, type Hex, type NumberToHexErrorType } from 'viem';
import type { GetCallErrorReturnType, RequestErrorType } from 'viem/utils';
import type { Account, Address } from '../../accounts/types.js';
import { type ParseAccountErrorType } from '../../accounts/utils/parseAccount.js';
import type { Client } from '../../clients/createClient.js';
import type { Transport } from '../../clients/transports/createTransport.js';
import type { ErrorType } from '../../errors/utils.js';
import type { EpochNumber, EpochTag } from '../../types/block.js';
import type { Chain } from '../../types/chain.js';
import type { UnionOmit } from '../../types/utils.js';
import { type FormattedTransactionRequest } from '../../utils/formatters/transactionRequest.js';
import { type CreateBatchSchedulerErrorType } from '../../utils/promise/createBatchScheduler.js';
export type FormattedCall<TChain extends Chain | undefined = Chain | undefined> = FormattedTransactionRequest<TChain>;
export type CallParameters<TChain extends Chain | undefined = Chain | undefined> = UnionOmit<FormattedCall<TChain>, 'from'> & {
    account?: Account | Address | undefined;
    batch?: boolean | undefined;
} & ({
    /**
     * @default 'latest_state'
     */
    epochTag?: Exclude<EpochTag, 'latest_finalized' | 'latest_mined'> | undefined;
    epochNumber?: never | undefined;
} | {
    epochTag?: never | undefined;
    epochNumber?: EpochNumber | undefined;
});
export type CallReturnType = {
    data: Hex | undefined;
};
export type CallErrorType = GetCallErrorReturnType<ParseAccountErrorType | AssertRequestErrorType | NumberToHexErrorType | ScheduleMulticallErrorType | RequestErrorType>;
export declare function call<TChain extends Chain | undefined>(client: Client<Transport, TChain>, args: CallParameters<TChain>): Promise<CallReturnType>;
export type ScheduleMulticallErrorType = GetChainContractAddressErrorType | NumberToHexErrorType | CreateBatchSchedulerErrorType | EncodeFunctionDataErrorType | DecodeFunctionResultErrorType | ErrorType;
export type GetRevertErrorDataErrorType = ErrorType;
export declare function getRevertErrorData(err: unknown): `0x${string}` | undefined;
//# sourceMappingURL=call.d.ts.map