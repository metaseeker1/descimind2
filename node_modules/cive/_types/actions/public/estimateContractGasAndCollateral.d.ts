import type { EstimateGasErrorType } from 'viem';
import type { Account } from '../../accounts/types.js';
import type { Client } from '../../clients/createClient.js';
import type { Transport } from '../../clients/transports/createTransport.js';
import { type GetContractErrorReturnType } from '../../errors/getContractError.js';
import type { Abi } from '../../types/abitype.js';
import type { Chain } from '../../types/chain.js';
import type { ContractFunctionArgs, ContractFunctionName, ContractFunctionParameters, GetValue } from '../../types/contract.js';
import type { UnionOmit } from '../../types/utils.js';
import { type EncodeFunctionDataErrorType, type ParseAccountErrorType } from '../../utils/index.js';
import { type EstimateGasAndCollateralParameters, type EstimateGasAndCollateralReturnType } from './estimateGasAndCollateral.js';
export type EstimateContractGasAndCollateralParameters<abi extends Abi | readonly unknown[] = Abi, functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'> = ContractFunctionName<abi, 'nonpayable' | 'payable'>, args extends ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName> = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>, chain extends Chain | undefined = Chain | undefined> = ContractFunctionParameters<abi, 'nonpayable' | 'payable', functionName, args> & UnionOmit<EstimateGasAndCollateralParameters<chain>, 'data' | 'to' | 'value'> & GetValue<abi, functionName, EstimateGasAndCollateralParameters<chain> extends EstimateGasAndCollateralParameters ? EstimateGasAndCollateralParameters<chain>['value'] : EstimateGasAndCollateralParameters['value']>;
export type EstimateContractGasAndCollateralReturnType = EstimateGasAndCollateralReturnType;
export type EstimateContractGasAndCollateralErrorType = GetContractErrorReturnType<EncodeFunctionDataErrorType | EstimateGasErrorType | ParseAccountErrorType>;
export declare function estimateContractGasAndCollateral<const abi extends Abi | readonly unknown[], functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>, args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>, chain extends Chain | undefined, account extends Account | undefined = undefined>(client: Client<Transport, chain, account>, parameters: EstimateContractGasAndCollateralParameters<abi, functionName, args, chain>): Promise<EstimateContractGasAndCollateralReturnType>;
//# sourceMappingURL=estimateContractGasAndCollateral.d.ts.map