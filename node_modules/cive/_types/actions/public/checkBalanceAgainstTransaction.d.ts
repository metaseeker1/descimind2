import type { NumberToHexErrorType, RequestErrorType } from 'viem/utils';
import type { Address } from '../../accounts/types.js';
import type { Client } from '../../clients/createClient.js';
import type { Transport } from '../../clients/transports/createTransport.js';
import type { ErrorType } from '../../errors/utils.js';
import type { EpochNumber, EpochTag } from '../../types/block.js';
import type { Chain } from '../../types/chain.js';
export type CheckBalanceAgainstTransactionParameters = {
    accountAddress: Address;
    contractAddress: Address;
    gasLimit: number;
    gasPrice: number;
    storageLimit: number;
} & ({
    /**
     * @default 'latest_state'
     */
    epochTag?: Exclude<EpochTag, 'latest_finalized' | 'latest_mined'> | undefined;
    epochNumber?: never | undefined;
} | {
    epochTag?: never | undefined;
    epochNumber?: EpochNumber | undefined;
});
export type CheckBalanceAgainstTransactionReturnType = {
    isBalanceEnough: boolean;
    willPayCollateral: boolean;
    willPayTxFee: boolean;
};
export type CheckBalanceAgainstTransactionErrorType = RequestErrorType | NumberToHexErrorType | ErrorType;
export declare function checkBalanceAgainstTransaction<TChain extends Chain | undefined>(client: Client<Transport, TChain>, { accountAddress, contractAddress, gasLimit, gasPrice, storageLimit, epochTag, epochNumber, }: CheckBalanceAgainstTransactionParameters): Promise<CheckBalanceAgainstTransactionReturnType>;
//# sourceMappingURL=checkBalanceAgainstTransaction.d.ts.map