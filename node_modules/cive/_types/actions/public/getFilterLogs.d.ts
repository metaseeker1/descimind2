import type { DecodeEventLogErrorType, FormatLogErrorType } from 'viem';
import type { RequestErrorType } from 'viem/utils';
import type { Client } from '../../clients/createClient.js';
import type { ErrorType } from '../../errors/utils.js';
import type { Abi, AbiEvent, ExtractAbiEvent } from '../../types/abitype.js';
import type { Filter } from '../../types/filter.js';
import type { Log } from '../../types/log.js';
import type { Transport } from '../../clients/transports/createTransport.js';
import type { Chain } from '../../types/chain.js';
export type GetFilterLogsParameters<TAbi extends Abi | readonly unknown[] | undefined = undefined, TEventName extends string | undefined = undefined, TStrict extends boolean | undefined = undefined> = {
    filter: Filter<'event', TAbi, TEventName, any, TStrict>;
};
export type GetFilterLogsReturnType<TAbi extends Abi | readonly unknown[] | undefined = undefined, TEventName extends string | undefined = undefined, TStrict extends boolean | undefined = undefined, _AbiEvent extends AbiEvent | undefined = TAbi extends Abi ? TEventName extends string ? ExtractAbiEvent<TAbi, TEventName> : undefined : undefined> = Log<bigint, number, _AbiEvent, TStrict, TAbi, TEventName>[];
export type GetFilterLogsErrorType = RequestErrorType | DecodeEventLogErrorType | FormatLogErrorType | ErrorType;
export declare function getFilterLogs<TChain extends Chain | undefined, const TAbi extends Abi | readonly unknown[] | undefined, TEventName extends string | undefined, TStrict extends boolean | undefined = undefined>(client: Client<Transport, TChain>, { filter }: GetFilterLogsParameters<TAbi, TEventName, TStrict>): Promise<GetFilterLogsReturnType<TAbi, TEventName, TStrict>>;
//# sourceMappingURL=getFilterLogs.d.ts.map