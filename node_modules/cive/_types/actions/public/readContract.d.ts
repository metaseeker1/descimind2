import type { GetContractErrorReturnType } from 'viem';
import type { Client } from '../../clients/createClient.js';
import type { Transport } from '../../clients/transports/createTransport.js';
import type { Abi } from '../../types/abitype.js';
import type { Chain } from '../../types/chain.js';
import type { ContractFunctionArgs, ContractFunctionName, ContractFunctionParameters, ContractFunctionReturnType } from '../../types/contract.js';
import type { UnionEvaluate } from '../../types/utils.js';
import { type DecodeFunctionResultErrorType, type EncodeFunctionDataErrorType } from '../../utils/index.js';
import { type CallErrorType, type CallParameters } from './call.js';
export type ReadContractParameters<abi extends Abi | readonly unknown[] = Abi, functionName extends ContractFunctionName<abi, 'pure' | 'view'> = ContractFunctionName<abi, 'pure' | 'view'>, args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName> = ContractFunctionArgs<abi, 'pure' | 'view', functionName>> = UnionEvaluate<Pick<CallParameters, 'account' | 'epochNumber' | 'epochTag'>> & ContractFunctionParameters<abi, 'pure' | 'view', functionName, args, boolean>;
export type ReadContractReturnType<abi extends Abi | readonly unknown[] = Abi, functionName extends ContractFunctionName<abi, 'pure' | 'view'> = ContractFunctionName<abi, 'pure' | 'view'>, args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName> = ContractFunctionArgs<abi, 'pure' | 'view', functionName>> = ContractFunctionReturnType<abi, 'pure' | 'view', functionName, args>;
export type ReadContractErrorType = GetContractErrorReturnType<CallErrorType | EncodeFunctionDataErrorType | DecodeFunctionResultErrorType>;
export declare function readContract<chain extends Chain | undefined, const abi extends Abi | readonly unknown[], functionName extends ContractFunctionName<abi, 'pure' | 'view'>, const args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>>(client: Client<Transport, chain>, parameters: ReadContractParameters<abi, functionName, args>): Promise<ReadContractReturnType<abi, functionName, args>>;
//# sourceMappingURL=readContract.d.ts.map