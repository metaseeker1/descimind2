import type { Client } from '../../clients/createClient.js';
import type { Transport } from '../../clients/transports/createTransport.js';
import type { ErrorType } from '../../errors/utils.js';
import type { Chain } from '../../types/chain.js';
import type { HasTransportType } from '../../types/transport.js';
import { type PollErrorType } from '../../utils/poll.js';
import { type GetEpochNumberParameters, type GetEpochNumberReturnType } from './getEpochNumber.js';
export type OnEpochNumberParameter = GetEpochNumberReturnType;
export type OnEpochNumberFn = (epochNumber: OnEpochNumberParameter, prevEpochNumber: OnEpochNumberParameter | undefined) => void;
export type WatchEpochNumberParameters<transport extends Transport = Transport> = {
    /** The callback to call when a new Epoch number is received. */
    onEpochNumber: OnEpochNumberFn;
    /** The callback to call when an error occurred when trying to get for a new Epoch. */
    onError?: ((error: Error) => void) | undefined;
    epochTag?: GetEpochNumberParameters['epochTag'];
} & ((HasTransportType<transport, 'webSocket'> extends true ? {
    emitMissed?: undefined;
    emitOnBegin?: undefined;
    /** Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`. */
    poll?: false | undefined;
    pollingInterval?: undefined;
} : never) | {
    /** Whether or not to emit the missed Epoch numbers to the callback. */
    emitMissed?: boolean | undefined;
    /** Whether or not to emit the latest Epoch number to the callback when the subscription opens. */
    emitOnBegin?: boolean | undefined;
    poll?: true | undefined;
    /** Polling frequency (in ms). Defaults to Client's pollingInterval config. */
    pollingInterval?: number | undefined;
});
export type WatchEpochNumberReturnType = () => void;
export type WatchEpochNumberErrorType = PollErrorType | ErrorType;
export declare function watchEpochNumber<chain extends Chain | undefined, transport extends Transport>(client: Client<transport, chain>, { emitOnBegin, emitMissed, onEpochNumber, onError, poll: poll_, pollingInterval, epochTag, }: WatchEpochNumberParameters<transport>): WatchEpochNumberReturnType;
//# sourceMappingURL=watchEpochNumber.d.ts.map