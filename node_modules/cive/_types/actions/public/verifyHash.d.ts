import type { IsHexErrorType, ToHexErrorType } from 'viem';
import type { Client } from '../../clients/createClient.js';
import type { Transport } from '../../clients/transports/createTransport.js';
import type { ErrorType } from '../../errors/utils.js';
import type { Address } from '../../types/abitype.js';
import type { EpochNumber, EpochTag } from '../../types/block.js';
import type { Chain } from '../../types/chain.js';
import type { ByteArray, Hex, Signature } from '../../types/misc.js';
import type { OneOf } from '../../types/utils.js';
import { type EncodeDeployDataErrorType } from '../../utils/index.js';
import { type CallErrorType } from './call.js';
export type VerifyHashParameters = ({
    /**
     * @default 'latest_state'
     */
    epochTag?: Exclude<EpochTag, 'latest_finalized' | 'latest_mined'> | undefined;
    epochNumber?: never | undefined;
} | {
    epochTag?: never | undefined;
    epochNumber?: EpochNumber | undefined;
}) & {
    /**
     * The signed the original message hash address
     */
    address: Address;
    /**
     * The message hash
     */
    hash: Hex;
    signature: Hex | ByteArray | Signature;
} & OneOf<{
    factory: Address;
    factoryData: Hex;
} | {}>;
export type VerifyHashReturnType = boolean;
export type VerifyHashErrorType = CallErrorType | IsHexErrorType | ToHexErrorType | EncodeDeployDataErrorType | ErrorType;
export declare function verifyHash<chain extends Chain | undefined>(client: Client<Transport, chain>, parameters: VerifyHashParameters): Promise<VerifyHashReturnType>;
//# sourceMappingURL=verifyHash.d.ts.map