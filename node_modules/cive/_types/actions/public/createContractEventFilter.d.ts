import type { Abi, Address } from '../../types/abitype.js';
import type { Client } from '../../clients/createClient.js';
import type { ErrorType } from '../../errors/utils.js';
import type { Chain } from '../../types/chain.js';
import type { ContractEventName, MaybeExtractEventArgsFromAbi } from '../../types/contract.js';
import type { Filter } from '../../types/filter.js';
import type { Hash } from '../../types/misc.js';
import { type EncodeEventTopicsErrorType } from '../../utils/abi/encodeEventTopics.js';
import type { NumberToHexErrorType, RequestErrorType } from 'viem/utils';
import type { Transport } from '../../clients/transports/createTransport.js';
import type { EpochNumber, EpochTag } from '../../types/block.js';
export type CreateContractEventFilterParameters<abi extends Abi | readonly unknown[] = Abi, eventName extends ContractEventName<abi> | undefined = undefined, args extends MaybeExtractEventArgsFromAbi<abi, eventName> | undefined = undefined, strict extends boolean | undefined = undefined> = {
    address?: Address | Address[] | undefined;
    abi: abi;
    eventName?: eventName | ContractEventName<abi> | undefined;
    /**
     * Whether or not the logs must match the indexed/non-indexed arguments in the event ABI item.
     * @default false
     */
    strict?: strict | boolean | undefined;
} & (undefined extends eventName ? {
    args?: undefined;
} : MaybeExtractEventArgsFromAbi<abi, eventName> extends infer eventFilterArgs ? {
    args?: eventFilterArgs | (args extends eventFilterArgs ? args : never) | undefined;
} : {
    args?: undefined;
}) & ({
    /**
     * @default latest_checkpoint
     */
    fromEpoch?: EpochNumber | EpochTag;
    /**
     * @default latest_state
     */
    toEpoch?: EpochNumber | EpochTag;
    toBlock?: never | undefined;
    fromBlock?: never | undefined;
    blockHashes?: never | undefined;
} | {
    fromEpoch?: never | undefined;
    toEpoch?: never | undefined;
    toBlock: EpochNumber;
    fromBlock: EpochNumber;
    blockHashes?: never | undefined;
} | {
    fromEpoch?: never | undefined;
    toEpoch?: never | undefined;
    toBlock?: never | undefined;
    fromBlock?: never | undefined;
    blockHashes: Hash[];
});
export type CreateContractEventFilterReturnType<abi extends Abi | readonly unknown[] = Abi, eventName extends ContractEventName<abi> | undefined = undefined, args extends MaybeExtractEventArgsFromAbi<abi, eventName> | undefined = undefined, strict extends boolean | undefined = undefined, fromBlock extends EpochNumber | EpochTag | undefined = undefined, toBlock extends EpochNumber | EpochTag | undefined = undefined> = Filter<'event', abi, eventName, args, strict, fromBlock, toBlock>;
export type CreateContractEventFilterErrorType = EncodeEventTopicsErrorType | RequestErrorType | NumberToHexErrorType | ErrorType;
export declare function createContractEventFilter<chain extends Chain | undefined, const abi extends Abi | readonly unknown[], eventName extends ContractEventName<abi> | undefined, args extends MaybeExtractEventArgsFromAbi<abi, eventName> | undefined, strict extends boolean | undefined = undefined>(client: Client<Transport, chain>, parameters: CreateContractEventFilterParameters<abi, eventName, args, strict>): Promise<CreateContractEventFilterReturnType<abi, eventName, args, strict>>;
//# sourceMappingURL=createContractEventFilter.d.ts.map