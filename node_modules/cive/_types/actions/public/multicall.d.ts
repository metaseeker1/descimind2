import type { Address } from '../../accounts/types.js';
import type { Client } from '../../clients/createClient.js';
import type { Transport } from '../../clients/transports/createTransport.js';
import { type GetContractErrorReturnType } from '../../errors/getContractError.js';
import type { ErrorType } from '../../errors/utils.js';
import type { AbiStateMutability, Narrow } from '../../types/abitype.js';
import type { Chain } from '../../types/chain.js';
import type { ContractFunctionParameters } from '../../types/contract.js';
import type { MulticallContracts, MulticallResults } from '../../types/multicall.js';
import { type GetChainContractAddressErrorType } from '../../utils/chain/getChainContractAddress.js';
import { type DecodeFunctionResultErrorType, type EncodeFunctionDataErrorType } from '../../utils/index.js';
import type { CallParameters } from './call.js';
import { type ReadContractErrorType } from './readContract.js';
export type MulticallParameters<contracts extends readonly unknown[] = readonly ContractFunctionParameters[], allowFailure extends boolean = true, options extends {
    optional?: boolean;
    properties?: Record<string, any>;
} = {}> = Pick<CallParameters, 'epochNumber' | 'epochTag' | 'storageLimit'> & {
    allowFailure?: allowFailure | boolean | undefined;
    batchSize?: number | undefined;
    contracts: MulticallContracts<Narrow<contracts>, {
        mutability: AbiStateMutability;
    } & options>;
    multicallAddress?: Address | undefined;
};
export type MulticallReturnType<contracts extends readonly unknown[] = readonly ContractFunctionParameters[], allowFailure extends boolean = true, options extends {
    error?: Error;
} = {
    error: Error;
}> = MulticallResults<Narrow<contracts>, allowFailure, {
    mutability: AbiStateMutability;
} & options>;
export type MulticallErrorType = GetChainContractAddressErrorType | ReadContractErrorType | GetContractErrorReturnType<EncodeFunctionDataErrorType | DecodeFunctionResultErrorType> | ErrorType;
export declare function multicall<const contracts extends readonly unknown[], chain extends Chain | undefined, allowFailure extends boolean = true>(client: Client<Transport, chain>, parameters: MulticallParameters<contracts, allowFailure>): Promise<MulticallReturnType<contracts, allowFailure>>;
//# sourceMappingURL=multicall.d.ts.map