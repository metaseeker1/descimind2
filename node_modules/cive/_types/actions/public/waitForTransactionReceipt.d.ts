import type { Client } from '../../clients/createClient.js';
import type { Transport } from '../../clients/transports/createTransport.js';
import type { ErrorType } from '../../errors/utils.js';
import type { Chain } from '../../types/chain.js';
import type { Hash } from '../../types/misc.js';
import { type ObserveErrorType } from '../../types/observe.js';
import type { Transaction } from '../../types/transaction.js';
import { type WithRetryParameters } from '../../utils/promise/withRetry.js';
import type { GetEpochNumberParameters } from './getEpochNumber.js';
import { type GetTransactionErrorType } from './getTransaction.js';
import { type GetTransactionReceiptErrorType, type GetTransactionReceiptReturnType } from './getTransactionReceipt.js';
import { type WatchEpochNumberErrorType } from './watchEpochNumber.js';
export type ReplacementReason = 'cancelled' | 'replaced' | 'repriced';
export type ReplacementReturnType<chain extends Chain | undefined = Chain | undefined> = {
    reason: ReplacementReason;
    replacedTransaction: Transaction;
    transaction: Transaction;
    transactionReceipt: GetTransactionReceiptReturnType<chain>;
};
export type WaitForTransactionReceiptReturnType<chain extends Chain | undefined = Chain | undefined> = GetTransactionReceiptReturnType<chain>;
export type WaitForTransactionReceiptParameters<chain extends Chain | undefined = Chain | undefined> = {
    /**
     * The number of confirmations (epochs that have passed) to wait before resolving.
     * @default 1
     */
    confirmations?: number | undefined;
    /** The hash of the transaction. */
    hash: Hash;
    /** Optional callback to emit if the transaction has been replaced. */
    onReplaced?: ((response: ReplacementReturnType<chain>) => void) | undefined;
    /**
     * Polling frequency (in ms). Defaults to the client's pollingInterval config.
     * @default client.pollingInterval
     */
    pollingInterval?: number | undefined;
    /**
     * Number of times to retry if the transaction or block is not found.
     * @default 6 (exponential backoff)
     */
    retryCount?: WithRetryParameters['retryCount'] | undefined;
    /**
     * Time to wait (in ms) between retries.
     * @default `({ count }) => ~~(1 << count) * 200` (exponential backoff)
     */
    retryDelay?: WithRetryParameters['delay'] | undefined;
    /** Optional timeout (in milliseconds) to wait before stopping polling. */
    timeout?: number | undefined;
    epochTag?: GetEpochNumberParameters['epochTag'];
};
export type WaitForTransactionReceiptErrorType = ObserveErrorType | GetTransactionErrorType | GetTransactionReceiptErrorType | WatchEpochNumberErrorType | ErrorType;
export declare function waitForTransactionReceipt<chain extends Chain | undefined>(client: Client<Transport, chain>, { confirmations, hash, onReplaced, pollingInterval, retryCount, retryDelay, // exponential backoff
timeout, epochTag, }: WaitForTransactionReceiptParameters<chain>): Promise<WaitForTransactionReceiptReturnType<chain>>;
//# sourceMappingURL=waitForTransactionReceipt.d.ts.map