import type { AbiParameter, AbiParametersToPrimitiveTypes } from '../../types/abitype.js';
import { type AbiEncodingArrayLengthMismatchErrorType, type AbiEncodingBytesSizeMismatchErrorType, type AbiEncodingLengthMismatchErrorType, type BoolToHexErrorType, type ConcatErrorType, type InvalidAbiEncodingTypeErrorType, type InvalidAddressErrorType, type InvalidArrayErrorType, type NumberToHexErrorType, type PadHexErrorType, type SizeErrorType, type SliceErrorType, type StringToHexErrorType } from 'viem';
import type { ErrorType } from '../../errors/utils.js';
import type { Hex } from '../../types/misc.js';
import { type IsAddressErrorType } from '../address/isAddress.js';
export type EncodeAbiParametersReturnType = Hex;
export type EncodeAbiParametersErrorType = AbiEncodingLengthMismatchErrorType | PrepareParamsErrorType | EncodeParamsErrorType | ErrorType;
export declare function encodeAbiParameters<const params extends readonly AbiParameter[] | readonly unknown[]>(params: params, values: params extends readonly AbiParameter[] ? AbiParametersToPrimitiveTypes<params> : never): EncodeAbiParametersReturnType;
type PrepareParamsErrorType = PrepareParamErrorType | ErrorType;
type PrepareParamErrorType = EncodeAddressErrorType | EncodeArrayErrorType | EncodeBytesErrorType | EncodeBoolErrorType | EncodeNumberErrorType | EncodeStringErrorType | EncodeTupleErrorType | GetArrayComponentsErrorType | InvalidAbiEncodingTypeErrorType | ErrorType;
type EncodeParamsErrorType = NumberToHexErrorType | SizeErrorType | ErrorType;
type EncodeAddressErrorType = InvalidAddressErrorType | IsAddressErrorType | ErrorType;
type EncodeArrayErrorType = AbiEncodingArrayLengthMismatchErrorType | ConcatErrorType | EncodeParamsErrorType | InvalidArrayErrorType | NumberToHexErrorType | ErrorType;
type EncodeBytesErrorType = AbiEncodingBytesSizeMismatchErrorType | ConcatErrorType | PadHexErrorType | NumberToHexErrorType | SizeErrorType | ErrorType;
type EncodeBoolErrorType = PadHexErrorType | BoolToHexErrorType | ErrorType;
type EncodeNumberErrorType = NumberToHexErrorType | ErrorType;
type EncodeStringErrorType = ConcatErrorType | NumberToHexErrorType | PadHexErrorType | SizeErrorType | SliceErrorType | StringToHexErrorType | ErrorType;
type EncodeTupleErrorType = ConcatErrorType | EncodeParamsErrorType | ErrorType;
type GetArrayComponentsErrorType = ErrorType;
export declare function getArrayComponents(type: string): [length: number | null, innerType: string] | undefined;
export {};
//# sourceMappingURL=encodeAbiParameters.d.ts.map