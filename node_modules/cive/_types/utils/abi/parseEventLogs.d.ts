import type { ErrorType } from '../../errors/utils.js';
import type { Abi } from '../../types/abitype.js';
import type { ContractEventName } from '../../types/contract.js';
import type { Log } from '../../types/log.js';
import type { RpcLog } from '../../types/rpc.js';
import { type DecodeEventLogErrorType } from './decodeEventLog.js';
export type ParseEventLogsParameters<abi extends Abi | readonly unknown[] = Abi, eventName extends ContractEventName<abi> | ContractEventName<abi>[] | undefined = ContractEventName<abi>, strict extends boolean | undefined = boolean | undefined> = {
    /** Contract ABI. */
    abi: abi;
    /** Contract event. */
    eventName?: eventName | ContractEventName<abi> | ContractEventName<abi>[] | undefined;
    /** List of logs. */
    logs: (Log | RpcLog)[];
    strict?: strict | boolean | undefined;
    networkId: number;
};
export type ParseEventLogsReturnType<abi extends Abi | readonly unknown[] = Abi, eventName extends ContractEventName<abi> | ContractEventName<abi>[] | undefined = ContractEventName<abi>, strict extends boolean | undefined = boolean | undefined, derivedEventName extends ContractEventName<abi> | undefined = eventName extends ContractEventName<abi>[] ? eventName[number] : eventName> = Log<bigint, number, undefined, strict, abi, derivedEventName>[];
export type ParseEventLogsErrorType = DecodeEventLogErrorType | ErrorType;
export declare function parseEventLogs<abi extends Abi | readonly unknown[], strict extends boolean | undefined = true, eventName extends ContractEventName<abi> | ContractEventName<abi>[] | undefined = undefined>({ abi, eventName, logs, strict, networkId, }: ParseEventLogsParameters<abi, eventName, strict>): ParseEventLogsReturnType<abi, eventName, strict>;
//# sourceMappingURL=parseEventLogs.d.ts.map