import type { GetAddressErrorType, Keccak256ErrorType, ToBytesErrorType, ToRlpErrorType } from 'viem';
import type { Address, HexAddress } from '../../accounts/types.js';
import type { ErrorType } from '../../errors/utils.js';
import type { ByteArray, Hex } from '../../types/misc.js';
export type GetCreateAddressOptions = {
    from: Address;
    nonce: number;
} & ({
    bytecode: ByteArray | Hex;
} | {
    bytecodeHash: ByteArray | Hex;
});
export type GetCreate2AddressOptions = {
    salt: bigint;
    /**
     * @description the address of the create2Factory contract
     * @default "0x8a3a92281df6497105513b18543fd3b60c778e40" - CIP-31 deployed in genesis block
     */
    create2FactoryAddress?: Address<undefined, 'contract'> | HexAddress;
} & ({
    bytecode: ByteArray | Hex;
} | {
    bytecodeHash: ByteArray | Hex;
});
export type GetContractAddressOptions<NetworkId extends number = number, Verbose extends boolean = boolean> = {
    networkId: NetworkId extends undefined ? number : NetworkId;
    verbose?: Verbose;
} & (({
    opcode?: 'CREATE' | undefined;
} & GetCreateAddressOptions) | ({
    opcode: 'CREATE2';
} & GetCreate2AddressOptions));
export type GetCreateAddressErrorType = Keccak256ErrorType | GetAddressErrorType | ToBytesErrorType | ToRlpErrorType | ErrorType;
export declare function getContractAddress<NetworkId extends number = number, Verbose extends boolean = boolean>(opts: GetContractAddressOptions<NetworkId, Verbose>): `${(NetworkId extends undefined ? number : NetworkId) extends infer T ? T extends (NetworkId extends undefined ? number : NetworkId) ? T extends undefined ? "CFX" | "CFXTEST" | `NET${T extends undefined ? string : T}` : T extends 1029 ? "CFX" : T extends 1 ? "CFXTEST" : `NET${T extends undefined ? string : T}` : never : never}:TYPE.CONTRACT:${string}` | `${(NetworkId extends undefined ? number : NetworkId) extends infer T_1 ? T_1 extends (NetworkId extends undefined ? number : NetworkId) ? T_1 extends undefined ? "cfx" | "cfxtest" | `net${T_1 extends undefined ? string : T_1}` : T_1 extends 1029 ? "cfx" : T_1 extends 1 ? "cfxtest" : `net${T_1 extends undefined ? string : T_1}` : never : never}:${string}` | Address<NetworkId extends undefined ? number : NetworkId, "contract", Verbose>;
//# sourceMappingURL=getContractAddress.d.ts.map