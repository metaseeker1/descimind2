import { type ChainDisconnectedErrorType, type InternalRpcErrorType, type InvalidInputRpcErrorType, type InvalidParamsRpcErrorType, type InvalidRequestRpcErrorType, type JsonRpcVersionUnsupportedErrorType, type LimitExceededRpcErrorType, type MethodNotFoundRpcErrorType, type MethodNotSupportedRpcErrorType, type ParseRpcErrorType, type ProviderDisconnectedErrorType, type ResourceNotFoundRpcErrorType, type ResourceUnavailableRpcErrorType, type RpcErrorType, type RpcRequestErrorType, type SwitchChainErrorType, type TimeoutErrorType, type TransactionRejectedRpcErrorType, type UnauthorizedProviderErrorType, type UnknownRpcErrorType, type UnsupportedProviderMethodErrorType, type UserRejectedRequestErrorType, type WebSocketRequestErrorType, type WithRetryErrorType } from 'viem';
import { type GetSocketRpcClientErrorType, type HttpRequestErrorType } from 'viem/utils';
import type { ErrorType } from '../errors/utils.js';
import type { EIP1193RequestFn, EIP1193RequestOptions } from '../types/eip1193.js';
import type { CreateBatchSchedulerErrorType } from './promise/createBatchScheduler.js';
export type RequestErrorType = ChainDisconnectedErrorType | CreateBatchSchedulerErrorType | HttpRequestErrorType | InternalRpcErrorType | InvalidInputRpcErrorType | InvalidParamsRpcErrorType | InvalidRequestRpcErrorType | GetSocketRpcClientErrorType | JsonRpcVersionUnsupportedErrorType | LimitExceededRpcErrorType | MethodNotFoundRpcErrorType | MethodNotSupportedRpcErrorType | ParseRpcErrorType | ProviderDisconnectedErrorType | ResourceNotFoundRpcErrorType | ResourceUnavailableRpcErrorType | RpcErrorType | RpcRequestErrorType | SwitchChainErrorType | TimeoutErrorType | TransactionRejectedRpcErrorType | UnauthorizedProviderErrorType | UnknownRpcErrorType | UnsupportedProviderMethodErrorType | UserRejectedRequestErrorType | WebSocketRequestErrorType | WithRetryErrorType | ErrorType;
export declare function buildRequest<request extends (args: any) => Promise<any>>(request: request, options?: EIP1193RequestOptions): EIP1193RequestFn;
/** @internal */
export declare function shouldRetry(error: Error): boolean;
//# sourceMappingURL=buildRequest.d.ts.map