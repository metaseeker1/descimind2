import { type AssertTransactionLegacyErrorType, type ConcatHexErrorType, type GetTransactionTypeErrorType, type InvalidLegacyVErrorType, type ToHexErrorType, type ToRlpErrorType } from 'viem';
import type { ErrorType } from '../../errors/utils.js';
import type { Signature } from '../../types/misc.js';
import type { TransactionSerializable, TransactionSerializableGeneric, TransactionSerialized, TransactionType } from '../../types/transaction.js';
import type { OneOf } from '../../types/utils.js';
import { type AssertTransactionEIP1559ErrorType, type AssertTransactionEIP2930ErrorType } from './assertTransaction.js';
import { type GetTransactionType } from './getTransactionType.js';
import { type SerializeAccessListErrorType } from './serializeAccessList.js';
export type SerializedTransactionReturnType<transaction extends TransactionSerializable = TransactionSerializable, _transactionSerialized extends TransactionType = GetTransactionType<transaction>> = TransactionSerialized<_transactionSerialized>;
export type SerializeTransactionFn<transaction extends TransactionSerializableGeneric = TransactionSerializable, _transactionType extends TransactionType = never> = typeof serializeTransaction<OneOf<TransactionSerializable | transaction>, _transactionType>;
export type SerializeTransactionErrorType = GetTransactionTypeErrorType | SerializeTransactionEIP1559ErrorType | SerializeTransactionEIP2930ErrorType | SerializeTransactionLegacyErrorType | ErrorType;
export declare function serializeTransaction<const transaction extends TransactionSerializable, _transactionType extends TransactionType = GetTransactionType<transaction>>(transaction: transaction, signature?: Signature | undefined): SerializedTransactionReturnType<transaction, _transactionType>;
type SerializeTransactionEIP1559ErrorType = AssertTransactionEIP1559ErrorType | ConcatHexErrorType | InvalidLegacyVErrorType | ToHexErrorType | ToRlpErrorType | SerializeAccessListErrorType | ErrorType;
type SerializeTransactionEIP2930ErrorType = AssertTransactionEIP2930ErrorType | ConcatHexErrorType | InvalidLegacyVErrorType | ToHexErrorType | ToRlpErrorType | SerializeAccessListErrorType | ErrorType;
type SerializeTransactionLegacyErrorType = AssertTransactionLegacyErrorType | InvalidLegacyVErrorType | ToHexErrorType | ToRlpErrorType | ErrorType;
export {};
//# sourceMappingURL=serializeTransaction.d.ts.map