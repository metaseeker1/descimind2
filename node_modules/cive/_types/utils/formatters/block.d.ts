import type { Hash } from 'viem';
import type { ErrorType } from '../../errors/utils.js';
import type { Block, EpochTag } from '../../types/block.js';
import type { Chain, ExtractChainFormatterExclude, ExtractChainFormatterReturnType } from '../../types/chain.js';
import type { RpcBlock } from '../../types/rpc.js';
import type { ExactPartial, Prettify } from '../../types/utils.js';
import { type FormattedTransaction } from './transaction.js';
type BlockPendingDependencies = 'gasUsed' | 'posReference' | 'baseFeePerGas';
export type FormattedBlock<TChain extends Chain | undefined = undefined, TIncludeTransactions extends boolean = boolean, TEpochTag extends EpochTag | undefined = undefined, _FormatterReturnType = ExtractChainFormatterReturnType<TChain, 'block', Block<bigint, TIncludeTransactions, TEpochTag>>, _ExcludedPendingDependencies extends string = BlockPendingDependencies & ExtractChainFormatterExclude<TChain, 'block'>, _Formatted = Omit<_FormatterReturnType, BlockPendingDependencies> & {
    [_key in _ExcludedPendingDependencies]: never;
} & Pick<Block<bigint, TIncludeTransactions, TEpochTag>, BlockPendingDependencies>, _Transactions = TIncludeTransactions extends true ? Prettify<FormattedTransaction<TChain, TEpochTag>>[] : Hash[]> = Omit<_Formatted, 'transactions'> & {
    transactions: _Transactions;
};
export type FormatBlockErrorType = ErrorType;
export declare function formatBlock(block: ExactPartial<RpcBlock>): Block;
export {};
//# sourceMappingURL=block.d.ts.map