import type { EpochTag } from '../../types/block.js';
import type { Chain, ExtractChainFormatterExclude, ExtractChainFormatterReturnType } from '../../types/chain.js';
import type { RpcTransaction } from '../../types/rpc.js';
import type { Transaction } from '../../types/transaction.js';
import type { UnionLooseOmit } from '../../types/utils.js';
type TransactionPendingDependencies = 'blockHash';
export declare const transactionType: {
    readonly '0x0': "legacy";
    readonly '0x1': "eip2930";
    readonly '0x2': "eip1559";
};
export type FormattedTransaction<TChain extends Chain | undefined = undefined, TEpochTag extends EpochTag | undefined = undefined, _FormatterReturnType = ExtractChainFormatterReturnType<TChain, 'transaction', Transaction>, _ExcludedPendingDependencies extends string = TransactionPendingDependencies & ExtractChainFormatterExclude<TChain, 'transaction'>> = UnionLooseOmit<_FormatterReturnType, TransactionPendingDependencies> & {
    [_K in _ExcludedPendingDependencies]: never;
} & Pick<Transaction<bigint, number, TEpochTag extends 'latest_state' ? false : true>, TransactionPendingDependencies>;
export declare function formatTransaction(transaction: RpcTransaction): Transaction;
export {};
//# sourceMappingURL=transaction.d.ts.map