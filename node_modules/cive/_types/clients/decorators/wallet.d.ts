import type { GetPermissionsReturnType, WatchAssetParameters, WatchAssetReturnType } from 'viem';
import { type AddChainParameters } from 'viem/actions';
import type { Account, Address } from '../../accounts/types.js';
import { type GetChainIdReturnType } from '../../actions/public/getChainId.js';
import { type DeployContractParameters, type DeployContractReturnType } from '../../actions/wallet/deployContract.js';
import { type GetAddressesReturnType } from '../../actions/wallet/getAddresses.js';
import { type PrepareTransactionRequestParameters, type PrepareTransactionRequestRequest, type PrepareTransactionRequestReturnType } from '../../actions/wallet/prepareTransactionRequest.js';
import { type RequestAddressesReturnType } from '../../actions/wallet/requestAddresses.js';
import { type RequestPermissionsParameters, type RequestPermissionsReturnType } from '../../actions/wallet/requestPermissions.js';
import { type SendRawTransactionParameters, type SendRawTransactionReturnType } from '../../actions/wallet/sendRawTransaction.js';
import { type SendTransactionParameters, type SendTransactionReturnType } from '../../actions/wallet/sendTransaction.js';
import type { Abi, TypedData } from '../../types/abitype.js';
import type { Chain } from '../../types/chain.js';
import type { Client } from '../createClient.js';
import { type SignMessageParameters, type SignMessageReturnType } from '../../actions/wallet/signMessage.js';
import { type SignTransactionParameters, type SignTransactionRequest, type SignTransactionReturnType } from '../../actions/wallet/signTransaction.js';
import { type SignTypedDataParameters, type SignTypedDataReturnType } from '../../actions/wallet/signTypedData.js';
import { type SwitchChainParameters } from '../../actions/wallet/switchChain.js';
import { type WriteContractParameters, type WriteContractReturnType } from '../../actions/wallet/writeContract.js';
import type { ContractFunctionArgs, ContractFunctionName } from '../../types/contract.js';
import type { Transport } from '../transports/createTransport.js';
export type WalletActions<TChain extends Chain | undefined = Chain | undefined, TAccount extends Account | undefined = Account | undefined> = {
    deployContract: <const abi extends Abi | readonly unknown[], chainOverride extends Chain | undefined>(args: DeployContractParameters<abi, TChain, TAccount, chainOverride>) => Promise<DeployContractReturnType>;
    prepareTransactionRequest: <const TRequest extends PrepareTransactionRequestRequest<TChain, TChainOverride>, TChainOverride extends Chain | undefined = undefined, TAccountOverride extends Account | Address | undefined = undefined>(args: PrepareTransactionRequestParameters<TChain, TAccount, TChainOverride, TAccountOverride, TRequest>) => Promise<PrepareTransactionRequestReturnType<Chain, TAccount, TChainOverride, TAccountOverride, TRequest>>;
    sendRawTransaction: (args: SendRawTransactionParameters) => Promise<SendRawTransactionReturnType>;
    addChain: (args: AddChainParameters) => Promise<void>;
    getAddresses: () => Promise<GetAddressesReturnType>;
    getChainId: () => Promise<GetChainIdReturnType>;
    getPermissions: () => Promise<GetPermissionsReturnType>;
    requestAddresses: () => Promise<RequestAddressesReturnType>;
    requestPermissions: (args: RequestPermissionsParameters) => Promise<RequestPermissionsReturnType>;
    sendTransaction: (args: SendTransactionParameters<TChain, TAccount>) => Promise<SendTransactionReturnType>;
    signMessage: (args: SignMessageParameters<TAccount>) => Promise<SignMessageReturnType>;
    signTransaction: <const request extends SignTransactionRequest<TChain> = SignTransactionRequest<TChain>>(args: SignTransactionParameters<TChain, TAccount, request>) => Promise<SignTransactionReturnType<request>>;
    signTypedData: <const TTypedData extends TypedData | {
        [key: string]: unknown;
    }, TPrimaryType extends string>(args: SignTypedDataParameters<TTypedData, TPrimaryType, TAccount>) => Promise<SignTypedDataReturnType>;
    switchChain: (args: SwitchChainParameters) => Promise<void>;
    watchAsset: (args: WatchAssetParameters) => Promise<WatchAssetReturnType>;
    writeContract: <const abi extends Abi | readonly unknown[], functionName extends ContractFunctionName<abi, 'payable' | 'nonpayable'>, args extends ContractFunctionArgs<abi, 'payable' | 'nonpayable', functionName>, chainOverride extends Chain | undefined = undefined>(args: WriteContractParameters<abi, functionName, args, TChain, TAccount, chainOverride>) => Promise<WriteContractReturnType>;
};
export declare function walletActions<transport extends Transport, chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined>(client: Client<transport, chain, account>): WalletActions<chain, account>;
//# sourceMappingURL=wallet.d.ts.map