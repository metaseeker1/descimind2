import type { Account } from '../../accounts/types.js';
import { type GetCurrentSyncPhaseReturnType } from '../../actions/index.js';
import { type CreateLocalNodeAccountParameters, type CreateLocalNodeAccountReturnType } from '../../actions/test/createLocalNodeAccount.js';
import { type GenerateEmptyLocalNodeBlocksParameters, type GenerateEmptyLocalNodeBlocksReturnType } from '../../actions/test/generateEmptyLocalNodeBlocks.js';
import { type GenerateLocalNodeBlockParameters, type GenerateLocalNodeBlockReturnTYpe } from '../../actions/test/generateLocalNodeBlock.js';
import { type GetLocalNodeAddressesReturnType } from '../../actions/test/getLocalNodeAddresses.js';
import { type LockLocalNodeAccountParameters, type LockLocalNodeAccountReturnType } from '../../actions/test/lockLocalNodeAccount.js';
import { type MineParameters } from '../../actions/test/mine.js';
import { type UnlockLocalNodeAccountParameters, type UnlockLocalNodeAccountReturnType } from '../../actions/test/unlockLocalNodeAccount.js';
import type { Chain } from '../../types/chain.js';
import type { Client } from '../createClient.js';
import type { Transport } from '../transports/createTransport.js';
export type TestActions = {
    clearTxpool: () => Promise<void>;
    getLocalNodeAddresses: () => Promise<GetLocalNodeAddressesReturnType>;
    createLocalNodeAccount: (args: CreateLocalNodeAccountParameters) => Promise<CreateLocalNodeAccountReturnType>;
    unlockLocalNodeAccount: (args: UnlockLocalNodeAccountParameters) => Promise<UnlockLocalNodeAccountReturnType>;
    lockLocalNodeAccount: (args: LockLocalNodeAccountParameters) => Promise<LockLocalNodeAccountReturnType>;
    generateLocalNodeBlock: (args: GenerateLocalNodeBlockParameters) => Promise<GenerateLocalNodeBlockReturnTYpe>;
    generateEmptyLocalNodeBlocks: (args: GenerateEmptyLocalNodeBlocksParameters) => Promise<GenerateEmptyLocalNodeBlocksReturnType>;
    mine: (args: MineParameters) => Promise<void>;
    getCurrentSyncPhase: () => Promise<GetCurrentSyncPhaseReturnType>;
};
export declare function testActions<TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends Account | undefined = Account | undefined>(client: Client<TTransport, TChain, TAccount>): TestActions;
//# sourceMappingURL=test.d.ts.map