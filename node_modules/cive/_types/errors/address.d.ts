import { BaseError } from 'viem';
export type InvalidNetworkIdErrorType = InvalidNetworkIdError & {
    name: 'InvalidNetworkIdError';
};
export declare class InvalidNetworkIdError extends BaseError {
    name: string;
    constructor({ networkId, message, }: {
        networkId: number | string;
        message?: string;
    });
}
export type ConvertBitExcessPaddingErrorType = ConvertBitExcessPaddingError & {
    name: 'ConvertBitExcessPaddingError';
};
export declare class ConvertBitExcessPaddingError extends BaseError {
    name: string;
    constructor();
}
export type ConvertBitNonZeroPaddingErrorType = ConvertBitNonZeroPaddingError & {
    name: 'ConvertBitNonZeroPaddingError';
};
export declare class ConvertBitNonZeroPaddingError extends BaseError {
    name: string;
    constructor();
}
export type MixedCaseAddressErrorType = MixedCaseAddressError & {
    name: 'MixedCaseAddressError';
};
export declare class MixedCaseAddressError extends BaseError {
    name: string;
    constructor({ address }: {
        address: string;
    });
}
export type InvalidAddressVersionErrorType = InvalidAddressVersionError & {
    name: 'InvalidAddressVersionError';
};
export declare class InvalidAddressVersionError extends BaseError {
    name: string;
    constructor({ address }: {
        address: string;
    });
}
export type AddressTypeNotMatchErrorType = AddressTypeNotMatchError & {
    name: 'AddressTypeNotMatchError';
};
export declare class AddressTypeNotMatchError extends BaseError {
    name: string;
    constructor({ address }: {
        address: string;
    });
}
//# sourceMappingURL=address.d.ts.map