{"version":3,"file":"otpauth.esm.min.js","sources":["../node_modules/@noble/hashes/esm/_assert.js","../node_modules/@noble/hashes/esm/utils.js","../node_modules/@noble/hashes/esm/hmac.js","../node_modules/@noble/hashes/esm/_md.js","../node_modules/@noble/hashes/esm/sha1.js","../node_modules/@noble/hashes/esm/sha256.js","../node_modules/@noble/hashes/esm/_u64.js","../node_modules/@noble/hashes/esm/sha512.js","../node_modules/@noble/hashes/esm/sha3.js","../src/internal/global-scope.js","../src/internal/crypto/hmac-digest.js","../src/internal/encoding/base32.js","../src/internal/encoding/hex.js","../src/internal/encoding/latin1.js","../src/internal/encoding/utf8.js","../src/secret.js","../src/internal/crypto/random-bytes.js","../src/hotp.js","../src/internal/encoding/uint.js","../src/internal/crypto/timing-safe-equal.js","../src/totp.js","../src/uri.js","../src/version.js"],"sourcesContent":["function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`positive integer expected, not ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n// copied from utils\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(h.outputLen);\n    number(h.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n//# sourceMappingURL=_assert.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n) => n : (n) => byteSwap(n);\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto && typeof crypto.randomBytes === 'function') {\n        return crypto.randomBytes(bytesLength);\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assertHash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assertExists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assertExists(this);\n        assertBytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","import { exists, output } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n/**\n * Polyfill for Safari 14\n */\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/**\n * Choice: a ? b : c\n */\nexport const Chi = (a, b, c) => (a & b) ^ (~a & c);\n/**\n * Majority function, true if any two inputs is true\n */\nexport const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        exists(this);\n        output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map","import { HashMD, Chi, Maj } from './_md.js';\nimport { rotl, wrapConstructor } from './utils.js';\n// SHA1 (RFC 3174). It was cryptographically broken: prefer newer algorithms.\n// Initial state\nconst SHA1_IV = /* @__PURE__ */ new Uint32Array([\n    0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0,\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA1_W = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA1 extends HashMD {\n    constructor() {\n        super(64, 20, 8, false);\n        this.A = SHA1_IV[0] | 0;\n        this.B = SHA1_IV[1] | 0;\n        this.C = SHA1_IV[2] | 0;\n        this.D = SHA1_IV[3] | 0;\n        this.E = SHA1_IV[4] | 0;\n    }\n    get() {\n        const { A, B, C, D, E } = this;\n        return [A, B, C, D, E];\n    }\n    set(A, B, C, D, E) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA1_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 80; i++)\n            SHA1_W[i] = rotl(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);\n        // Compression function main loop, 80 rounds\n        let { A, B, C, D, E } = this;\n        for (let i = 0; i < 80; i++) {\n            let F, K;\n            if (i < 20) {\n                F = Chi(B, C, D);\n                K = 0x5a827999;\n            }\n            else if (i < 40) {\n                F = B ^ C ^ D;\n                K = 0x6ed9eba1;\n            }\n            else if (i < 60) {\n                F = Maj(B, C, D);\n                K = 0x8f1bbcdc;\n            }\n            else {\n                F = B ^ C ^ D;\n                K = 0xca62c1d6;\n            }\n            const T = (rotl(A, 5) + F + E + K + SHA1_W[i]) | 0;\n            E = D;\n            D = C;\n            C = rotl(B, 30);\n            B = A;\n            A = T;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        this.set(A, B, C, D, E);\n    }\n    roundClean() {\n        SHA1_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * SHA1 (RFC 3174) hash function.\n * It was cryptographically broken: prefer newer algorithms.\n * @param message - data that would be hashed\n */\nexport const sha1 = /* @__PURE__ */ wrapConstructor(() => new SHA1());\n//# sourceMappingURL=sha1.js.map","import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/**\n * SHA2-224 hash function\n */\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","import { HashMD } from './_md.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexport class SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nexport class SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nexport class SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n//# sourceMappingURL=sha512.js.map","import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapXOFConstructorWithOpts, isLE, byteSwap32, } from './utils.js';\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst SHA3_PI = [];\nconst SHA3_ROTL = [];\nconst _SHA3_IOTA = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        if (!isLE)\n            byteSwap32(this.state32);\n        keccakP(this.state32, this.rounds);\n        if (!isLE)\n            byteSwap32(this.state32);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        exists(this, false);\n        bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map","/**\n * \"globalThis\" ponyfill.\n * @see [A horrifying globalThis polyfill in universal JavaScript](https://mathiasbynens.be/notes/globalthis)\n * @type {Object.<string, *>}\n */\nconst globalScope = (() => {\n  if (typeof globalThis === \"object\") return globalThis;\n  else {\n    Object.defineProperty(Object.prototype, \"__GLOBALTHIS__\", {\n      get() {\n        return this;\n      },\n      configurable: true,\n    });\n    try {\n      // @ts-expect-error\n      // eslint-disable-next-line no-undef\n      if (typeof __GLOBALTHIS__ !== \"undefined\") return __GLOBALTHIS__;\n    } finally {\n      // @ts-expect-error\n      delete Object.prototype.__GLOBALTHIS__;\n    }\n  }\n\n  // Still unable to determine \"globalThis\", fall back to a naive method.\n  if (typeof self !== \"undefined\") return self;\n  else if (typeof window !== \"undefined\") return window;\n  else if (typeof global !== \"undefined\") return global;\n\n  return undefined;\n})();\n\nexport { globalScope };\n","import * as crypto from \"node:crypto\";\nimport { hmac } from \"@noble/hashes/hmac\";\nimport { sha1 } from \"@noble/hashes/sha1\";\nimport { sha224, sha256, sha384, sha512 } from \"@noble/hashes/sha2\";\nimport { sha3_224, sha3_256, sha3_384, sha3_512 } from \"@noble/hashes/sha3\";\nimport { globalScope } from \"../global-scope.js\";\n\n/**\n * @noble/hashes hash functions.\n * @type {Object.<string, sha1|sha224|sha256|sha384|sha512|sha3_224|sha3_256|sha3_384|sha3_512>}\n */\nconst nobleHashes = {\n  SHA1: sha1,\n  SHA224: sha224,\n  SHA256: sha256,\n  SHA384: sha384,\n  SHA512: sha512,\n  \"SHA3-224\": sha3_224,\n  \"SHA3-256\": sha3_256,\n  \"SHA3-384\": sha3_384,\n  \"SHA3-512\": sha3_512,\n};\n\n/**\n * Canonicalizes a hash algorithm name.\n * @param {string} algorithm Hash algorithm name.\n * @returns {\"SHA1\"|\"SHA224\"|\"SHA256\"|\"SHA384\"|\"SHA512\"|\"SHA3-224\"|\"SHA3-256\"|\"SHA3-384\"|\"SHA3-512\"} Canonicalized hash algorithm name.\n */\nconst canonicalizeAlgorithm = (algorithm) => {\n  switch (true) {\n    case /^(?:SHA-?1|SSL3-SHA1)$/i.test(algorithm):\n      return \"SHA1\";\n    case /^SHA(?:2?-)?224$/i.test(algorithm):\n      return \"SHA224\";\n    case /^SHA(?:2?-)?256$/i.test(algorithm):\n      return \"SHA256\";\n    case /^SHA(?:2?-)?384$/i.test(algorithm):\n      return \"SHA384\";\n    case /^SHA(?:2?-)?512$/i.test(algorithm):\n      return \"SHA512\";\n    case /^SHA3-224$/i.test(algorithm):\n      return \"SHA3-224\";\n    case /^SHA3-256$/i.test(algorithm):\n      return \"SHA3-256\";\n    case /^SHA3-384$/i.test(algorithm):\n      return \"SHA3-384\";\n    case /^SHA3-512$/i.test(algorithm):\n      return \"SHA3-512\";\n    default:\n      throw new TypeError(`Unknown hash algorithm: ${algorithm}`);\n  }\n};\n\n/**\n * Calculates an HMAC digest.\n * @param {string} algorithm Algorithm.\n * @param {Uint8Array} key Key.\n * @param {Uint8Array} message Message.\n * @returns {Uint8Array} Digest.\n */\nconst hmacDigest = (algorithm, key, message) => {\n  if (crypto?.createHmac) {\n    const hmac = crypto.createHmac(algorithm, globalScope.Buffer.from(key));\n    hmac.update(globalScope.Buffer.from(message));\n    return hmac.digest();\n  } else if (hmac) {\n    const hash = nobleHashes[algorithm] ?? nobleHashes[canonicalizeAlgorithm(algorithm)];\n    return hmac(hash, key, message);\n  } else {\n    throw new Error(\"Missing HMAC function\");\n  }\n};\n\nexport { canonicalizeAlgorithm, hmacDigest };\n","/**\n * RFC 4648 base32 alphabet without pad.\n * @type {string}\n */\nconst ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\n\n/**\n * Converts a base32 string to an Uint8Array (RFC 4648).\n * @see [LinusU/base32-decode](https://github.com/LinusU/base32-decode)\n * @param {string} str Base32 string.\n * @returns {Uint8Array} Uint8Array.\n */\nconst base32Decode = (str) => {\n  // Remove spaces (although they are not allowed by the spec, some issuers add them for readability).\n  str = str.replace(/ /g, \"\");\n\n  // Canonicalize to all upper case and remove padding if it exists.\n  let end = str.length;\n  while (str[end - 1] === \"=\") --end;\n  str = (end < str.length ? str.substring(0, end) : str).toUpperCase();\n\n  const buf = new ArrayBuffer(((str.length * 5) / 8) | 0);\n  const arr = new Uint8Array(buf);\n  let bits = 0;\n  let value = 0;\n  let index = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    const idx = ALPHABET.indexOf(str[i]);\n    if (idx === -1) throw new TypeError(`Invalid character found: ${str[i]}`);\n\n    value = (value << 5) | idx;\n    bits += 5;\n\n    if (bits >= 8) {\n      bits -= 8;\n      arr[index++] = value >>> bits;\n    }\n  }\n\n  return arr;\n};\n\n/**\n * Converts an Uint8Array to a base32 string (RFC 4648).\n * @see [LinusU/base32-encode](https://github.com/LinusU/base32-encode)\n * @param {Uint8Array} arr Uint8Array.\n * @returns {string} Base32 string.\n */\nconst base32Encode = (arr) => {\n  let bits = 0;\n  let value = 0;\n  let str = \"\";\n\n  for (let i = 0; i < arr.length; i++) {\n    value = (value << 8) | arr[i];\n    bits += 8;\n\n    while (bits >= 5) {\n      str += ALPHABET[(value >>> (bits - 5)) & 31];\n      bits -= 5;\n    }\n  }\n\n  if (bits > 0) {\n    str += ALPHABET[(value << (5 - bits)) & 31];\n  }\n\n  return str;\n};\n\nexport { base32Decode, base32Encode };\n","/**\n * Converts a hexadecimal string to an Uint8Array.\n * @param {string} str Hexadecimal string.\n * @returns {Uint8Array} Uint8Array.\n */\nconst hexDecode = (str) => {\n  // Remove spaces (although they are not allowed by the spec, some issuers add them for readability).\n  str = str.replace(/ /g, \"\");\n\n  const buf = new ArrayBuffer(str.length / 2);\n  const arr = new Uint8Array(buf);\n\n  for (let i = 0; i < str.length; i += 2) {\n    arr[i / 2] = parseInt(str.substring(i, i + 2), 16);\n  }\n\n  return arr;\n};\n\n/**\n * Converts an Uint8Array to a hexadecimal string.\n * @param {Uint8Array} arr Uint8Array.\n * @returns {string} Hexadecimal string.\n */\nconst hexEncode = (arr) => {\n  let str = \"\";\n\n  for (let i = 0; i < arr.length; i++) {\n    const hex = arr[i].toString(16);\n    if (hex.length === 1) str += \"0\";\n    str += hex;\n  }\n\n  return str.toUpperCase();\n};\n\nexport { hexDecode, hexEncode };\n","/**\n * Converts a Latin-1 string to an Uint8Array.\n * @param {string} str Latin-1 string.\n * @returns {Uint8Array} Uint8Array.\n */\nconst latin1Decode = (str) => {\n  const buf = new ArrayBuffer(str.length);\n  const arr = new Uint8Array(buf);\n\n  for (let i = 0; i < str.length; i++) {\n    arr[i] = str.charCodeAt(i) & 0xff;\n  }\n\n  return arr;\n};\n\n/**\n * Converts an Uint8Array to a Latin-1 string.\n * @param {Uint8Array} arr Uint8Array.\n * @returns {string} Latin-1 string.\n */\nconst latin1Encode = (arr) => {\n  let str = \"\";\n\n  for (let i = 0; i < arr.length; i++) {\n    str += String.fromCharCode(arr[i]);\n  }\n\n  return str;\n};\n\nexport { latin1Decode, latin1Encode };\n","import { globalScope } from \"../global-scope.js\";\n\n/**\n * TextEncoder instance.\n * @type {TextEncoder|null}\n */\nconst ENCODER = globalScope.TextEncoder ? new globalScope.TextEncoder() : null;\n\n/**\n * TextDecoder instance.\n * @type {TextDecoder|null}\n */\nconst DECODER = globalScope.TextDecoder ? new globalScope.TextDecoder() : null;\n\n/**\n * Converts an UTF-8 string to an Uint8Array.\n * @param {string} str String.\n * @returns {Uint8Array} Uint8Array.\n */\nconst utf8Decode = (str) => {\n  if (!ENCODER) {\n    throw new Error(\"Encoding API not available\");\n  }\n\n  return ENCODER.encode(str);\n};\n\n/**\n * Converts an Uint8Array to an UTF-8 string.\n * @param {Uint8Array} arr Uint8Array.\n * @returns {string} String.\n */\nconst utf8Encode = (arr) => {\n  if (!DECODER) {\n    throw new Error(\"Encoding API not available\");\n  }\n\n  return DECODER.decode(arr);\n};\n\nexport { utf8Decode, utf8Encode };\n","import { base32Decode, base32Encode } from \"./internal/encoding/base32.js\";\nimport { hexDecode, hexEncode } from \"./internal/encoding/hex.js\";\nimport { latin1Decode, latin1Encode } from \"./internal/encoding/latin1.js\";\nimport { utf8Decode, utf8Encode } from \"./internal/encoding/utf8.js\";\nimport { randomBytes } from \"./internal/crypto/random-bytes.js\";\n\n/**\n * OTP secret key.\n */\nclass Secret {\n  /**\n   * Creates a secret key object.\n   * @param {Object} [config] Configuration options.\n   * @param {ArrayBufferLike} [config.buffer] Secret key buffer.\n   * @param {number} [config.size=20] Number of random bytes to generate, ignored if 'buffer' is provided.\n   */\n  constructor({ buffer, size = 20 } = {}) {\n    /**\n     * Secret key.\n     * @type {Uint8Array}\n     * @readonly\n     */\n    this.bytes = typeof buffer === \"undefined\" ? randomBytes(size) : new Uint8Array(buffer);\n\n    // Prevent the \"bytes\" property from being modified.\n    Object.defineProperty(this, \"bytes\", {\n      enumerable: true,\n      writable: false,\n      configurable: false,\n      value: this.bytes,\n    });\n  }\n\n  /**\n   * Converts a Latin-1 string to a Secret object.\n   * @param {string} str Latin-1 string.\n   * @returns {Secret} Secret object.\n   */\n  static fromLatin1(str) {\n    return new Secret({ buffer: latin1Decode(str).buffer });\n  }\n\n  /**\n   * Converts an UTF-8 string to a Secret object.\n   * @param {string} str UTF-8 string.\n   * @returns {Secret} Secret object.\n   */\n  static fromUTF8(str) {\n    return new Secret({ buffer: utf8Decode(str).buffer });\n  }\n\n  /**\n   * Converts a base32 string to a Secret object.\n   * @param {string} str Base32 string.\n   * @returns {Secret} Secret object.\n   */\n  static fromBase32(str) {\n    return new Secret({ buffer: base32Decode(str).buffer });\n  }\n\n  /**\n   * Converts a hexadecimal string to a Secret object.\n   * @param {string} str Hexadecimal string.\n   * @returns {Secret} Secret object.\n   */\n  static fromHex(str) {\n    return new Secret({ buffer: hexDecode(str).buffer });\n  }\n\n  /**\n   * Secret key buffer.\n   * @deprecated For backward compatibility, the \"bytes\" property should be used instead.\n   * @type {ArrayBufferLike}\n   */\n  get buffer() {\n    return this.bytes.buffer;\n  }\n\n  /**\n   * Latin-1 string representation of secret key.\n   * @type {string}\n   */\n  get latin1() {\n    Object.defineProperty(this, \"latin1\", {\n      enumerable: true,\n      writable: false,\n      configurable: false,\n      value: latin1Encode(this.bytes),\n    });\n\n    return this.latin1;\n  }\n\n  /**\n   * UTF-8 string representation of secret key.\n   * @type {string}\n   */\n  get utf8() {\n    Object.defineProperty(this, \"utf8\", {\n      enumerable: true,\n      writable: false,\n      configurable: false,\n      value: utf8Encode(this.bytes),\n    });\n\n    return this.utf8;\n  }\n\n  /**\n   * Base32 string representation of secret key.\n   * @type {string}\n   */\n  get base32() {\n    Object.defineProperty(this, \"base32\", {\n      enumerable: true,\n      writable: false,\n      configurable: false,\n      value: base32Encode(this.bytes),\n    });\n\n    return this.base32;\n  }\n\n  /**\n   * Hexadecimal string representation of secret key.\n   * @type {string}\n   */\n  get hex() {\n    Object.defineProperty(this, \"hex\", {\n      enumerable: true,\n      writable: false,\n      configurable: false,\n      value: hexEncode(this.bytes),\n    });\n\n    return this.hex;\n  }\n}\n\nexport { Secret };\n","import * as crypto from \"node:crypto\";\n\nimport { globalScope } from \"../global-scope.js\";\n\n/**\n * Returns random bytes.\n * @param {number} size Size.\n * @returns {Uint8Array} Random bytes.\n */\nconst randomBytes = (size) => {\n  if (crypto?.randomBytes) {\n    return crypto.randomBytes(size);\n  } else if (globalScope.crypto?.getRandomValues) {\n    return globalScope.crypto.getRandomValues(new Uint8Array(size));\n  } else {\n    throw new Error(\"Cryptography API not available\");\n  }\n};\n\nexport { randomBytes };\n","import { uintDecode } from \"./internal/encoding/uint.js\";\nimport { canonicalizeAlgorithm, hmacDigest } from \"./internal/crypto/hmac-digest.js\";\nimport { Secret } from \"./secret.js\";\nimport { timingSafeEqual } from \"./internal/crypto/timing-safe-equal.js\";\n\n/**\n * HOTP: An HMAC-based One-time Password Algorithm.\n * @see [RFC 4226](https://datatracker.ietf.org/doc/html/rfc4226)\n */\nclass HOTP {\n  /**\n   * Default configuration.\n   * @type {{\n   *   issuer: string,\n   *   label: string,\n   *   issuerInLabel: boolean,\n   *   algorithm: string,\n   *   digits: number,\n   *   counter: number\n   *   window: number\n   * }}\n   */\n  static get defaults() {\n    return {\n      issuer: \"\",\n      label: \"OTPAuth\",\n      issuerInLabel: true,\n      algorithm: \"SHA1\",\n      digits: 6,\n      counter: 0,\n      window: 1,\n    };\n  }\n\n  /**\n   * Creates an HOTP object.\n   * @param {Object} [config] Configuration options.\n   * @param {string} [config.issuer=''] Account provider.\n   * @param {string} [config.label='OTPAuth'] Account label.\n   * @param {boolean} [config.issuerInLabel=true] Include issuer prefix in label.\n   * @param {Secret|string} [config.secret=Secret] Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.counter=0] Initial counter value.\n   */\n  constructor({\n    issuer = HOTP.defaults.issuer,\n    label = HOTP.defaults.label,\n    issuerInLabel = HOTP.defaults.issuerInLabel,\n    secret = new Secret(),\n    algorithm = HOTP.defaults.algorithm,\n    digits = HOTP.defaults.digits,\n    counter = HOTP.defaults.counter,\n  } = {}) {\n    /**\n     * Account provider.\n     * @type {string}\n     */\n    this.issuer = issuer;\n    /**\n     * Account label.\n     * @type {string}\n     */\n    this.label = label;\n    /**\n     * Include issuer prefix in label.\n     * @type {boolean}\n     */\n    this.issuerInLabel = issuerInLabel;\n    /**\n     * Secret key.\n     * @type {Secret}\n     */\n    this.secret = typeof secret === \"string\" ? Secret.fromBase32(secret) : secret;\n    /**\n     * HMAC hashing algorithm.\n     * @type {string}\n     */\n    this.algorithm = canonicalizeAlgorithm(algorithm);\n    /**\n     * Token length.\n     * @type {number}\n     */\n    this.digits = digits;\n    /**\n     * Initial counter value.\n     * @type {number}\n     */\n    this.counter = counter;\n  }\n\n  /**\n   * Generates an HOTP token.\n   * @param {Object} config Configuration options.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.counter=0] Counter value.\n   * @returns {string} Token.\n   */\n  static generate({\n    secret,\n    algorithm = HOTP.defaults.algorithm,\n    digits = HOTP.defaults.digits,\n    counter = HOTP.defaults.counter,\n  }) {\n    const digest = hmacDigest(algorithm, secret.bytes, uintDecode(counter));\n    const offset = digest[digest.byteLength - 1] & 15;\n    const otp =\n      (((digest[offset] & 127) << 24) |\n        ((digest[offset + 1] & 255) << 16) |\n        ((digest[offset + 2] & 255) << 8) |\n        (digest[offset + 3] & 255)) %\n      10 ** digits;\n\n    return otp.toString().padStart(digits, \"0\");\n  }\n\n  /**\n   * Generates an HOTP token.\n   * @param {Object} [config] Configuration options.\n   * @param {number} [config.counter=this.counter++] Counter value.\n   * @returns {string} Token.\n   */\n  generate({ counter = this.counter++ } = {}) {\n    return HOTP.generate({\n      secret: this.secret,\n      algorithm: this.algorithm,\n      digits: this.digits,\n      counter,\n    });\n  }\n\n  /**\n   * Validates an HOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.counter=0] Counter value.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {number|null} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */\n  static validate({\n    token,\n    secret,\n    algorithm,\n    digits = HOTP.defaults.digits,\n    counter = HOTP.defaults.counter,\n    window = HOTP.defaults.window,\n  }) {\n    // Return early if the token length does not match the digit number.\n    if (token.length !== digits) return null;\n\n    let delta = null;\n\n    const check = (/** @type {number} */ i) => {\n      const generatedToken = HOTP.generate({\n        secret,\n        algorithm,\n        digits,\n        counter: i,\n      });\n      if (timingSafeEqual(token, generatedToken)) {\n        delta = i - counter;\n      }\n    };\n\n    check(counter);\n    for (let i = 1; i <= window && delta === null; ++i) {\n      check(counter - i);\n      if (delta !== null) break;\n      check(counter + i);\n      if (delta !== null) break;\n    }\n\n    return delta;\n  }\n\n  /**\n   * Validates an HOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {number} [config.counter=this.counter] Counter value.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {number|null} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */\n  validate({ token, counter = this.counter, window }) {\n    return HOTP.validate({\n      token,\n      secret: this.secret,\n      algorithm: this.algorithm,\n      digits: this.digits,\n      counter,\n      window,\n    });\n  }\n\n  /**\n   * Returns a Google Authenticator key URI.\n   * @returns {string} URI.\n   */\n  toString() {\n    const e = encodeURIComponent;\n    return (\n      \"otpauth://hotp/\" +\n      `${\n        this.issuer.length > 0\n          ? this.issuerInLabel\n            ? `${e(this.issuer)}:${e(this.label)}?issuer=${e(this.issuer)}&`\n            : `${e(this.label)}?issuer=${e(this.issuer)}&`\n          : `${e(this.label)}?`\n      }` +\n      `secret=${e(this.secret.base32)}&` +\n      `algorithm=${e(this.algorithm)}&` +\n      `digits=${e(this.digits)}&` +\n      `counter=${e(this.counter)}`\n    );\n  }\n}\n\nexport { HOTP };\n","/**\n * Converts an integer to an Uint8Array.\n * @param {number} num Integer.\n * @returns {Uint8Array} Uint8Array.\n */\nconst uintDecode = (num) => {\n  const buf = new ArrayBuffer(8);\n  const arr = new Uint8Array(buf);\n  let acc = num;\n\n  for (let i = 7; i >= 0; i--) {\n    if (acc === 0) break;\n    arr[i] = acc & 255;\n    acc -= arr[i];\n    acc /= 256;\n  }\n\n  return arr;\n};\n\n/**\n * Converts an Uint8Array to an integer.\n * @param {Uint8Array} arr Uint8Array.\n * @returns {number} Integer.\n */\nconst uintEncode = (arr) => {\n  let num = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== 0) {\n      num *= 256;\n      num += arr[i];\n    }\n  }\n\n  return num;\n};\n\nexport { uintDecode, uintEncode };\n","import * as crypto from \"node:crypto\";\n\nimport { globalScope } from \"../global-scope.js\";\n\n/**\n * Returns true if a is equal to b, without leaking timing information that would allow an attacker to guess one of the values.\n * @param {string} a String a.\n * @param {string} b String b.\n * @returns {boolean} Equality result.\n */\nconst timingSafeEqual = (a, b) => {\n  if (crypto?.timingSafeEqual) {\n    return crypto.timingSafeEqual(globalScope.Buffer.from(a), globalScope.Buffer.from(b));\n  } else {\n    if (a.length !== b.length) {\n      throw new TypeError(\"Input strings must have the same length\");\n    }\n    let i = -1;\n    let out = 0;\n    while (++i < a.length) {\n      out |= a.charCodeAt(i) ^ b.charCodeAt(i);\n    }\n    return out === 0;\n  }\n};\n\nexport { timingSafeEqual };\n","import { canonicalizeAlgorithm } from \"./internal/crypto/hmac-digest.js\";\nimport { HOTP } from \"./hotp.js\";\nimport { Secret } from \"./secret.js\";\n\n/**\n * TOTP: Time-Based One-Time Password Algorithm.\n * @see [RFC 6238](https://datatracker.ietf.org/doc/html/rfc6238)\n */\nclass TOTP {\n  /**\n   * Default configuration.\n   * @type {{\n   *   issuer: string,\n   *   label: string,\n   *   issuerInLabel: boolean,\n   *   algorithm: string,\n   *   digits: number,\n   *   period: number\n   *   window: number\n   * }}\n   */\n  static get defaults() {\n    return {\n      issuer: \"\",\n      label: \"OTPAuth\",\n      issuerInLabel: true,\n      algorithm: \"SHA1\",\n      digits: 6,\n      period: 30,\n      window: 1,\n    };\n  }\n\n  /**\n   * Creates a TOTP object.\n   * @param {Object} [config] Configuration options.\n   * @param {string} [config.issuer=''] Account provider.\n   * @param {string} [config.label='OTPAuth'] Account label.\n   * @param {boolean} [config.issuerInLabel=true] Include issuer prefix in label.\n   * @param {Secret|string} [config.secret=Secret] Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.period=30] Token time-step duration.\n   */\n  constructor({\n    issuer = TOTP.defaults.issuer,\n    label = TOTP.defaults.label,\n    issuerInLabel = TOTP.defaults.issuerInLabel,\n    secret = new Secret(),\n    algorithm = TOTP.defaults.algorithm,\n    digits = TOTP.defaults.digits,\n    period = TOTP.defaults.period,\n  } = {}) {\n    /**\n     * Account provider.\n     * @type {string}\n     */\n    this.issuer = issuer;\n    /**\n     * Account label.\n     * @type {string}\n     */\n    this.label = label;\n    /**\n     * Include issuer prefix in label.\n     * @type {boolean}\n     */\n    this.issuerInLabel = issuerInLabel;\n    /**\n     * Secret key.\n     * @type {Secret}\n     */\n    this.secret = typeof secret === \"string\" ? Secret.fromBase32(secret) : secret;\n    /**\n     * HMAC hashing algorithm.\n     * @type {string}\n     */\n    this.algorithm = canonicalizeAlgorithm(algorithm);\n    /**\n     * Token length.\n     * @type {number}\n     */\n    this.digits = digits;\n    /**\n     * Token time-step duration.\n     * @type {number}\n     */\n    this.period = period;\n  }\n\n  /**\n   * Generates a TOTP token.\n   * @param {Object} config Configuration options.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.period=30] Token time-step duration.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @returns {string} Token.\n   */\n  static generate({ secret, algorithm, digits, period = TOTP.defaults.period, timestamp = Date.now() }) {\n    return HOTP.generate({\n      secret,\n      algorithm,\n      digits,\n      counter: Math.floor(timestamp / 1000 / period),\n    });\n  }\n\n  /**\n   * Generates a TOTP token.\n   * @param {Object} [config] Configuration options.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @returns {string} Token.\n   */\n  generate({ timestamp = Date.now() } = {}) {\n    return TOTP.generate({\n      secret: this.secret,\n      algorithm: this.algorithm,\n      digits: this.digits,\n      period: this.period,\n      timestamp,\n    });\n  }\n\n  /**\n   * Validates a TOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.period=30] Token time-step duration.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {number|null} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */\n  static validate({ token, secret, algorithm, digits, period = TOTP.defaults.period, timestamp = Date.now(), window }) {\n    return HOTP.validate({\n      token,\n      secret,\n      algorithm,\n      digits,\n      counter: Math.floor(timestamp / 1000 / period),\n      window,\n    });\n  }\n\n  /**\n   * Validates a TOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {number|null} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */\n  validate({ token, timestamp, window }) {\n    return TOTP.validate({\n      token,\n      secret: this.secret,\n      algorithm: this.algorithm,\n      digits: this.digits,\n      period: this.period,\n      timestamp,\n      window,\n    });\n  }\n\n  /**\n   * Returns a Google Authenticator key URI.\n   * @returns {string} URI.\n   */\n  toString() {\n    const e = encodeURIComponent;\n    return (\n      \"otpauth://totp/\" +\n      `${\n        this.issuer.length > 0\n          ? this.issuerInLabel\n            ? `${e(this.issuer)}:${e(this.label)}?issuer=${e(this.issuer)}&`\n            : `${e(this.label)}?issuer=${e(this.issuer)}&`\n          : `${e(this.label)}?`\n      }` +\n      `secret=${e(this.secret.base32)}&` +\n      `algorithm=${e(this.algorithm)}&` +\n      `digits=${e(this.digits)}&` +\n      `period=${e(this.period)}`\n    );\n  }\n}\n\nexport { TOTP };\n","import { HOTP } from \"./hotp.js\";\nimport { TOTP } from \"./totp.js\";\n\n/**\n * Key URI regex (otpauth://TYPE/[ISSUER:]LABEL?PARAMETERS).\n * @type {RegExp}\n */\nconst OTPURI_REGEX = /^otpauth:\\/\\/([ht]otp)\\/(.+)\\?([A-Z0-9.~_-]+=[^?&]*(?:&[A-Z0-9.~_-]+=[^?&]*)*)$/i;\n\n/**\n * RFC 4648 base32 alphabet with pad.\n * @type {RegExp}\n */\nconst SECRET_REGEX = /^[2-7A-Z]+=*$/i;\n\n/**\n * Regex for supported algorithms.\n * @type {RegExp}\n */\nconst ALGORITHM_REGEX = /^SHA(?:1|224|256|384|512|3-224|3-256|3-384|3-512)$/i;\n\n/**\n * Integer regex.\n * @type {RegExp}\n */\nconst INTEGER_REGEX = /^[+-]?\\d+$/;\n\n/**\n * Positive integer regex.\n * @type {RegExp}\n */\nconst POSITIVE_INTEGER_REGEX = /^\\+?[1-9]\\d*$/;\n\n/**\n * HOTP/TOTP object/string conversion.\n * @see [Key URI Format](https://github.com/google/google-authenticator/wiki/Key-Uri-Format)\n */\nclass URI {\n  /**\n   * Parses a Google Authenticator key URI and returns an HOTP/TOTP object.\n   * @param {string} uri Google Authenticator Key URI.\n   * @returns {HOTP|TOTP} HOTP/TOTP object.\n   */\n  static parse(uri) {\n    let uriGroups;\n\n    try {\n      uriGroups = uri.match(OTPURI_REGEX);\n      // eslint-disable-next-line no-unused-vars\n    } catch (_) {\n      /* Handled below */\n    }\n\n    if (!Array.isArray(uriGroups)) {\n      throw new URIError(\"Invalid URI format\");\n    }\n\n    // Extract URI groups.\n    const uriType = uriGroups[1].toLowerCase();\n    const uriLabel = uriGroups[2].split(/(?::|%3A) *(.+)/i, 2).map(decodeURIComponent);\n    /** @type {Object.<string, string>} */\n    const uriParams = uriGroups[3].split(\"&\").reduce((acc, cur) => {\n      const pairArr = cur.split(/=(.*)/, 2).map(decodeURIComponent);\n      const pairKey = pairArr[0].toLowerCase();\n      const pairVal = pairArr[1];\n      /** @type {Object.<string, string>} */\n      const pairAcc = acc;\n\n      pairAcc[pairKey] = pairVal;\n      return pairAcc;\n    }, {});\n\n    // 'OTP' will be instantiated with 'config' argument.\n    let OTP;\n    const config = {};\n\n    if (uriType === \"hotp\") {\n      OTP = HOTP;\n\n      // Counter: required\n      if (typeof uriParams.counter !== \"undefined\" && INTEGER_REGEX.test(uriParams.counter)) {\n        config.counter = parseInt(uriParams.counter, 10);\n      } else {\n        throw new TypeError(\"Missing or invalid 'counter' parameter\");\n      }\n    } else if (uriType === \"totp\") {\n      OTP = TOTP;\n\n      // Period: optional\n      if (typeof uriParams.period !== \"undefined\") {\n        if (POSITIVE_INTEGER_REGEX.test(uriParams.period)) {\n          config.period = parseInt(uriParams.period, 10);\n        } else {\n          throw new TypeError(\"Invalid 'period' parameter\");\n        }\n      }\n    } else {\n      throw new TypeError(\"Unknown OTP type\");\n    }\n\n    // Label: required\n    // Issuer: optional\n    if (typeof uriParams.issuer !== \"undefined\") {\n      config.issuer = uriParams.issuer;\n    }\n    if (uriLabel.length === 2) {\n      config.label = uriLabel[1];\n      if (typeof config.issuer === \"undefined\" || config.issuer === \"\") {\n        config.issuer = uriLabel[0];\n      } else if (uriLabel[0] === \"\") {\n        config.issuerInLabel = false;\n      }\n    } else {\n      config.label = uriLabel[0];\n      if (typeof config.issuer !== \"undefined\" && config.issuer !== \"\") {\n        config.issuerInLabel = false;\n      }\n    }\n\n    // Secret: required\n    if (typeof uriParams.secret !== \"undefined\" && SECRET_REGEX.test(uriParams.secret)) {\n      config.secret = uriParams.secret;\n    } else {\n      throw new TypeError(\"Missing or invalid 'secret' parameter\");\n    }\n\n    // Algorithm: optional\n    if (typeof uriParams.algorithm !== \"undefined\") {\n      if (ALGORITHM_REGEX.test(uriParams.algorithm)) {\n        config.algorithm = uriParams.algorithm;\n      } else {\n        throw new TypeError(\"Invalid 'algorithm' parameter\");\n      }\n    }\n\n    // Digits: optional\n    if (typeof uriParams.digits !== \"undefined\") {\n      if (POSITIVE_INTEGER_REGEX.test(uriParams.digits)) {\n        config.digits = parseInt(uriParams.digits, 10);\n      } else {\n        throw new TypeError(\"Invalid 'digits' parameter\");\n      }\n    }\n\n    return new OTP(config);\n  }\n\n  /**\n   * Converts an HOTP/TOTP object to a Google Authenticator key URI.\n   * @param {HOTP|TOTP} otp HOTP/TOTP object.\n   * @returns {string} Google Authenticator Key URI.\n   */\n  static stringify(otp) {\n    if (otp instanceof HOTP || otp instanceof TOTP) {\n      return otp.toString();\n    }\n\n    throw new TypeError(\"Invalid 'HOTP/TOTP' object\");\n  }\n}\n\nexport { URI };\n","/**\n * Library version.\n * @type {string}\n */\nconst version = \"__OTPAUTH_VERSION__\";\n\nexport { version };\n"],"names":["number","n","Number","isSafeInteger","Error","bytes","b","lengths","a","Uint8Array","constructor","name","length","includes","exists","instance","checkFinished","destroyed","finished","output","out","min","outputLen","createView","arr","DataView","buffer","byteOffset","byteLength","rotr","word","shift","rotl","isLE","Uint32Array","byteSwap32","i","toBytes","data","str","TextEncoder","encode","utf8ToBytes","abytes","Hash","clone","this","_cloneInto","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","blockLen","create","HMAC","buf","assertExists","iHash","digestInto","assertBytes","oHash","destroy","to","Object","getPrototypeOf","hash","_key","super","h","assertHash","key","pad","set","fill","hmac","message","Chi","c","Maj","HashMD","view","len","pos","take","Math","subarray","process","dataView","roundClean","padOffset","value","setBigUint64","_32n","BigInt","_u32_max","wh","wl","l","setUint32","oview","outLen","state","get","res","slice","SHA1_IV","SHA1_W","SHA1","A","B","C","D","E","offset","getUint32","F","K","T","sha1","SHA256_K","SHA256_IV","SHA256_W","SHA256","G","H","W15","W2","s0","s1","T1","T2","SHA224","sha256","sha224","U32_MASK64","fromBig","le","split","lst","Ah","Al","rotlSH","s","rotlSL","rotlBH","rotlBL","u64","toBig","shrSH","_l","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA512_Kh","SHA512_Kl","map","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA384","sha512","sha384","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","push","t","j","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","keccak","state32","rounds","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","posOut","finish","suffix","writeInto","bufferOut","xofInto","enableXOF","xof","floor","gen","sha3_224","sha3_256","sha3_384","sha3_512","globalScope","globalThis","defineProperty","prototype","configurable","__GLOBALTHIS__","self","window","global","nobleHashes","canonicalizeAlgorithm","algorithm","test","TypeError","ALPHABET","base32Decode","end","replace","substring","toUpperCase","ArrayBuffer","bits","index","idx","indexOf","base32Encode","hexDecode","parseInt","hexEncode","hex","toString","latin1Decode","charCodeAt","latin1Encode","String","fromCharCode","ENCODER","DECODER","TextDecoder","utf8Decode","utf8Encode","decode","Secret","fromLatin1","fromUTF8","fromBase32","fromHex","latin1","enumerable","writable","utf8","base32","size","crypto","getRandomValues","randomBytes","HOTP","defaults","issuer","label","issuerInLabel","digits","counter","generate","secret","hmacDigest","num","acc","uintDecode","padStart","validate","token","delta","check","generatedToken","timingSafeEqual","e","encodeURIComponent","TOTP","period","timestamp","Date","now","OTPURI_REGEX","SECRET_REGEX","ALGORITHM_REGEX","INTEGER_REGEX","POSITIVE_INTEGER_REGEX","URI","parse","uri","uriGroups","match","_","Array","isArray","URIError","uriType","toLowerCase","uriLabel","decodeURIComponent","uriParams","reduce","cur","pairArr","pairKey","pairVal","pairAcc","OTP","config","stringify","otp","version"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8]}