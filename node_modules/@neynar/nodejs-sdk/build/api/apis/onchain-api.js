"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * The Farcaster API allows you to interact with the Farcaster protocol. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
 *
 * The version of the OpenAPI document: 2.0.5
 * Contact: team@neynar.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnchainApi = exports.OnchainApiFactory = exports.OnchainApiFp = exports.OnchainApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * OnchainApi - axios parameter creator
 * @export
 */
const OnchainApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Fetch a list of relevant owners for a specific FID. This usually shows on a fungible asset page as \"X, Y, Z and N others you know own this asset\".
         * @summary Relevant owners
         * @param {string} contractAddress Contract address of the fungible asset
         * @param {Array<Networks>} networks Comma separated list of networks to fetch balances for. Currently, only \&quot;base\&quot; is supported.
         * @param {number} viewerFid The FID of the user to customize this response for. Providing this will also return a list of owners that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<RelevantFungibleOwnersResponse>} A promise that resolves to a `RelevantFungibleOwnersResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-fungible-owners)
         *
         */
        fetchRelevantFungibleOwners: async (contractAddress, networks, viewerFid, options = {}) => {
            // verify required parameter 'contractAddress' is not null or undefined
            (0, common_1.assertParamExists)('fetchRelevantFungibleOwners', 'contractAddress', contractAddress);
            // verify required parameter 'networks' is not null or undefined
            (0, common_1.assertParamExists)('fetchRelevantFungibleOwners', 'networks', networks);
            // verify required parameter 'viewerFid' is not null or undefined
            (0, common_1.assertParamExists)('fetchRelevantFungibleOwners', 'viewerFid', viewerFid);
            const localVarPath = `/farcaster/fungible/owner/relevant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (contractAddress !== undefined) {
                localVarQueryParameter['contract_address'] = contractAddress;
            }
            if (networks) {
                localVarQueryParameter['networks'] = networks.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewerFid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the token balances of a user given their FID
         * @summary Token balance
         * @param {number} fid FID of the user to fetch
         * @param {Array<Networks>} networks Comma separated list of networks to fetch balances for. Currently, only \&quot;base\&quot; is supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BalanceResponse>} A promise that resolves to a `BalanceResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-balance)
         *
         */
        fetchUserBalance: async (fid, networks, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('fetchUserBalance', 'fid', fid);
            // verify required parameter 'networks' is not null or undefined
            (0, common_1.assertParamExists)('fetchUserBalance', 'networks', networks);
            const localVarPath = `/farcaster/user/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (networks) {
                localVarQueryParameter['networks'] = networks.join(base_1.COLLECTION_FORMATS.csv);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.OnchainApiAxiosParamCreator = OnchainApiAxiosParamCreator;
/**
 * OnchainApi - functional programming interface
 * @export
 */
const OnchainApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.OnchainApiAxiosParamCreator)(configuration);
    return {
        /**
         * Fetch a list of relevant owners for a specific FID. This usually shows on a fungible asset page as \"X, Y, Z and N others you know own this asset\".
         * @summary Relevant owners
         * @param {string} contractAddress Contract address of the fungible asset
         * @param {Array<Networks>} networks Comma separated list of networks to fetch balances for. Currently, only \&quot;base\&quot; is supported.
         * @param {number} viewerFid The FID of the user to customize this response for. Providing this will also return a list of owners that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<RelevantFungibleOwnersResponse>} A promise that resolves to a `RelevantFungibleOwnersResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-fungible-owners)
         *
         */
        async fetchRelevantFungibleOwners(contractAddress, networks, viewerFid, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchRelevantFungibleOwners(contractAddress, networks, viewerFid, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['OnchainApi.fetchRelevantFungibleOwners']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches the token balances of a user given their FID
         * @summary Token balance
         * @param {number} fid FID of the user to fetch
         * @param {Array<Networks>} networks Comma separated list of networks to fetch balances for. Currently, only \&quot;base\&quot; is supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BalanceResponse>} A promise that resolves to a `BalanceResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-balance)
         *
         */
        async fetchUserBalance(fid, networks, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserBalance(fid, networks, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['OnchainApi.fetchUserBalance']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.OnchainApiFp = OnchainApiFp;
/**
 * OnchainApi - factory interface
 * @export
 */
const OnchainApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.OnchainApiFp)(configuration);
    return {
        /**
         * Fetch a list of relevant owners for a specific FID. This usually shows on a fungible asset page as \"X, Y, Z and N others you know own this asset\".
         * @summary Relevant owners
         * @param {OnchainApiFetchRelevantFungibleOwnersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<RelevantFungibleOwnersResponse>} A promise that resolves to a `RelevantFungibleOwnersResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-fungible-owners)
         *
         */
        fetchRelevantFungibleOwners(requestParameters, options) {
            return localVarFp.fetchRelevantFungibleOwners(requestParameters.contractAddress, requestParameters.networks, requestParameters.viewerFid, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the token balances of a user given their FID
         * @summary Token balance
         * @param {OnchainApiFetchUserBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BalanceResponse>} A promise that resolves to a `BalanceResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-balance)
         *
         */
        fetchUserBalance(requestParameters, options) {
            return localVarFp.fetchUserBalance(requestParameters.fid, requestParameters.networks, options).then((request) => request(axios, basePath));
        },
    };
};
exports.OnchainApiFactory = OnchainApiFactory;
/**
 * OnchainApi - object-oriented interface
 * @export
 * @class OnchainApi
 * @extends {BaseAPI}
 */
class OnchainApi extends base_1.BaseAPI {
    /**
     * Fetch a list of relevant owners for a specific FID. This usually shows on a fungible asset page as \"X, Y, Z and N others you know own this asset\".
     * @summary Relevant owners
     * @param {OnchainApiFetchRelevantFungibleOwnersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnchainApi
     * @returns {Promise<RelevantFungibleOwnersResponse>} A promise that resolves to a `RelevantFungibleOwnersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-fungible-owners)
     *
     */
    fetchRelevantFungibleOwners(requestParameters, options) {
        return (0, exports.OnchainApiFp)(this.configuration).fetchRelevantFungibleOwners(requestParameters.contractAddress, requestParameters.networks, requestParameters.viewerFid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the token balances of a user given their FID
     * @summary Token balance
     * @param {OnchainApiFetchUserBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnchainApi
     * @returns {Promise<BalanceResponse>} A promise that resolves to a `BalanceResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-balance)
     *
     */
    fetchUserBalance(requestParameters, options) {
        return (0, exports.OnchainApiFp)(this.configuration).fetchUserBalance(requestParameters.fid, requestParameters.networks, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.OnchainApi = OnchainApi;
